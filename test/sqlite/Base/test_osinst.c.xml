<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="test_osinst.c" filename=""><comment type="block">/*
** 2008 April 10
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
******************************************************************************
**
** This file contains the implementation of an SQLite vfs wrapper that
** adds instrumentation to all vfs and file methods. C and Tcl interfaces
** are provided to control the instrumentation.
**
** $Id: test_osinst.c,v 1.19 2009/01/08 17:57:32 danielk1977 Exp $
*/</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_INSTVFS</name></cpp:ifdef>
<comment type="block">/*
** C interface:
**
**   sqlite3_instvfs_create()
**   sqlite3_instvfs_destroy()
**   sqlite3_instvfs_configure()
**
**   sqlite3_instvfs_reset()
**   sqlite3_instvfs_get()
**
**   sqlite3_instvfs_binarylog
**   sqlite3_instvfs_binarylog_marker
**
** Tcl interface (omitted if SQLITE_TEST is not set):
** 
**   sqlite3_instvfs create NAME ?PARENT?
**
**       Create and register new vfs called $NAME, which is a wrapper around
**       the existing vfs $PARENT. If the PARENT argument is omitted, the
**       new vfs is a wrapper around the current default vfs.
**
**   sqlite3_instvfs destroy NAME
**
**       Deregister and destroy the vfs named $NAME, which must have been
**       created by an earlier invocation of [sqlite3_instvfs create].
**
**   sqlite3_instvfs configure NAME SCRIPT
**
**       Configure the callback script for the vfs $NAME, which much have
**       been created by an earlier invocation of [sqlite3_instvfs create].
**       After a callback script has been configured, it is invoked each
**       time a vfs or file method is called by SQLite. Before invoking
**       the callback script, five arguments are appended to it:
**
**         * The name of the invoked method - i.e. "xRead".
**
**         * The time consumed by the method call as measured by 
**           sqlite3Hwtime() (an integer value)
**
**         * A string value with a different meaning for different calls. 
**           For file methods, the name of the file being operated on. For
**           other methods it is the filename argument, if any.
**
**         * A 32-bit integer value with a call-specific meaning.
**
**         * A 64-bit integer value. For xRead() and xWrite() calls this
**           is the file offset being written to or read from. Unused by
**           all other calls.
**
**   sqlite3_instvfs reset NAME
**
**       Zero the internal event counters associated with vfs $NAME, 
**       which must have been created by an earlier invocation of 
**       [sqlite3_instvfs create].
**
**   sqlite3_instvfs report NAME
**
**       Return the values of the internal event counters associated 
**       with vfs $NAME. The report format is a list with one element
**       for each method call (xWrite, xRead etc.). Each element is
**       itself a list with three elements:
**
**         * The name of the method call - i.e. "xWrite",
**         * The total number of calls to the method (an integer).
**         * The aggregate time consumed by all calls to the method as
**           measured by sqlite3Hwtime() (an integer).
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>

<comment type="block">/*
** Maximum pathname length supported by the inst backend.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>INST_MAX_PATHNAME</name> 512</cpp:define>


<comment type="block">/* File methods */</comment>
<comment type="block">/* Vfs methods */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>OS_ACCESS</name>            1</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>OS_CHECKRESERVEDLOCK</name> 2</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>OS_CLOSE</name>             3</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>OS_CURRENTTIME</name>       4</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>OS_DELETE</name>            5</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>OS_DEVCHAR</name>           6</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>OS_FILECONTROL</name>       7</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>OS_FILESIZE</name>          8</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>OS_FULLPATHNAME</name>      9</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>OS_LOCK</name>              11</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>OS_OPEN</name>              12</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>OS_RANDOMNESS</name>        13</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>OS_READ</name>              14</cpp:define> 
<cpp:define>#<cpp:directive>define</cpp:directive> <name>OS_SECTORSIZE</name>        15</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>OS_SLEEP</name>             16</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>OS_SYNC</name>              17</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>OS_TRUNCATE</name>          18</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>OS_UNLOCK</name>            19</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>OS_WRITE</name>             20</cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>OS_NUMEVENTS</name>         21</cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>BINARYLOG_STRING</name>     30</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>BINARYLOG_MARKER</name>     31</cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>BINARYLOG_PREPARE_V2</name> 64</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>BINARYLOG_STEP</name>       65</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>BINARYLOG_FINALIZE</name>   66</cpp:define>

<struct>struct <name>InstVfs</name> <block>{<public type="default">
  <decl_stmt><decl><type><name>sqlite3_vfs</name></type> <name>base</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> *</type><name>pVfs</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>void</name> *</type><name>pClient</name></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> (*<name>xDel</name>)<parameter_list>(<param><decl><type><name>void</name> *</type></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> (*<name>xCall</name>)<parameter_list>(<param><decl><type><name>void</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>sqlite3_int64</name></type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>sqlite3_int64</name></type></decl></param>)</parameter_list>;</function_decl>

  <comment type="block">/* Counters */</comment>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name><name>aTime</name><index>[<expr><name>OS_NUMEVENTS</name></expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name><name>aCount</name><index>[<expr><name>OS_NUMEVENTS</name></expr>]</index></name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>iNextFileId</name></decl>;</decl_stmt>
</public>}</block>;</struct>
<typedef>typedef <type><struct>struct <name>InstVfs</name> InstVfs;</struct></type></typedef>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>REALVFS</name>(p) (((InstVfs *)(p))-&gt;pVfs)</cpp:define>

<typedef>typedef <type><struct>struct <name>inst_file</name> inst_file;</struct></type></typedef>
<struct>struct <name>inst_file</name> <block>{<public type="default">
  <decl_stmt><decl><type><name>sqlite3_file</name></type> <name>base</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_file</name> *</type><name>pReal</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>InstVfs</name> *</type><name>pInstVfs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>zName</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iFileId</name></decl>;</decl_stmt>               <comment type="block">/* File id number */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<comment type="block">/*
** Method declarations for inst_file.
*/</comment>
<function_decl><type><name>static</name> <name>int</name></type> <name>instClose</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>instRead</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>, <param><decl><type><name>void</name>*</type></decl></param>, <param><decl><type><name>int</name></type> <name>iAmt</name></decl></param>, <param><decl><type><name>sqlite3_int64</name></type> <name>iOfst</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>instWrite</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>,<param><decl><type><name>const</name> <name>void</name>*</type></decl></param>,<param><decl><type><name>int</name></type> <name>iAmt</name></decl></param>, <param><decl><type><name>sqlite3_int64</name></type> <name>iOfst</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>instTruncate</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>, <param><decl><type><name>sqlite3_int64</name></type> <name>size</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>instSync</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>, <param><decl><type><name>int</name></type> <name>flags</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>instFileSize</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>, <param><decl><type><name>sqlite3_int64</name> *</type><name>pSize</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>instLock</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>instUnlock</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>instCheckReservedLock</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>, <param><decl><type><name>int</name> *</type><name>pResOut</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>instFileControl</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>, <param><decl><type><name>int</name></type> <name>op</name></decl></param>, <param><decl><type><name>void</name> *</type><name>pArg</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>instSectorSize</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>instDeviceCharacteristics</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/*
** Method declarations for inst_vfs.
*/</comment>
<function_decl><type><name>static</name> <name>int</name></type> <name>instOpen</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name>*</type></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type></decl></param>, <param><decl><type><name>sqlite3_file</name>*</type></decl></param>, <param><decl><type><name>int</name></type></decl></param> , <param><decl><type><name>int</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>instDelete</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name>*</type></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>zName</name></decl></param>, <param><decl><type><name>int</name></type> <name>syncDir</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>instAccess</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name>*</type></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>zName</name></decl></param>, <param><decl><type><name>int</name></type> <name>flags</name></decl></param>, <param><decl><type><name>int</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>instFullPathname</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name>*</type></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>zName</name></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>char</name> *</type><name>zOut</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>void</name> *</type><name>instDlOpen</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name>*</type></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>zFilename</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>void</name></type> <name>instDlError</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name>*</type></decl></param>, <param><decl><type><name>int</name></type> <name>nByte</name></decl></param>, <param><decl><type><name>char</name> *</type><name>zErrMsg</name></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>static</name></type> <name>void</name> <argument_list>(<argument><expr>*<call><name>instDlSym</name><argument_list>(<argument><expr><name>sqlite3_vfs</name> *<name>pVfs</name></expr></argument>, <argument><expr><name>void</name> *<name>p</name></expr></argument>, <argument><expr><name>const</name> <name>char</name>*<name>zSym</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>static</name> <name>void</name></type> <name>instDlClose</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name>*</type></decl></param>, <param><decl><type><name>void</name>*</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>instRandomness</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name>*</type></decl></param>, <param><decl><type><name>int</name></type> <name>nByte</name></decl></param>, <param><decl><type><name>char</name> *</type><name>zOut</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>instSleep</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name>*</type></decl></param>, <param><decl><type><name>int</name></type> <name>microseconds</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>instCurrentTime</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name>*</type></decl></param>, <param><decl><type><name>double</name>*</type></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>static</name> <name>void</name></type> <name>binarylog_blob</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name> *</type></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl> 

<decl_stmt><decl><type><name>static</name> <name>sqlite3_vfs</name></type> <name>inst_vfs</name> =<init> <expr><block>{
  <expr>1</expr>,                      <comment type="block">/* iVersion */</comment>
  <expr><call><name>sizeof</name><argument_list>(<argument><expr><name>inst_file</name></expr></argument>)</argument_list></call></expr>,      <comment type="block">/* szOsFile */</comment>
  <expr><name>INST_MAX_PATHNAME</name></expr>,      <comment type="block">/* mxPathname */</comment>
  <expr>0</expr>,                      <comment type="block">/* pNext */</comment>
  <expr>0</expr>,                      <comment type="block">/* zName */</comment>
  <expr>0</expr>,                      <comment type="block">/* pAppData */</comment>
  <expr><name>instOpen</name></expr>,               <comment type="block">/* xOpen */</comment>
  <expr><name>instDelete</name></expr>,             <comment type="block">/* xDelete */</comment>
  <expr><name>instAccess</name></expr>,             <comment type="block">/* xAccess */</comment>
  <expr><name>instFullPathname</name></expr>,       <comment type="block">/* xFullPathname */</comment>
  <expr><name>instDlOpen</name></expr>,             <comment type="block">/* xDlOpen */</comment>
  <expr><name>instDlError</name></expr>,            <comment type="block">/* xDlError */</comment>
  <expr><name>instDlSym</name></expr>,              <comment type="block">/* xDlSym */</comment>
  <expr><name>instDlClose</name></expr>,            <comment type="block">/* xDlClose */</comment>
  <expr><name>instRandomness</name></expr>,         <comment type="block">/* xRandomness */</comment>
  <expr><name>instSleep</name></expr>,              <comment type="block">/* xSleep */</comment>
  <expr><name>instCurrentTime</name></expr>         <comment type="block">/* xCurrentTime */</comment>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>static</name> <name>sqlite3_io_methods</name></type> <name>inst_io_methods</name> =<init> <expr><block>{
  <expr>1</expr>,                            <comment type="block">/* iVersion */</comment>
  <expr><name>instClose</name></expr>,                      <comment type="block">/* xClose */</comment>
  <expr><name>instRead</name></expr>,                       <comment type="block">/* xRead */</comment>
  <expr><name>instWrite</name></expr>,                      <comment type="block">/* xWrite */</comment>
  <expr><name>instTruncate</name></expr>,                   <comment type="block">/* xTruncate */</comment>
  <expr><name>instSync</name></expr>,                       <comment type="block">/* xSync */</comment>
  <expr><name>instFileSize</name></expr>,                   <comment type="block">/* xFileSize */</comment>
  <expr><name>instLock</name></expr>,                       <comment type="block">/* xLock */</comment>
  <expr><name>instUnlock</name></expr>,                     <comment type="block">/* xUnlock */</comment>
  <expr><name>instCheckReservedLock</name></expr>,          <comment type="block">/* xCheckReservedLock */</comment>
  <expr><name>instFileControl</name></expr>,                <comment type="block">/* xFileControl */</comment>
  <expr><name>instSectorSize</name></expr>,                 <comment type="block">/* xSectorSize */</comment>
  <expr><name>instDeviceCharacteristics</name></expr>       <comment type="block">/* xDeviceCharacteristics */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* 
** hwtime.h contains inline assembler code for implementing 
** high-performance timing routines.
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwtime.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>OS_TIME_IO</name>(eEvent, A, B, Call) {     \
  inst_file *p = (inst_file *)pFile;         \
  InstVfs *pInstVfs = p-&gt;pInstVfs;           \
  int rc;                                    \
  sqlite_uint64 t = sqlite3Hwtime();         \
  rc = Call;                                 \
  t = sqlite3Hwtime() - t;                   \
  pInstVfs-&gt;aTime[eEvent] += t;              \
  pInstVfs-&gt;aCount[eEvent] += 1;             \
  if( pInstVfs-&gt;xCall ){                     \
    pInstVfs-&gt;xCall(                         \
      pInstVfs-&gt;pClient,eEvent,p-&gt;iFileId,t,rc,p-&gt;zName,p-&gt;flags,A,B  \
    );                                       \
  }                                          \
  return rc;                                 \
}</cpp:define>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>OS_TIME_VFS</name>(eEvent, Z, flags, A, B, Call) {      \
  InstVfs *pInstVfs = (InstVfs *)pVfs;   \
  int rc;                                \
  sqlite_uint64 t = sqlite3Hwtime();     \
  rc = Call;                             \
  t = sqlite3Hwtime() - t;               \
  pInstVfs-&gt;aTime[eEvent] += t;          \
  pInstVfs-&gt;aCount[eEvent] += 1;         \
  if( pInstVfs-&gt;xCall ){                 \
    pInstVfs-&gt;xCall(pInstVfs-&gt;pClient,eEvent,0, t, rc, Z, flags, A, B); \
  }                                      \
  return rc;                             \
}</cpp:define>

<comment type="block">/*
** Close an inst-file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>instClose</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>)</parameter_list><block>{
  <expr_stmt><expr><call><name>OS_TIME_IO</name><argument_list>(<argument><expr><name>OS_CLOSE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, 
    <argument><expr>(<name>p</name>-&gt;<name>pReal</name>-&gt;<name>pMethods</name> ? <name>p</name>-&gt;<name>pReal</name>-&gt;<name>pMethods</name>-&gt;<call><name>xClose</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>pReal</name></expr></argument>)</argument_list></call> : <name>SQLITE_OK</name>)</expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
** Read data from an inst-file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>instRead</name><parameter_list>(
  <param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>, 
  <param><decl><type><name>void</name> *</type><name>zBuf</name></decl></param>, 
  <param><decl><type><name>int</name></type> <name>iAmt</name></decl></param>, 
  <param><decl><type><name>sqlite_int64</name></type> <name>iOfst</name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3_vfs</name> *</type><name>pVfs</name> =<init> <expr>(<name>sqlite3_vfs</name> *)(((<name>inst_file</name> *)<name>pFile</name>)-&gt;<name>pInstVfs</name>)</expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>OS_TIME_IO</name><argument_list>(<argument><expr><name>OS_READ</name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>, <argument><expr>(<call><name>binarylog_blob</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call>, <name>iOfst</name>)</expr></argument>, 
      <argument><expr><name>p</name>-&gt;<name>pReal</name>-&gt;<name>pMethods</name>-&gt;<call><name>xRead</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>pReal</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>, <argument><expr><name>iOfst</name></expr></argument>)</argument_list></call></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
** Write data to an inst-file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>instWrite</name><parameter_list>(
  <param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>,
  <param><decl><type><name>const</name> <name>void</name> *</type><name>z</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>iAmt</name></decl></param>,
  <param><decl><type><name>sqlite_int64</name></type> <name>iOfst</name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3_vfs</name> *</type><name>pVfs</name> =<init> <expr>(<name>sqlite3_vfs</name> *)(((<name>inst_file</name> *)<name>pFile</name>)-&gt;<name>pInstVfs</name>)</expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>binarylog_blob</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>OS_TIME_IO</name><argument_list>(<argument><expr><name>OS_WRITE</name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>, <argument><expr><name>iOfst</name></expr></argument>, 
      <argument><expr><name>p</name>-&gt;<name>pReal</name>-&gt;<name>pMethods</name>-&gt;<call><name>xWrite</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>pReal</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>, <argument><expr><name>iOfst</name></expr></argument>)</argument_list></call></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
** Truncate an inst-file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>instTruncate</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>, <param><decl><type><name>sqlite_int64</name></type> <name>size</name></decl></param>)</parameter_list><block>{
  <expr_stmt><expr><call><name>OS_TIME_IO</name><argument_list>(<argument><expr><name>OS_TRUNCATE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>(<name>int</name>)<name>size</name></expr></argument>, 
    <argument><expr><name>p</name>-&gt;<name>pReal</name>-&gt;<name>pMethods</name>-&gt;<call><name>xTruncate</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>pReal</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
** Sync an inst-file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>instSync</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>, <param><decl><type><name>int</name></type> <name>flags</name></decl></param>)</parameter_list><block>{
  <expr_stmt><expr><call><name>OS_TIME_IO</name><argument_list>(<argument><expr><name>OS_SYNC</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>p</name>-&gt;<name>pReal</name>-&gt;<name>pMethods</name>-&gt;<call><name>xSync</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>pReal</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
** Return the current file-size of an inst-file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>instFileSize</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>, <param><decl><type><name>sqlite_int64</name> *</type><name>pSize</name></decl></param>)</parameter_list><block>{
  <expr_stmt><expr><call><name>OS_TIME_IO</name><argument_list>(<argument><expr><name>OS_FILESIZE</name></expr></argument>, <argument><expr>(<name>int</name>)(*<name>pSize</name>)</expr></argument>, <argument><expr>0</expr></argument>, 
    <argument><expr><name>p</name>-&gt;<name>pReal</name>-&gt;<name>pMethods</name>-&gt;<call><name>xFileSize</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>pReal</name></expr></argument>, <argument><expr><name>pSize</name></expr></argument>)</argument_list></call></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
** Lock an inst-file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>instLock</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>, <param><decl><type><name>int</name></type> <name>eLock</name></decl></param>)</parameter_list><block>{
  <expr_stmt><expr><call><name>OS_TIME_IO</name><argument_list>(<argument><expr><name>OS_LOCK</name></expr></argument>, <argument><expr><name>eLock</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>p</name>-&gt;<name>pReal</name>-&gt;<name>pMethods</name>-&gt;<call><name>xLock</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>pReal</name></expr></argument>, <argument><expr><name>eLock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
** Unlock an inst-file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>instUnlock</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>, <param><decl><type><name>int</name></type> <name>eLock</name></decl></param>)</parameter_list><block>{
  <expr_stmt><expr><call><name>OS_TIME_IO</name><argument_list>(<argument><expr><name>OS_UNLOCK</name></expr></argument>, <argument><expr><name>eLock</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>p</name>-&gt;<name>pReal</name>-&gt;<name>pMethods</name>-&gt;<call><name>xUnlock</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>pReal</name></expr></argument>, <argument><expr><name>eLock</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
** Check if another file-handle holds a RESERVED lock on an inst-file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>instCheckReservedLock</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>, <param><decl><type><name>int</name> *</type><name>pResOut</name></decl></param>)</parameter_list><block>{
  <expr_stmt><expr><call><name>OS_TIME_IO</name><argument_list>(<argument><expr><name>OS_CHECKRESERVEDLOCK</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, 
      <argument><expr><name>p</name>-&gt;<name>pReal</name>-&gt;<name>pMethods</name>-&gt;<call><name>xCheckReservedLock</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>pReal</name></expr></argument>, <argument><expr><name>pResOut</name></expr></argument>)</argument_list></call></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
** File control method. For custom operations on an inst-file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>instFileControl</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>, <param><decl><type><name>int</name></type> <name>op</name></decl></param>, <param><decl><type><name>void</name> *</type><name>pArg</name></decl></param>)</parameter_list><block>{
  <expr_stmt><expr><call><name>OS_TIME_IO</name><argument_list>(<argument><expr><name>OS_FILECONTROL</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>p</name>-&gt;<name>pReal</name>-&gt;<name>pMethods</name>-&gt;<call><name>xFileControl</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>pReal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>pArg</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
** Return the sector-size in bytes for an inst-file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>instSectorSize</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>)</parameter_list><block>{
  <expr_stmt><expr><call><name>OS_TIME_IO</name><argument_list>(<argument><expr><name>OS_SECTORSIZE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>p</name>-&gt;<name>pReal</name>-&gt;<name>pMethods</name>-&gt;<call><name>xSectorSize</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>pReal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
** Return the device characteristic flags supported by an inst-file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>instDeviceCharacteristics</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>)</parameter_list><block>{
  <expr_stmt><expr><call><name>OS_TIME_IO</name><argument_list>(<argument><expr><name>OS_DEVCHAR</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>p</name>-&gt;<name>pReal</name>-&gt;<name>pMethods</name>-&gt;<call><name>xDeviceCharacteristics</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>pReal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
** Open an inst file handle.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>instOpen</name><parameter_list>(
  <param><decl><type><name>sqlite3_vfs</name> *</type><name>pVfs</name></decl></param>,
  <param><decl><type><name>const</name> <name>char</name> *</type><name>zName</name></decl></param>,
  <param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>flags</name></decl></param>,
  <param><decl><type><name>int</name> *</type><name>pOutFlags</name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>inst_file</name> *</type><name>p</name> =<init> <expr>(<name>inst_file</name> *)<name>pFile</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>pFile</name>-&gt;<name>pMethods</name> = &amp;<name>inst_io_methods</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name>-&gt;<name>pReal</name> = (<name>sqlite3_file</name> *)&amp;<name><name>p</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name>-&gt;<name>pInstVfs</name> = (<name>InstVfs</name> *)<name>pVfs</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name>-&gt;<name>zName</name> = <name>zName</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name>-&gt;<name>flags</name> = <name>flags</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name>-&gt;<name>iFileId</name> = ++<name>p</name>-&gt;<name>pInstVfs</name>-&gt;<name>iNextFileId</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>binarylog_blob</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>OS_TIME_VFS</name><argument_list>(<argument><expr><name>OS_OPEN</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>p</name>-&gt;<name>iFileId</name></expr></argument>, <argument><expr>0</expr></argument>,
    <argument><expr><call><name>REALVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call>-&gt;<call><name>xOpen</name><argument_list>(<argument><expr><call><name>REALVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><name>p</name>-&gt;<name>pReal</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>pOutFlags</name></expr></argument>)</argument_list></call></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
** Delete the file located at zPath. If the dirSync argument is true,
** ensure the file-system modifications are synced to disk before
** returning.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>instDelete</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name> *</type><name>pVfs</name></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>zPath</name></decl></param>, <param><decl><type><name>int</name></type> <name>dirSync</name></decl></param>)</parameter_list><block>{
  <expr_stmt><expr><call><name>binarylog_blob</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>, <argument><expr><name>zPath</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>OS_TIME_VFS</name><argument_list>(<argument><expr><name>OS_DELETE</name></expr></argument>, <argument><expr><name>zPath</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>dirSync</name></expr></argument>, <argument><expr>0</expr></argument>,
    <argument><expr><call><name>REALVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call>-&gt;<call><name>xDelete</name><argument_list>(<argument><expr><call><name>REALVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>dirSync</name></expr></argument>)</argument_list></call></expr></argument> 
  )</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
** Test for access permissions. Return true if the requested permission
** is available, or false otherwise.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>instAccess</name><parameter_list>(
  <param><decl><type><name>sqlite3_vfs</name> *</type><name>pVfs</name></decl></param>, 
  <param><decl><type><name>const</name> <name>char</name> *</type><name>zPath</name></decl></param>, 
  <param><decl><type><name>int</name></type> <name>flags</name></decl></param>, 
  <param><decl><type><name>int</name> *</type><name>pResOut</name></decl></param>
)</parameter_list><block>{
  <expr_stmt><expr><call><name>binarylog_blob</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>, <argument><expr><name>zPath</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>OS_TIME_VFS</name><argument_list>(<argument><expr><name>OS_ACCESS</name></expr></argument>, <argument><expr><name>zPath</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr>*<name>pResOut</name></expr></argument>, 
    <argument><expr><call><name>REALVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call>-&gt;<call><name>xAccess</name><argument_list>(<argument><expr><call><name>REALVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>pResOut</name></expr></argument>)</argument_list></call></expr></argument> 
  )</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
** Populate buffer zOut with the full canonical pathname corresponding
** to the pathname in zPath. zOut is guaranteed to point to a buffer
** of at least (INST_MAX_PATHNAME+1) bytes.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>instFullPathname</name><parameter_list>(
  <param><decl><type><name>sqlite3_vfs</name> *</type><name>pVfs</name></decl></param>, 
  <param><decl><type><name>const</name> <name>char</name> *</type><name>zPath</name></decl></param>, 
  <param><decl><type><name>int</name></type> <name>nOut</name></decl></param>, 
  <param><decl><type><name>char</name> *</type><name>zOut</name></decl></param>
)</parameter_list><block>{
  <macro><name>OS_TIME_VFS</name><argument_list>( <argument>OS_FULLPATHNAME</argument>, <argument>zPath</argument>, <argument>0</argument>, <argument>0</argument>, <argument>0</argument>,
    <argument>REALVFS(pVfs)-&gt;xFullPathname(REALVFS(pVfs), zPath, nOut, zOut);</argument>
  )</argument_list></macro><empty_stmt>;</empty_stmt>
}</block></function>

<comment type="block">/*
** Open the dynamic library located at zPath and return a handle.
*/</comment>
<function><type><name>static</name> <name>void</name> *</type><name>instDlOpen</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name> *</type><name>pVfs</name></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>zPath</name></decl></param>)</parameter_list><block>{
  <return>return <expr><call><name>REALVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call>-&gt;<call><name>xDlOpen</name><argument_list>(<argument><expr><call><name>REALVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/*
** Populate the buffer zErrMsg (size nByte bytes) with a human readable
** utf-8 string describing the most recent error encountered associated 
** with dynamic libraries.
*/</comment>
<function><type><name>static</name> <name>void</name></type> <name>instDlError</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name> *</type><name>pVfs</name></decl></param>, <param><decl><type><name>int</name></type> <name>nByte</name></decl></param>, <param><decl><type><name>char</name> *</type><name>zErrMsg</name></decl></param>)</parameter_list><block>{
  <expr_stmt><expr><call><name>REALVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call>-&gt;<call><name>xDlError</name><argument_list>(<argument><expr><call><name>REALVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nByte</name></expr></argument>, <argument><expr><name>zErrMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
** Return a pointer to the symbol zSymbol in the dynamic library pHandle.
*/</comment>
<decl_stmt><decl><type><name>static</name></type> <name>void</name> <argument_list>(<argument><expr>*<call><name>instDlSym</name><argument_list>(<argument><expr><name>sqlite3_vfs</name> *<name>pVfs</name></expr></argument>, <argument><expr><name>void</name> *<name>p</name></expr></argument>, <argument><expr><name>const</name> <name>char</name> *<name>zSym</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list><block>{
  <return>return <expr><call><name>REALVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call>-&gt;<call><name>xDlSym</name><argument_list>(<argument><expr><call><name>REALVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>zSym</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></decl></decl_stmt>

<comment type="block">/*
** Close the dynamic library handle pHandle.
*/</comment>
<function><type><name>static</name> <name>void</name></type> <name>instDlClose</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name> *</type><name>pVfs</name></decl></param>, <param><decl><type><name>void</name> *</type><name>pHandle</name></decl></param>)</parameter_list><block>{
  <expr_stmt><expr><call><name>REALVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call>-&gt;<call><name>xDlClose</name><argument_list>(<argument><expr><call><name>REALVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
** Populate the buffer pointed to by zBufOut with nByte bytes of 
** random data.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>instRandomness</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name> *</type><name>pVfs</name></decl></param>, <param><decl><type><name>int</name></type> <name>nByte</name></decl></param>, <param><decl><type><name>char</name> *</type><name>zBufOut</name></decl></param>)</parameter_list><block>{
  <macro><name>OS_TIME_VFS</name><argument_list>( <argument>OS_RANDOMNESS</argument>, <argument>0</argument>, <argument>0</argument>, <argument>nByte</argument>, <argument>0</argument>,
    <argument>REALVFS(pVfs)-&gt;xRandomness(REALVFS(pVfs), nByte, zBufOut);</argument>
  )</argument_list></macro><empty_stmt>;</empty_stmt>
}</block></function>

<comment type="block">/*
** Sleep for nMicro microseconds. Return the number of microseconds 
** actually slept.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>instSleep</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name> *</type><name>pVfs</name></decl></param>, <param><decl><type><name>int</name></type> <name>nMicro</name></decl></param>)</parameter_list><block>{
  <expr_stmt><expr><call><name>OS_TIME_VFS</name><argument_list>( <argument><expr><name>OS_SLEEP</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>nMicro</name></expr></argument>, <argument><expr>0</expr></argument>, 
    <argument><expr><call><name>REALVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call>-&gt;<call><name>xSleep</name><argument_list>(<argument><expr><call><name>REALVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nMicro</name></expr></argument>)</argument_list></call></expr></argument> 
  )</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
** Return the current time as a Julian Day number in *pTimeOut.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>instCurrentTime</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name> *</type><name>pVfs</name></decl></param>, <param><decl><type><name>double</name> *</type><name>pTimeOut</name></decl></param>)</parameter_list><block>{
  <expr_stmt><expr><call><name>OS_TIME_VFS</name><argument_list>( <argument><expr><name>OS_CURRENTTIME</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
    <argument><expr><call><name>REALVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call>-&gt;<call><name>xCurrentTime</name><argument_list>(<argument><expr><call><name>REALVFS</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>pTimeOut</name></expr></argument>)</argument_list></call></expr></argument> 
  )</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>sqlite3_vfs</name> *</type><name>sqlite3_instvfs_create</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type><name>zName</name></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>zParent</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>InstVfs</name> *</type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> *</type><name>pParent</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>pParent</name> = <call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr><name>zParent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr>!<name>pParent</name></expr> )</condition><then><block>{
    <return>return <expr>0</expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><name>nByte</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>zName</name></expr></argument>)</argument_list></call> + 1 + <call><name>sizeof</name><argument_list>(<argument><expr><name>InstVfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name> = (<name>InstVfs</name> *)<call><name>sqlite3_malloc</name><argument_list>(<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>p</name></expr> )</condition><then><block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>zCopy</name> =<init> <expr>(<name>char</name> *)&amp;<name><name>p</name><index>[<expr>1</expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>&amp;<name>inst_vfs</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>sqlite3_vfs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name>-&gt;<name>pVfs</name> = <name>pParent</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>zCopy</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><call><name>strlen</name><argument_list>(<argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name>-&gt;<name>base</name>.<name>zName</name> = (<name>const</name> <name>char</name> *)<name>zCopy</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name>-&gt;<name>base</name>.<name>szOsFile</name> += <name>pParent</name>-&gt;<name>szOsFile</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_vfs_register</name><argument_list>(<argument><expr>(<name>sqlite3_vfs</name> *)<name>p</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr>(<name>sqlite3_vfs</name> *)<name>p</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>sqlite3_instvfs_configure</name><parameter_list>(
  <param><decl><type><name>sqlite3_vfs</name> *</type><name>pVfs</name></decl></param>,
  <param><function_decl><type><name>void</name></type> (*<name>xCall</name>)<parameter_list>(
      <param><decl><type><name>void</name>*</type></decl></param>, 
      <param><decl><type><name>int</name></type></decl></param>,                           <comment type="block">/* File id */</comment>
      <param><decl><type><name>int</name></type></decl></param>,                           <comment type="block">/* Event code */</comment>
      <param><decl><type><name>sqlite3_int64</name></type></decl></param>, 
      <param><decl><type><name>int</name></type></decl></param>,                           <comment type="block">/* Return code */</comment>
      <param><decl><type><name>const</name> <name>char</name>*</type></decl></param>,                   <comment type="block">/* File name */</comment>
      <param><decl><type><name>int</name></type></decl></param>, 
      <param><decl><type><name>int</name></type></decl></param>, 
      <param><decl><type><name>sqlite3_int64</name></type></decl></param>
  )</parameter_list>,
  <param><decl><type><name>void</name> *</type><name>pClient</name></decl></param>,
  <param><function_decl><type><name>void</name></type> (*<name>xDel</name>)<parameter_list>(<param><decl><type><name>void</name> *</type></decl></param>)</parameter_list></function_decl></param></function_decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>InstVfs</name> *</type><name>p</name> =<init> <expr>(<name>InstVfs</name> *)<name>pVfs</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pVfs</name>-&gt;<name>xOpen</name>==<name>instOpen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>p</name>-&gt;<name>xDel</name></expr> )</condition><then><block>{
    <expr_stmt><expr><name>p</name>-&gt;<call><name>xDel</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>pClient</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <expr_stmt><expr><name>p</name>-&gt;<name>xCall</name> = <name>xCall</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name>-&gt;<name>xDel</name> = <name>xDel</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name>-&gt;<name>pClient</name> = <name>pClient</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>sqlite3_instvfs_destroy</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name> *</type><name>pVfs</name></decl></param>)</parameter_list><block>{
  <if>if<condition>( <expr><name>pVfs</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>sqlite3_vfs_unregister</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_instvfs_configure</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<function><type><name>void</name></type> <name>sqlite3_instvfs_reset</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name> *</type><name>pVfs</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>InstVfs</name> *</type><name>p</name> =<init> <expr>(<name>InstVfs</name> *)<name>pVfs</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pVfs</name>-&gt;<name>xOpen</name>==<name>instOpen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>aTime</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>sqlite3_int64</name></expr></argument>)</argument_list></call>*<name>OS_NUMEVENTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>aCount</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>int</name></expr></argument>)</argument_list></call>*<name>OS_NUMEVENTS</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>const</name> <name>char</name> *</type><name>sqlite3_instvfs_name</name><parameter_list>(<param><decl><type><name>int</name></type> <name>eEvent</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>zEvent</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

  <switch>switch<condition>( <expr><name>eEvent</name></expr> )</condition><block>{
    <case>case <expr><name>OS_CLOSE</name></expr>:             <expr_stmt><expr><name>zEvent</name> = "xClose"</expr>;</expr_stmt> <break>break;</break>
    </case><case>case <expr><name>OS_READ</name></expr>:              <expr_stmt><expr><name>zEvent</name> = "xRead"</expr>;</expr_stmt> <break>break;</break>
    </case><case>case <expr><name>OS_WRITE</name></expr>:             <expr_stmt><expr><name>zEvent</name> = "xWrite"</expr>;</expr_stmt> <break>break;</break>
    </case><case>case <expr><name>OS_TRUNCATE</name></expr>:          <expr_stmt><expr><name>zEvent</name> = "xTruncate"</expr>;</expr_stmt> <break>break;</break>
    </case><case>case <expr><name>OS_SYNC</name></expr>:              <expr_stmt><expr><name>zEvent</name> = "xSync"</expr>;</expr_stmt> <break>break;</break>
    </case><case>case <expr><name>OS_FILESIZE</name></expr>:          <expr_stmt><expr><name>zEvent</name> = "xFilesize"</expr>;</expr_stmt> <break>break;</break>
    </case><case>case <expr><name>OS_LOCK</name></expr>:              <expr_stmt><expr><name>zEvent</name> = "xLock"</expr>;</expr_stmt> <break>break;</break>
    </case><case>case <expr><name>OS_UNLOCK</name></expr>:            <expr_stmt><expr><name>zEvent</name> = "xUnlock"</expr>;</expr_stmt> <break>break;</break>
    </case><case>case <expr><name>OS_CHECKRESERVEDLOCK</name></expr>: <expr_stmt><expr><name>zEvent</name> = "xCheckReservedLock"</expr>;</expr_stmt> <break>break;</break>
    </case><case>case <expr><name>OS_FILECONTROL</name></expr>:       <expr_stmt><expr><name>zEvent</name> = "xFileControl"</expr>;</expr_stmt> <break>break;</break>
    </case><case>case <expr><name>OS_SECTORSIZE</name></expr>:        <expr_stmt><expr><name>zEvent</name> = "xSectorSize"</expr>;</expr_stmt> <break>break;</break>
    </case><case>case <expr><name>OS_DEVCHAR</name></expr>:           <expr_stmt><expr><name>zEvent</name> = "xDeviceCharacteristics"</expr>;</expr_stmt> <break>break;</break>
    </case><case>case <expr><name>OS_OPEN</name></expr>:              <expr_stmt><expr><name>zEvent</name> = "xOpen"</expr>;</expr_stmt> <break>break;</break>
    </case><case>case <expr><name>OS_DELETE</name></expr>:            <expr_stmt><expr><name>zEvent</name> = "xDelete"</expr>;</expr_stmt> <break>break;</break>
    </case><case>case <expr><name>OS_ACCESS</name></expr>:            <expr_stmt><expr><name>zEvent</name> = "xAccess"</expr>;</expr_stmt> <break>break;</break>
    </case><case>case <expr><name>OS_FULLPATHNAME</name></expr>:      <expr_stmt><expr><name>zEvent</name> = "xFullPathname"</expr>;</expr_stmt> <break>break;</break>
    </case><case>case <expr><name>OS_RANDOMNESS</name></expr>:        <expr_stmt><expr><name>zEvent</name> = "xRandomness"</expr>;</expr_stmt> <break>break;</break>
    </case><case>case <expr><name>OS_SLEEP</name></expr>:             <expr_stmt><expr><name>zEvent</name> = "xSleep"</expr>;</expr_stmt> <break>break;</break>
    </case><case>case <expr><name>OS_CURRENTTIME</name></expr>:       <expr_stmt><expr><name>zEvent</name> = "xCurrentTime"</expr>;</expr_stmt> <break>break;</break>
  </case>}</block></switch>

  <return>return <expr><name>zEvent</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>sqlite3_instvfs_get</name><parameter_list>(
  <param><decl><type><name>sqlite3_vfs</name> *</type><name>pVfs</name></decl></param>, 
  <param><decl><type><name>int</name></type> <name>eEvent</name></decl></param>, 
  <param><decl><type><name>const</name> <name>char</name> **</type><name>pzEvent</name></decl></param>, 
  <param><decl><type><name>sqlite3_int64</name> *</type><name>pnClick</name></decl></param>, 
  <param><decl><type><name>int</name> *</type><name>pnCall</name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>InstVfs</name> *</type><name>p</name> =<init> <expr>(<name>InstVfs</name> *)<name>pVfs</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pVfs</name>-&gt;<name>xOpen</name>==<name>instOpen</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>eEvent</name>&lt;1 || <name>eEvent</name>&gt;=<name>OS_NUMEVENTS</name></expr> )</condition><then><block>{
    <expr_stmt><expr>*<name>pzEvent</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr>*<name>pnClick</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr>*<name>pnCall</name> = 0</expr>;</expr_stmt>
    <return>return;</return>
  }</block></then></if>

  <expr_stmt><expr>*<name>pzEvent</name> = <call><name>sqlite3_instvfs_name</name><argument_list>(<argument><expr><name>eEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>pnClick</name> = <name>p</name>-&gt;<name><name>aTime</name><index>[<expr><name>eEvent</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>pnCall</name> = <name>p</name>-&gt;<name><name>aCount</name><index>[<expr><name>eEvent</name></expr>]</index></name></expr>;</expr_stmt>
}</block></function>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>BINARYLOG_BUFFERSIZE</name> 8192</cpp:define>

<struct>struct <name>InstVfsBinaryLog</name> <block>{<public type="default">
  <decl_stmt><decl><type><name>int</name></type> <name>nBuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>zBuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>iOffset</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>log_data</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_file</name> *</type><name>pOut</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>zOut</name></decl>;</decl_stmt>                       <comment type="block">/* Log file name */</comment>
</public>}</block>;</struct>
<typedef>typedef <type><struct>struct <name>InstVfsBinaryLog</name> InstVfsBinaryLog;</struct></type></typedef>

<function><type><name>static</name> <name>void</name></type> <name>put32bits</name><parameter_list>(<param><decl><type><name>unsigned</name> <name>char</name> *</type><name>p</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name></type> <name>v</name></decl></param>)</parameter_list><block>{
  <expr_stmt><expr><name><name>p</name><index>[<expr>0</expr>]</index></name> = <name>v</name>&gt;&gt;24</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><index>[<expr>1</expr>]</index></name> = <name>v</name>&gt;&gt;16</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><index>[<expr>2</expr>]</index></name> = <name>v</name>&gt;&gt;8</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>p</name><index>[<expr>3</expr>]</index></name> = <name>v</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type> <name>binarylog_flush</name><parameter_list>(<param><decl><type><name>InstVfsBinaryLog</name> *</type><name>pLog</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3_file</name> *</type><name>pFile</name> =<init> <expr><name>pLog</name>-&gt;<name>pOut</name></expr></init></decl>;</decl_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_TEST</name></cpp:ifdef>
  <decl_stmt><decl><type><name>extern</name> <name>int</name></type> <name>sqlite3_io_error_pending</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>extern</name> <name>int</name></type> <name>sqlite3_io_error_persist</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>extern</name> <name>int</name></type> <name>sqlite3_diskfull_pending</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>pending</name> =<init> <expr><name>sqlite3_io_error_pending</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>persist</name> =<init> <expr><name>sqlite3_io_error_persist</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>diskfull</name> =<init> <expr><name>sqlite3_diskfull_pending</name></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>sqlite3_io_error_pending</name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><name>sqlite3_io_error_persist</name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><name>sqlite3_diskfull_pending</name> = 0</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <expr_stmt><expr><name>pFile</name>-&gt;<name>pMethods</name>-&gt;<call><name>xWrite</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>pLog</name>-&gt;<name>zBuf</name></expr></argument>, <argument><expr><name>pLog</name>-&gt;<name>nBuf</name></expr></argument>, <argument><expr><name>pLog</name>-&gt;<name>iOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pLog</name>-&gt;<name>iOffset</name> += <name>pLog</name>-&gt;<name>nBuf</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>pLog</name>-&gt;<name>nBuf</name> = 0</expr>;</expr_stmt>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_TEST</name></cpp:ifdef>
  <expr_stmt><expr><name>sqlite3_io_error_pending</name> = <name>pending</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>sqlite3_io_error_persist</name> = <name>persist</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>sqlite3_diskfull_pending</name> = <name>diskfull</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>

<function><type><name>static</name> <name>void</name></type> <name>binarylog_xcall</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>p</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>eEvent</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>iFileId</name></decl></param>,
  <param><decl><type><name>sqlite3_int64</name></type> <name>nClick</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>return_code</name></decl></param>,
  <param><decl><type><name>const</name> <name>char</name> *</type><name>zName</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>flags</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>nByte</name></decl></param>,
  <param><decl><type><name>sqlite3_int64</name></type> <name>iOffset</name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>InstVfsBinaryLog</name> *</type><name>pLog</name> =<init> <expr>(<name>InstVfsBinaryLog</name> *)<name>p</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>zRec</name></decl>;</decl_stmt>
  <if>if<condition>( <expr>(28+<name>pLog</name>-&gt;<name>nBuf</name>)&gt;<name>BINARYLOG_BUFFERSIZE</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>binarylog_flush</name><argument_list>(<argument><expr><name>pLog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <expr_stmt><expr><name>zRec</name> = (<name>unsigned</name> <name>char</name> *)&amp;<name>pLog</name>-&gt;<name><name>zBuf</name><index>[<expr><name>pLog</name>-&gt;<name>nBuf</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>put32bits</name><argument_list>(<argument><expr>&amp;<name><name>zRec</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>eEvent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>put32bits</name><argument_list>(<argument><expr>&amp;<name><name>zRec</name><index>[<expr>4</expr>]</index></name></expr></argument>, <argument><expr>(<name>int</name>)<name>iFileId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>put32bits</name><argument_list>(<argument><expr>&amp;<name><name>zRec</name><index>[<expr>8</expr>]</index></name></expr></argument>, <argument><expr>(<name>int</name>)<name>nClick</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>put32bits</name><argument_list>(<argument><expr>&amp;<name><name>zRec</name><index>[<expr>12</expr>]</index></name></expr></argument>, <argument><expr><name>return_code</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>put32bits</name><argument_list>(<argument><expr>&amp;<name><name>zRec</name><index>[<expr>16</expr>]</index></name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>put32bits</name><argument_list>(<argument><expr>&amp;<name><name>zRec</name><index>[<expr>20</expr>]</index></name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>put32bits</name><argument_list>(<argument><expr>&amp;<name><name>zRec</name><index>[<expr>24</expr>]</index></name></expr></argument>, <argument><expr>(<name>int</name>)<name>iOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pLog</name>-&gt;<name>nBuf</name> += 28</expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type> <name>binarylog_xdel</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>p</name></decl></param>)</parameter_list><block>{
  <comment type="block">/* Close the log file and free the memory allocated for the 
  ** InstVfsBinaryLog structure.
  */</comment>
  <decl_stmt><decl><type><name>InstVfsBinaryLog</name> *</type><name>pLog</name> =<init> <expr>(<name>InstVfsBinaryLog</name> *)<name>p</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_file</name> *</type><name>pFile</name> =<init> <expr><name>pLog</name>-&gt;<name>pOut</name></expr></init></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>pLog</name>-&gt;<name>nBuf</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>binarylog_flush</name><argument_list>(<argument><expr><name>pLog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <expr_stmt><expr><name>pFile</name>-&gt;<name>pMethods</name>-&gt;<call><name>xClose</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pLog</name>-&gt;<name>pOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pLog</name>-&gt;<name>zBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pLog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type> <name>binarylog_blob</name><parameter_list>(
  <param><decl><type><name>sqlite3_vfs</name> *</type><name>pVfs</name></decl></param>,
  <param><decl><type><name>const</name> <name>char</name> *</type><name>zBlob</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>nBlob</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>isBinary</name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>InstVfsBinaryLog</name> *</type><name>pLog</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>InstVfs</name> *</type><name>pInstVfs</name> =<init> <expr>(<name>InstVfs</name> *)<name>pVfs</name></expr></init></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>pVfs</name>-&gt;<name>xOpen</name>!=<name>instOpen</name> || <name>pInstVfs</name>-&gt;<name>xCall</name>!=<name>binarylog_xcall</name></expr> )</condition><then><block>{
    <return>return;</return>
  }</block></then></if>
  <expr_stmt><expr><name>pLog</name> = (<name>InstVfsBinaryLog</name> *)<name>pInstVfs</name>-&gt;<name>pClient</name></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>zBlob</name> &amp;&amp; (!<name>isBinary</name> || <name>pLog</name>-&gt;<name>log_data</name>)</expr> )</condition><then><block>{
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>zRec</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nWrite</name></decl>;</decl_stmt>

    <if>if<condition>( <expr><name>nBlob</name>&lt;0</expr> )</condition><then><block>{
      <expr_stmt><expr><name>nBlob</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>zBlob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>nWrite</name> = <name>nBlob</name> + 28</expr>;</expr_stmt>
  
    <if>if<condition>( <expr>(<name>nWrite</name>+<name>pLog</name>-&gt;<name>nBuf</name>)&gt;<name>BINARYLOG_BUFFERSIZE</name></expr> )</condition><then><block>{
      <expr_stmt><expr><call><name>binarylog_flush</name><argument_list>(<argument><expr><name>pLog</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  
    <expr_stmt><expr><name>zRec</name> = (<name>unsigned</name> <name>char</name> *)&amp;<name>pLog</name>-&gt;<name><name>zBuf</name><index>[<expr><name>pLog</name>-&gt;<name>nBuf</name></expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>zRec</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>nWrite</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>put32bits</name><argument_list>(<argument><expr>&amp;<name><name>zRec</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name>BINARYLOG_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>put32bits</name><argument_list>(<argument><expr>&amp;<name><name>zRec</name><index>[<expr>4</expr>]</index></name></expr></argument>, <argument><expr>(<name>int</name>)<name>nBlob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>put32bits</name><argument_list>(<argument><expr>&amp;<name><name>zRec</name><index>[<expr>8</expr>]</index></name></expr></argument>, <argument><expr>(<name>int</name>)<name>isBinary</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>&amp;<name><name>zRec</name><index>[<expr>28</expr>]</index></name></expr></argument>, <argument><expr><name>zBlob</name></expr></argument>, <argument><expr><name>nBlob</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pLog</name>-&gt;<name>nBuf</name> += <name>nWrite</name></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<function><type><name>void</name></type> <name>sqlite3_instvfs_binarylog_call</name><parameter_list>(
  <param><decl><type><name>sqlite3_vfs</name> *</type><name>pVfs</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>eEvent</name></decl></param>,
  <param><decl><type><name>sqlite3_int64</name></type> <name>nClick</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>return_code</name></decl></param>,
  <param><decl><type><name>const</name> <name>char</name> *</type><name>zString</name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>InstVfs</name> *</type><name>pInstVfs</name> =<init> <expr>(<name>InstVfs</name> *)<name>pVfs</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>InstVfsBinaryLog</name> *</type><name>pLog</name> =<init> <expr>(<name>InstVfsBinaryLog</name> *)<name>pInstVfs</name>-&gt;<name>pClient</name></expr></init></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>zString</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>binarylog_blob</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>, <argument><expr><name>zString</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <expr_stmt><expr><call><name>binarylog_xcall</name><argument_list>(<argument><expr><name>pLog</name></expr></argument>, <argument><expr><name>eEvent</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>nClick</name></expr></argument>, <argument><expr><name>return_code</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>sqlite3_instvfs_binarylog_marker</name><parameter_list>(
  <param><decl><type><name>sqlite3_vfs</name> *</type><name>pVfs</name></decl></param>,
  <param><decl><type><name>const</name> <name>char</name> *</type><name>zMarker</name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>InstVfs</name> *</type><name>pInstVfs</name> =<init> <expr>(<name>InstVfs</name> *)<name>pVfs</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>InstVfsBinaryLog</name> *</type><name>pLog</name> =<init> <expr>(<name>InstVfsBinaryLog</name> *)<name>pInstVfs</name>-&gt;<name>pClient</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>binarylog_blob</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>, <argument><expr><name>zMarker</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>binarylog_xcall</name><argument_list>(<argument><expr><name>pLog</name></expr></argument>, <argument><expr><name>BINARYLOG_MARKER</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>sqlite3_vfs</name> *</type><name>sqlite3_instvfs_binarylog</name><parameter_list>(
  <param><decl><type><name>const</name> <name>char</name> *</type><name>zVfs</name></decl></param>,
  <param><decl><type><name>const</name> <name>char</name> *</type><name>zParentVfs</name></decl></param>, 
  <param><decl><type><name>const</name> <name>char</name> *</type><name>zLog</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>log_data</name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>InstVfsBinaryLog</name> *</type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> *</type><name>pVfs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> *</type><name>pParent</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>pParent</name> = <call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr><name>zParentVfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr>!<name>pParent</name></expr> )</condition><then><block>{
    <return>return <expr>0</expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><name>nByte</name> = <call><name>sizeof</name><argument_list>(<argument><expr><name>InstVfsBinaryLog</name></expr></argument>)</argument_list></call> + <name>pParent</name>-&gt;<name>mxPathname</name>+1</expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name> = (<name>InstVfsBinaryLog</name> *)<call><name>sqlite3_malloc</name><argument_list>(<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name>-&gt;<name>zBuf</name> = <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><name>BINARYLOG_BUFFERSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name>-&gt;<name>zOut</name> = (<name>char</name> *)&amp;<name><name>p</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name>-&gt;<name>pOut</name> = (<name>sqlite3_file</name> *)<call><name>sqlite3_malloc</name><argument_list>(<argument><expr><name>pParent</name>-&gt;<name>szOsFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name>-&gt;<name>log_data</name> = <name>log_data</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>pParent</name>-&gt;<call><name>xFullPathname</name><argument_list>(<argument><expr><name>pParent</name></expr></argument>, <argument><expr><name>zLog</name></expr></argument>, <argument><expr><name>pParent</name>-&gt;<name>mxPathname</name></expr></argument>, <argument><expr><name>p</name>-&gt;<name>zOut</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>flags</name> = <name>SQLITE_OPEN_READWRITE</name>|<name>SQLITE_OPEN_CREATE</name>|<name>SQLITE_OPEN_MASTER_JOURNAL</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>pParent</name>-&gt;<call><name>xDelete</name><argument_list>(<argument><expr><name>pParent</name></expr></argument>, <argument><expr><name>p</name>-&gt;<name>zOut</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> = <name>pParent</name>-&gt;<call><name>xOpen</name><argument_list>(<argument><expr><name>pParent</name></expr></argument>, <argument><expr><name>p</name>-&gt;<name>zOut</name></expr></argument>, <argument><expr><name>p</name>-&gt;<name>pOut</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr>&amp;<name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>rc</name>==<name>SQLITE_OK</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>zBuf</name></expr></argument>, <argument><expr>"sqlite_ostrace1....."</expr></argument>, <argument><expr>20</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name>-&gt;<name>iOffset</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name>-&gt;<name>nBuf</name> = 20</expr>;</expr_stmt>
  }</block></then></if>
  <if>if<condition>( <expr><name>rc</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>binarylog_xdel</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>0</expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><name>pVfs</name> = <call><name>sqlite3_instvfs_create</name><argument_list>(<argument><expr><name>zVfs</name></expr></argument>, <argument><expr><name>zParentVfs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>pVfs</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>sqlite3_instvfs_configure</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>, <argument><expr><name>binarylog_xcall</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>binarylog_xdel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>pVfs</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_ENABLE_INSTVFS */</comment>

<comment type="block">/**************************************************************************
***************************************************************************
** Tcl interface starts here.
*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_TEST</name></expr></cpp:if>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tcl.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_INSTVFS</name></cpp:ifdef>
<struct>struct <name>InstVfsCall</name> <block>{<public type="default">
  <decl_stmt><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Tcl_Obj</name> *</type><name>pScript</name></decl>;</decl_stmt>
</public>}</block>;</struct>
<typedef>typedef <type><struct>struct <name>InstVfsCall</name> InstVfsCall;</struct></type></typedef>

<function><type><name>static</name> <name>void</name></type> <name>test_instvfs_xcall</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>p</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>eEvent</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>iFileId</name></decl></param>,
  <param><decl><type><name>sqlite3_int64</name></type> <name>nClick</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>return_code</name></decl></param>,
  <param><decl><type><name>const</name> <name>char</name> *</type><name>zName</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>flags</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>nByte</name></decl></param>,
  <param><decl><type><name>sqlite3_int64</name></type> <name>iOffset</name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>InstVfsCall</name> *</type><name>pCall</name> =<init> <expr>(<name>InstVfsCall</name> *)<name>p</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Tcl_Obj</name> *</type><name>pObj</name> =<init> <expr><call><name>Tcl_DuplicateObj</name><argument_list>( <argument><expr><name>pCall</name>-&gt;<name>pScript</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>zEvent</name> =<init> <expr><call><name>sqlite3_instvfs_name</name><argument_list>(<argument><expr><name>eEvent</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>Tcl_IncrRefCount</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>pObj</name></expr></argument>, <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name>zEvent</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>pObj</name></expr></argument>, <argument><expr><call><name>Tcl_NewWideIntObj</name><argument_list>(<argument><expr><name>nClick</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>pObj</name></expr></argument>, <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name>zName</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>pObj</name></expr></argument>, <argument><expr><call><name>Tcl_NewIntObj</name><argument_list>(<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>pObj</name></expr></argument>, <argument><expr><call><name>Tcl_NewWideIntObj</name><argument_list>(<argument><expr><name>iOffset</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> = <call><name>Tcl_EvalObjEx</name><argument_list>(<argument><expr><name>pCall</name>-&gt;<name>interp</name></expr></argument>, <argument><expr><name>pObj</name></expr></argument>, <argument><expr><name>TCL_EVAL_GLOBAL</name>|<name>TCL_EVAL_DIRECT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>rc</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_BackgroundError</name><argument_list>(<argument><expr><name>pCall</name>-&gt;<name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <expr_stmt><expr><call><name>Tcl_DecrRefCount</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>void</name></type> <name>test_instvfs_xdel</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>p</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>InstVfsCall</name> *</type><name>pCall</name> =<init> <expr>(<name>InstVfsCall</name> *)<name>p</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>Tcl_DecrRefCount</name><argument_list>(<argument><expr><name>pCall</name>-&gt;<name>pScript</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pCall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>static</name> <name>int</name></type> <name>test_sqlite3_instvfs</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>static</name> <name>const</name> <name>char</name> *</type><name><name>IV_strs</name><index>[]</index></name> =<init> 
               <expr><block>{ <expr>"create"</expr>,  <expr>"destroy"</expr>,  <expr>"reset"</expr>,  <expr>"report"</expr>, <expr>"configure"</expr>, <expr>"binarylog"</expr>, <expr>"marker"</expr>, <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>
  <enum>enum <name>IV_enum</name> <block>{ <expr><name>IV_CREATE</name></expr>, <expr><name>IV_DESTROY</name></expr>, <expr><name>IV_RESET</name></expr>, <expr><name>IV_REPORT</name></expr>, <expr><name>IV_CONFIGURE</name></expr>, <expr><name>IV_BINARYLOG</name></expr>, <expr><name>IV_MARKER</name></expr> }</block>;</enum>
  <decl_stmt><decl><type><name>int</name></type> <name>iSub</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>&lt;2</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr>"SUB-COMMAND ..."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>Tcl_GetIndexFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>IV_strs</name></expr></argument>, <argument><expr>"sub-command"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>iSub</name></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>

  <switch>switch<condition>( <expr>(enum <name>IV_enum</name>)<name>iSub</name></expr> )</condition><block>{
    <case>case <expr><name>IV_CREATE</name></expr>: <block>{
      <decl_stmt><decl><type><name>char</name> *</type><name>zParent</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>sqlite3_vfs</name> *</type><name>p</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>isDefault</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
      <if>if<condition>( <expr><name>objc</name>&gt;2 &amp;&amp; 0==<call><name>strcmp</name><argument_list>(<argument><expr>"-default"</expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
        <expr_stmt><expr><name>isDefault</name> = 1</expr>;</expr_stmt>
      }</block></then></if>
      <if>if<condition>( <expr>(<name>objc</name>-<name>isDefault</name>)!=4 &amp;&amp; (<name>objc</name>-<name>isDefault</name>)!=3</expr> )</condition><then><block>{
        <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr>"?-default? NAME ?PARENT-VFS?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TCL_ERROR</name></expr>;</return>
      }</block></then></if>
      <if>if<condition>( <expr><name>objc</name>==(4+<name>isDefault</name>)</expr> )</condition><then><block>{
        <expr_stmt><expr><name>zParent</name> = <call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>3+<name>isDefault</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <expr_stmt><expr><name>p</name> = <call><name>sqlite3_instvfs_create</name><argument_list>(<argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>2+<name>isDefault</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zParent</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if<condition>( <expr>!<name>p</name></expr> )</condition><then><block>{
        <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"error creating vfs "</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TCL_ERROR</name></expr>;</return>
      }</block></then></if>
      <if>if<condition>( <expr><name>isDefault</name></expr> )</condition><then><block>{
        <expr_stmt><expr><call><name>sqlite3_vfs_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    }</block>
    </case><case>case <expr><name>IV_BINARYLOG</name></expr>: <block>{
      <decl_stmt><decl><type><name>char</name> *</type><name>zName</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> *</type><name>zLog</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> *</type><name>zParent</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>sqlite3_vfs</name> *</type><name>p</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>isDefault</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>isLogdata</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>argbase</name> =<init> <expr>2</expr></init></decl>;</decl_stmt>

      <for>for(<init><expr><name>argbase</name>=2</expr>;</init> <condition><expr><name>argbase</name>&lt;(<name>objc</name>-2)</expr>;</condition> <incr><expr><name>argbase</name>++</expr></incr>)<block>{
        <if>if<condition>( <expr>0==<call><name>strcmp</name><argument_list>(<argument><expr>"-default"</expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><name>argbase</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
          <expr_stmt><expr><name>isDefault</name> = 1</expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if<condition>( <expr>0==<call><name>strcmp</name><argument_list>(<argument><expr>"-parent"</expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><name>argbase</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
          <expr_stmt><expr><name>argbase</name>++</expr>;</expr_stmt>
          <expr_stmt><expr><name>zParent</name> = <call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><name>argbase</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then>
        <else>else <if>if<condition>( <expr>0==<call><name>strcmp</name><argument_list>(<argument><expr>"-logdata"</expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><name>argbase</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
          <expr_stmt><expr><name>isLogdata</name> = 1</expr>;</expr_stmt>
        }</block></then><else>else<block>{
          <break>break;</break>
        }</block></else></if></else></if></else></if>
      }</block></for>

      <if>if<condition>( <expr>(<name>objc</name>-<name>argbase</name>)!=2</expr> )</condition><then><block>{
        <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(
            <argument><expr><name>interp</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr>"?-default? ?-parent VFS? ?-logdata? NAME LOGFILE"</expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TCL_ERROR</name></expr>;</return>
      }</block></then></if>
      <expr_stmt><expr><name>zName</name> = <call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><name>argbase</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>zLog</name> = <call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr><name>argbase</name>+1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name> = <call><name>sqlite3_instvfs_binarylog</name><argument_list>(<argument><expr><name>zName</name></expr></argument>, <argument><expr><name>zParent</name></expr></argument>, <argument><expr><name>zLog</name></expr></argument>, <argument><expr><name>isLogdata</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if<condition>( <expr>!<name>p</name></expr> )</condition><then><block>{
        <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"error creating vfs "</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TCL_ERROR</name></expr>;</return>
      }</block></then></if>
      <if>if<condition>( <expr><name>isDefault</name></expr> )</condition><then><block>{
        <expr_stmt><expr><call><name>sqlite3_vfs_register</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    }</block>

    </case><case>case <expr><name>IV_MARKER</name></expr>: <block>{
      <decl_stmt><decl><type><name>sqlite3_vfs</name> *</type><name>p</name></decl>;</decl_stmt>
      <if>if<condition>( <expr><name>objc</name>!=4</expr> )</condition><then><block>{
        <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr>"VFS MARKER"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TCL_ERROR</name></expr>;</return>
      }</block></then></if>
      <expr_stmt><expr><name>p</name> = <call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if<condition>( <expr>!<name>p</name> || <name>p</name>-&gt;<name>xOpen</name>!=<name>instOpen</name></expr> )</condition><then><block>{
        <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"no such vfs: "</expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TCL_ERROR</name></expr>;</return>
      }</block></then></if>
      <expr_stmt><expr><call><name>sqlite3_instvfs_binarylog_marker</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>3</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>Tcl_ResetResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    }</block>

    </case><case>case <expr><name>IV_CONFIGURE</name></expr>: <block>{
      <decl_stmt><decl><type><name>InstVfsCall</name> *</type><name>pCall</name></decl>;</decl_stmt>

      <decl_stmt><decl><type><name>sqlite3_vfs</name> *</type><name>p</name></decl>;</decl_stmt>
      <if>if<condition>( <expr><name>objc</name>!=4</expr> )</condition><then><block>{
        <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr>"NAME SCRIPT"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TCL_ERROR</name></expr>;</return>
      }</block></then></if>
      <expr_stmt><expr><name>p</name> = <call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if<condition>( <expr>!<name>p</name> || <name>p</name>-&gt;<name>xOpen</name>!=<name>instOpen</name></expr> )</condition><then><block>{
        <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"no such vfs: "</expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TCL_ERROR</name></expr>;</return>
      }</block></then></if>

      <if>if<condition>( <expr><call><name>strlen</name><argument_list>(<argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>3</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
        <expr_stmt><expr><name>pCall</name> = (<name>InstVfsCall</name> *)<call><name>sqlite3_malloc</name><argument_list>(<argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>InstVfsCall</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pCall</name>-&gt;<name>interp</name> = <name>interp</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>pCall</name>-&gt;<name>pScript</name> = <call><name>Tcl_DuplicateObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>3</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>Tcl_IncrRefCount</name><argument_list>(<argument><expr><name>pCall</name>-&gt;<name>pScript</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3_instvfs_configure</name><argument_list>(<argument><expr><name>p</name></expr></argument>, 
            <argument><expr><name>test_instvfs_xcall</name></expr></argument>, <argument><expr>(<name>void</name> *)<name>pCall</name></expr></argument>, <argument><expr><name>test_instvfs_xdel</name></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
      }</block></then><else>else<block>{
        <expr_stmt><expr><call><name>sqlite3_instvfs_configure</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
      <break>break;</break>
    }</block>

    </case><case>case <expr><name>IV_REPORT</name></expr>:
    </case><case>case <expr><name>IV_DESTROY</name></expr>:
    </case><case>case <expr><name>IV_RESET</name></expr>: <block>{
      <decl_stmt><decl><type><name>sqlite3_vfs</name> *</type><name>p</name></decl>;</decl_stmt>
      <if>if<condition>( <expr><name>objc</name>!=3</expr> )</condition><then><block>{
        <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr>"NAME"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TCL_ERROR</name></expr>;</return>
      }</block></then></if>
      <expr_stmt><expr><name>p</name> = <call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if<condition>( <expr>!<name>p</name> || <name>p</name>-&gt;<name>xOpen</name>!=<name>instOpen</name></expr> )</condition><then><block>{
        <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"no such vfs: "</expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <return>return <expr><name>TCL_ERROR</name></expr>;</return>
      }</block></then></if>

      <if>if<condition>( <expr>((enum <name>IV_enum</name>)<name>iSub</name>)==<name>IV_DESTROY</name></expr> )</condition><then><block>{
        <expr_stmt><expr><call><name>sqlite3_instvfs_destroy</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <if>if<condition>( <expr>((enum <name>IV_enum</name>)<name>iSub</name>)==<name>IV_RESET</name></expr> )</condition><then><block>{
        <expr_stmt><expr><call><name>sqlite3_instvfs_reset</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <if>if<condition>( <expr>((enum <name>IV_enum</name>)<name>iSub</name>)==<name>IV_REPORT</name></expr> )</condition><then><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Tcl_Obj</name> *</type><name>pRet</name> =<init> <expr><call><name>Tcl_NewObj</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>zName</name> =<init> <expr>(<name>char</name> *)1</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>nClick</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>nCall</name></decl>;</decl_stmt>
        <for>for(<init><expr><name>ii</name>=1</expr>;</init> <condition><expr><name>zName</name></expr>;</condition> <incr><expr><name>ii</name>++</expr></incr>)<block>{
          <expr_stmt><expr><call><name>sqlite3_instvfs_get</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>ii</name></expr></argument>, <argument><expr>&amp;<name>zName</name></expr></argument>, <argument><expr>&amp;<name>nClick</name></expr></argument>, <argument><expr>&amp;<name>nCall</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <if>if<condition>( <expr><name>zName</name></expr> )</condition><then><block>{
            <decl_stmt><decl><type><name>Tcl_Obj</name> *</type><name>pElem</name> =<init> <expr><call><name>Tcl_NewObj</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>pElem</name></expr></argument>, <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name>zName</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>pElem</name></expr></argument>, <argument><expr><call><name>Tcl_NewIntObj</name><argument_list>(<argument><expr><name>nCall</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>pElem</name></expr></argument>, <argument><expr><call><name>Tcl_NewWideIntObj</name><argument_list>(<argument><expr><name>nClick</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>pRet</name></expr></argument>, <argument><expr><name>pElem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
        }</block></for>

        <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>pRet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>

      <break>break;</break>
    }</block>
  </case>}</block></switch>

  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_ENABLE_INSTVFS */</comment>

<comment type="block">/* Alternative implementation of sqlite3_instvfs when the real
** implementation is unavailable. 
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_ENABLE_INSTVFS</name></cpp:ifndef>
<function><type><name>static</name> <name>int</name></type> <name>test_sqlite3_instvfs</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
  <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, 
     <argument><expr>"not compiled with -DSQLITE_ENABLE_INSTVFS; sqlite3_instvfs is "
     "unavailable"</expr></argument>, <argument><expr>(<name>char</name>*)0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_ERROR</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !defined(SQLITE_ENABLE_INSTVFS) */</comment>

<function><type><name>int</name></type> <name>SqlitetestOsinst_Init</name><parameter_list>(<param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>)</parameter_list><block>{
  <expr_stmt><expr><call><name>Tcl_CreateObjCommand</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"sqlite3_instvfs"</expr></argument>, <argument><expr><name>test_sqlite3_instvfs</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_TEST */</comment>
</unit>
