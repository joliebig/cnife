<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="journal.c" filename=""><comment type="block">/*
** 2007 August 22
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
**
** @(#) $Id: journal.c,v 1.8 2008/05/01 18:01:47 drh Exp $
*/</comment>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_ATOMIC_WRITE</name></cpp:ifdef>

<comment type="block">/*
** This file implements a special kind of sqlite3_file object used
** by SQLite to create journal files if the atomic-write optimization
** is enabled.
**
** The distinctive characteristic of this sqlite3_file is that the
** actual on disk file is created lazily. When the file is created,
** the caller specifies a buffer size for an in-memory buffer to
** be used to service read() and write() requests. The actual file
** on disk is not created or populated until either:
**
**   1) The in-memory representation grows too large for the allocated 
**      buffer, or
**   2) The xSync() method is called.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>


<comment type="block">/*
** A JournalFile object is a subclass of sqlite3_file used by
** as an open file handle for journal files.
*/</comment>
<struct>struct <name>JournalFile</name> <block>{<public type="default">
  <decl_stmt><decl><type><name>sqlite3_io_methods</name> *</type><name>pMethod</name></decl>;</decl_stmt>    <comment type="block">/* I/O methods on journal files */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nBuf</name></decl>;</decl_stmt>                       <comment type="block">/* Size of zBuf[] in bytes */</comment>
  <decl_stmt><decl><type><name>char</name> *</type><name>zBuf</name></decl>;</decl_stmt>                     <comment type="block">/* Space to buffer journal writes */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iSize</name></decl>;</decl_stmt>                      <comment type="block">/* Amount of zBuf[] currently used */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>flags</name></decl>;</decl_stmt>                      <comment type="block">/* xOpen flags */</comment>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> *</type><name>pVfs</name></decl>;</decl_stmt>              <comment type="block">/* The "real" underlying VFS */</comment>
  <decl_stmt><decl><type><name>sqlite3_file</name> *</type><name>pReal</name></decl>;</decl_stmt>            <comment type="block">/* The "real" underlying file descriptor */</comment>
  <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>zJournal</name></decl>;</decl_stmt>           <comment type="block">/* Name of the journal file */</comment>
</public>}</block>;</struct>
<typedef>typedef <type><struct>struct <name>JournalFile</name> JournalFile;</struct></type></typedef>

<comment type="block">/*
** If it does not already exists, create and populate the on-disk file 
** for JournalFile p.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>createFile</name><parameter_list>(<param><decl><type><name>JournalFile</name> *</type><name>p</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> =<init> <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <if>if<condition>( <expr>!<name>p</name>-&gt;<name>pReal</name></expr> )</condition><then><block>{
    <decl_stmt><decl><type><name>sqlite3_file</name> *</type><name>pReal</name> =<init> <expr>(<name>sqlite3_file</name> *)&amp;<name><name>p</name><index>[<expr>1</expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> = <call><name>sqlite3OsOpen</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>pVfs</name></expr></argument>, <argument><expr><name>p</name>-&gt;<name>zJournal</name></expr></argument>, <argument><expr><name>pReal</name></expr></argument>, <argument><expr><name>p</name>-&gt;<name>flags</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>( <expr><name>rc</name>==<name>SQLITE_OK</name></expr> )</condition><then><block>{
      <expr_stmt><expr><name>p</name>-&gt;<name>pReal</name> = <name>pReal</name></expr>;</expr_stmt>
      <if>if<condition>( <expr><name>p</name>-&gt;<name>iSize</name>&gt;0</expr> )</condition><then><block>{
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>iSize</name>&lt;=<name>p</name>-&gt;<name>nBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>rc</name> = <call><name>sqlite3OsWrite</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>pReal</name></expr></argument>, <argument><expr><name>p</name>-&gt;<name>zBuf</name></expr></argument>, <argument><expr><name>p</name>-&gt;<name>iSize</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if>
  }</block></then></if>
  <return>return <expr><name>rc</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Close the file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>jrnlClose</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type><name>pJfd</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>JournalFile</name> *</type><name>p</name> =<init> <expr>(<name>JournalFile</name> *)<name>pJfd</name></expr></init></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>p</name>-&gt;<name>pReal</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>sqlite3OsClose</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>pReal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>zBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Read data from the file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>jrnlRead</name><parameter_list>(
  <param><decl><type><name>sqlite3_file</name> *</type><name>pJfd</name></decl></param>,    <comment type="block">/* The journal file from which to read */</comment>
  <param><decl><type><name>void</name> *</type><name>zBuf</name></decl></param>,            <comment type="block">/* Put the results here */</comment>
  <param><decl><type><name>int</name></type> <name>iAmt</name></decl></param>,              <comment type="block">/* Number of bytes to read */</comment>
  <param><decl><type><name>sqlite_int64</name></type> <name>iOfst</name></decl></param>     <comment type="block">/* Begin reading at this offset */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> =<init> <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JournalFile</name> *</type><name>p</name> =<init> <expr>(<name>JournalFile</name> *)<name>pJfd</name></expr></init></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>p</name>-&gt;<name>pReal</name></expr> )</condition><then><block>{
    <expr_stmt><expr><name>rc</name> = <call><name>sqlite3OsRead</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>pReal</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>, <argument><expr><name>iOfst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then><else>else<block>{
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>iAmt</name>+<name>iOfst</name>&lt;=<name>p</name>-&gt;<name>iSize</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>, <argument><expr>&amp;<name>p</name>-&gt;<name><name>zBuf</name><index>[<expr><name>iOfst</name></expr>]</index></name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>
  <return>return <expr><name>rc</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Write data to the file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>jrnlWrite</name><parameter_list>(
  <param><decl><type><name>sqlite3_file</name> *</type><name>pJfd</name></decl></param>,    <comment type="block">/* The journal file into which to write */</comment>
  <param><decl><type><name>const</name> <name>void</name> *</type><name>zBuf</name></decl></param>,      <comment type="block">/* Take data to be written from here */</comment>
  <param><decl><type><name>int</name></type> <name>iAmt</name></decl></param>,              <comment type="block">/* Number of bytes to write */</comment>
  <param><decl><type><name>sqlite_int64</name></type> <name>iOfst</name></decl></param>     <comment type="block">/* Begin writing at this offset into the file */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> =<init> <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JournalFile</name> *</type><name>p</name> =<init> <expr>(<name>JournalFile</name> *)<name>pJfd</name></expr></init></decl>;</decl_stmt>
  <if>if<condition>( <expr>!<name>p</name>-&gt;<name>pReal</name> &amp;&amp; (<name>iOfst</name>+<name>iAmt</name>)&gt;<name>p</name>-&gt;<name>nBuf</name></expr> )</condition><then><block>{
    <expr_stmt><expr><name>rc</name> = <call><name>createFile</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <if>if<condition>( <expr><name>rc</name>==<name>SQLITE_OK</name></expr> )</condition><then><block>{
    <if>if<condition>( <expr><name>p</name>-&gt;<name>pReal</name></expr> )</condition><then><block>{
      <expr_stmt><expr><name>rc</name> = <call><name>sqlite3OsWrite</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>pReal</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>, <argument><expr><name>iOfst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then><else>else<block>{
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>&amp;<name>p</name>-&gt;<name><name>zBuf</name><index>[<expr><name>iOfst</name></expr>]</index></name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if<condition>( <expr><name>p</name>-&gt;<name>iSize</name>&lt;(<name>iOfst</name>+<name>iAmt</name>)</expr> )</condition><then><block>{
        <expr_stmt><expr><name>p</name>-&gt;<name>iSize</name> = (<name>iOfst</name>+<name>iAmt</name>)</expr>;</expr_stmt>
      }</block></then></if>
    }</block></else></if>
  }</block></then></if>
  <return>return <expr><name>rc</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Truncate the file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>jrnlTruncate</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type><name>pJfd</name></decl></param>, <param><decl><type><name>sqlite_int64</name></type> <name>size</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> =<init> <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JournalFile</name> *</type><name>p</name> =<init> <expr>(<name>JournalFile</name> *)<name>pJfd</name></expr></init></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>p</name>-&gt;<name>pReal</name></expr> )</condition><then><block>{
    <expr_stmt><expr><name>rc</name> = <call><name>sqlite3OsTruncate</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>pReal</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then><else>else <if>if<condition>( <expr><name>size</name>&lt;<name>p</name>-&gt;<name>iSize</name></expr> )</condition><then><block>{
    <expr_stmt><expr><name>p</name>-&gt;<name>iSize</name> = <name>size</name></expr>;</expr_stmt>
  }</block></then></if></else></if>
  <return>return <expr><name>rc</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Sync the file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>jrnlSync</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type><name>pJfd</name></decl></param>, <param><decl><type><name>int</name></type> <name>flags</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JournalFile</name> *</type><name>p</name> =<init> <expr>(<name>JournalFile</name> *)<name>pJfd</name></expr></init></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>p</name>-&gt;<name>pReal</name></expr> )</condition><then><block>{
    <expr_stmt><expr><name>rc</name> = <call><name>sqlite3OsSync</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>pReal</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then><else>else<block>{
    <expr_stmt><expr><name>rc</name> = <name>SQLITE_OK</name></expr>;</expr_stmt>
  }</block></else></if>
  <return>return <expr><name>rc</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Query the size of the file in bytes.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>jrnlFileSize</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type><name>pJfd</name></decl></param>, <param><decl><type><name>sqlite_int64</name> *</type><name>pSize</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> =<init> <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>JournalFile</name> *</type><name>p</name> =<init> <expr>(<name>JournalFile</name> *)<name>pJfd</name></expr></init></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>p</name>-&gt;<name>pReal</name></expr> )</condition><then><block>{
    <expr_stmt><expr><name>rc</name> = <call><name>sqlite3OsFileSize</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>pReal</name></expr></argument>, <argument><expr><name>pSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then><else>else<block>{
    <expr_stmt><expr>*<name>pSize</name> = (<name>sqlite_int64</name>) <name>p</name>-&gt;<name>iSize</name></expr>;</expr_stmt>
  }</block></else></if>
  <return>return <expr><name>rc</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Table of methods for JournalFile sqlite3_file object.
*/</comment>
<decl_stmt><decl><type><name>static</name> struct <name>sqlite3_io_methods</name></type> <name>JournalFileMethods</name> =<init> <expr><block>{
  <expr>1</expr>,             <comment type="block">/* iVersion */</comment>
  <expr><name>jrnlClose</name></expr>,     <comment type="block">/* xClose */</comment>
  <expr><name>jrnlRead</name></expr>,      <comment type="block">/* xRead */</comment>
  <expr><name>jrnlWrite</name></expr>,     <comment type="block">/* xWrite */</comment>
  <expr><name>jrnlTruncate</name></expr>,  <comment type="block">/* xTruncate */</comment>
  <expr><name>jrnlSync</name></expr>,      <comment type="block">/* xSync */</comment>
  <expr><name>jrnlFileSize</name></expr>,  <comment type="block">/* xFileSize */</comment>
  <expr>0</expr>,             <comment type="block">/* xLock */</comment>
  <expr>0</expr>,             <comment type="block">/* xUnlock */</comment>
  <expr>0</expr>,             <comment type="block">/* xCheckReservedLock */</comment>
  <expr>0</expr>,             <comment type="block">/* xFileControl */</comment>
  <expr>0</expr>,             <comment type="block">/* xSectorSize */</comment>
  <expr>0</expr>              <comment type="block">/* xDeviceCharacteristics */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* 
** Open a journal file.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3JournalOpen</name><parameter_list>(
  <param><decl><type><name>sqlite3_vfs</name> *</type><name>pVfs</name></decl></param>,         <comment type="block">/* The VFS to use for actual file I/O */</comment>
  <param><decl><type><name>const</name> <name>char</name> *</type><name>zName</name></decl></param>,         <comment type="block">/* Name of the journal file */</comment>
  <param><decl><type><name>sqlite3_file</name> *</type><name>pJfd</name></decl></param>,        <comment type="block">/* Preallocated, blank file handle */</comment>
  <param><decl><type><name>int</name></type> <name>flags</name></decl></param>,                 <comment type="block">/* Opening flags */</comment>
  <param><decl><type><name>int</name></type> <name>nBuf</name></decl></param>                   <comment type="block">/* Bytes buffered before opening the file */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>JournalFile</name> *</type><name>p</name> =<init> <expr>(<name>JournalFile</name> *)<name>pJfd</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>sqlite3JournalSize</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>nBuf</name>&gt;0</expr> )</condition><then><block>{
    <expr_stmt><expr><name>p</name>-&gt;<name>zBuf</name> = <call><name>sqlite3MallocZero</name><argument_list>(<argument><expr><name>nBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>( <expr>!<name>p</name>-&gt;<name>zBuf</name></expr> )</condition><then><block>{
      <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return>
    }</block></then></if>
  }</block></then><else>else<block>{
    <return>return <expr><call><name>sqlite3OsOpen</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><name>pJfd</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
  }</block></else></if>
  <expr_stmt><expr><name>p</name>-&gt;<name>pMethod</name> = &amp;<name>JournalFileMethods</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name>-&gt;<name>nBuf</name> = <name>nBuf</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name>-&gt;<name>flags</name> = <name>flags</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name>-&gt;<name>zJournal</name> = <name>zName</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name>-&gt;<name>pVfs</name> = <name>pVfs</name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** If the argument p points to a JournalFile structure, and the underlying
** file has not yet been created, create it now.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3JournalCreate</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type><name>p</name></decl></param>)</parameter_list><block>{
  <if>if<condition>( <expr><name>p</name>-&gt;<name>pMethods</name>!=&amp;<name>JournalFileMethods</name></expr> )</condition><then><block>{
    <return>return <expr><name>SQLITE_OK</name></expr>;</return>
  }</block></then></if>
  <return>return <expr><call><name>createFile</name><argument_list>(<argument><expr>(<name>JournalFile</name> *)<name>p</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/* 
** Return the number of bytes required to store a JournalFile that uses vfs
** pVfs to create the underlying on-disk files.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3JournalSize</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name> *</type><name>pVfs</name></decl></param>)</parameter_list><block>{
  <return>return <expr>(<name>pVfs</name>-&gt;<name>szOsFile</name>+<call><name>sizeof</name><argument_list>(<argument><expr><name>JournalFile</name></expr></argument>)</argument_list></call>)</expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
