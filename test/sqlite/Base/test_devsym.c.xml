<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="test_devsym.c" filename=""><comment type="block">/*
** 2008 Jan 22
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
******************************************************************************
**
** This file contains code that modified the OS layer in order to simulate
** different device types (by overriding the return values of the 
** xDeviceCharacteristics() and xSectorSize() methods).
**
** $Id: test_devsym.c,v 1.9 2008/12/09 01:32:03 drh Exp $
*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_TEST</name></expr></cpp:if>          <comment type="block">/* This file is used for testing only */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>

<comment type="block">/*
** Maximum pathname length supported by the devsym backend.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>DEVSYM_MAX_PATHNAME</name> 512</cpp:define>

<comment type="block">/*
** Name used to identify this VFS.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>DEVSYM_VFS_NAME</name> "devsym"</cpp:define>

<typedef>typedef <type><struct>struct <name>devsym_file</name> devsym_file;</struct></type></typedef>
<struct>struct <name>devsym_file</name> <block>{<public type="default">
  <decl_stmt><decl><type><name>sqlite3_file</name></type> <name>base</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_file</name> *</type><name>pReal</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<comment type="block">/*
** Method declarations for devsym_file.
*/</comment>
<function_decl><type><name>static</name> <name>int</name></type> <name>devsymClose</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>devsymRead</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>, <param><decl><type><name>void</name>*</type></decl></param>, <param><decl><type><name>int</name></type> <name>iAmt</name></decl></param>, <param><decl><type><name>sqlite3_int64</name></type> <name>iOfst</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>devsymWrite</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>,<param><decl><type><name>const</name> <name>void</name>*</type></decl></param>,<param><decl><type><name>int</name></type> <name>iAmt</name></decl></param>, <param><decl><type><name>sqlite3_int64</name></type> <name>iOfst</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>devsymTruncate</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>, <param><decl><type><name>sqlite3_int64</name></type> <name>size</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>devsymSync</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>, <param><decl><type><name>int</name></type> <name>flags</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>devsymFileSize</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>, <param><decl><type><name>sqlite3_int64</name> *</type><name>pSize</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>devsymLock</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>devsymUnlock</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>devsymCheckReservedLock</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>, <param><decl><type><name>int</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>devsymFileControl</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>, <param><decl><type><name>int</name></type> <name>op</name></decl></param>, <param><decl><type><name>void</name> *</type><name>pArg</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>devsymSectorSize</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>devsymDeviceCharacteristics</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/*
** Method declarations for devsym_vfs.
*/</comment>
<function_decl><type><name>static</name> <name>int</name></type> <name>devsymOpen</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name>*</type></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type></decl></param>, <param><decl><type><name>sqlite3_file</name>*</type></decl></param>, <param><decl><type><name>int</name></type></decl></param> , <param><decl><type><name>int</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>devsymDelete</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name>*</type></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>zName</name></decl></param>, <param><decl><type><name>int</name></type> <name>syncDir</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>devsymAccess</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name>*</type></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>zName</name></decl></param>, <param><decl><type><name>int</name></type> <name>flags</name></decl></param>, <param><decl><type><name>int</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>devsymFullPathname</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name>*</type></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>zName</name></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>char</name> *</type><name>zOut</name></decl></param>)</parameter_list>;</function_decl>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_LOAD_EXTENSION</name></cpp:ifndef>
<function_decl><type><name>static</name> <name>void</name> *</type><name>devsymDlOpen</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name>*</type></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>zFilename</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>void</name></type> <name>devsymDlError</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name>*</type></decl></param>, <param><decl><type><name>int</name></type> <name>nByte</name></decl></param>, <param><decl><type><name>char</name> *</type><name>zErrMsg</name></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>static</name></type> <name>void</name> <argument_list>(<argument><expr>*<call><name>devsymDlSym</name><argument_list>(<argument><expr><name>sqlite3_vfs</name>*</expr></argument>,<argument><expr><name>void</name>*</expr></argument>, <argument><expr><name>const</name> <name>char</name> *<name>zSymbol</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>static</name> <name>void</name></type> <name>devsymDlClose</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name>*</type></decl></param>, <param><decl><type><name>void</name>*</type></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_LOAD_EXTENSION */</comment>
<function_decl><type><name>static</name> <name>int</name></type> <name>devsymRandomness</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name>*</type></decl></param>, <param><decl><type><name>int</name></type> <name>nByte</name></decl></param>, <param><decl><type><name>char</name> *</type><name>zOut</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>devsymSleep</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name>*</type></decl></param>, <param><decl><type><name>int</name></type> <name>microseconds</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>devsymCurrentTime</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name>*</type></decl></param>, <param><decl><type><name>double</name>*</type></decl></param>)</parameter_list>;</function_decl>

<decl_stmt><decl><type><name>static</name> <name>sqlite3_vfs</name></type> <name>devsym_vfs</name> =<init> <expr><block>{
  <expr>1</expr>,                     <comment type="block">/* iVersion */</comment>
  <expr><call><name>sizeof</name><argument_list>(<argument><expr><name>devsym_file</name></expr></argument>)</argument_list></call></expr>,      <comment type="block">/* szOsFile */</comment>
  <expr><name>DEVSYM_MAX_PATHNAME</name></expr>,      <comment type="block">/* mxPathname */</comment>
  <expr>0</expr>,                     <comment type="block">/* pNext */</comment>
  <expr><name>DEVSYM_VFS_NAME</name></expr>,          <comment type="block">/* zName */</comment>
  <expr>0</expr>,                     <comment type="block">/* pAppData */</comment>
  <expr><name>devsymOpen</name></expr>,               <comment type="block">/* xOpen */</comment>
  <expr><name>devsymDelete</name></expr>,             <comment type="block">/* xDelete */</comment>
  <expr><name>devsymAccess</name></expr>,             <comment type="block">/* xAccess */</comment>
  <expr><name>devsymFullPathname</name></expr>,       <comment type="block">/* xFullPathname */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_LOAD_EXTENSION</name></cpp:ifndef>
  <expr><name>devsymDlOpen</name></expr>,             <comment type="block">/* xDlOpen */</comment>
  <expr><name>devsymDlError</name></expr>,            <comment type="block">/* xDlError */</comment>
  <expr><name>devsymDlSym</name></expr>,              <comment type="block">/* xDlSym */</comment>
  <expr><name>devsymDlClose</name></expr>,            <comment type="block">/* xDlClose */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr>0</expr>,                        <comment type="block">/* xDlOpen */</comment>
  <expr>0</expr>,                        <comment type="block">/* xDlError */</comment>
  <expr>0</expr>,                        <comment type="block">/* xDlSym */</comment>
  <expr>0</expr>,                        <comment type="block">/* xDlClose */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_LOAD_EXTENSION */</comment>
  <expr><name>devsymRandomness</name></expr>,         <comment type="block">/* xRandomness */</comment>
  <expr><name>devsymSleep</name></expr>,              <comment type="block">/* xSleep */</comment>
  <expr><name>devsymCurrentTime</name></expr>         <comment type="block">/* xCurrentTime */</comment>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>static</name> <name>sqlite3_io_methods</name></type> <name>devsym_io_methods</name> =<init> <expr><block>{
  <expr>1</expr>,                            <comment type="block">/* iVersion */</comment>
  <expr><name>devsymClose</name></expr>,                      <comment type="block">/* xClose */</comment>
  <expr><name>devsymRead</name></expr>,                       <comment type="block">/* xRead */</comment>
  <expr><name>devsymWrite</name></expr>,                      <comment type="block">/* xWrite */</comment>
  <expr><name>devsymTruncate</name></expr>,                   <comment type="block">/* xTruncate */</comment>
  <expr><name>devsymSync</name></expr>,                       <comment type="block">/* xSync */</comment>
  <expr><name>devsymFileSize</name></expr>,                   <comment type="block">/* xFileSize */</comment>
  <expr><name>devsymLock</name></expr>,                       <comment type="block">/* xLock */</comment>
  <expr><name>devsymUnlock</name></expr>,                     <comment type="block">/* xUnlock */</comment>
  <expr><name>devsymCheckReservedLock</name></expr>,          <comment type="block">/* xCheckReservedLock */</comment>
  <expr><name>devsymFileControl</name></expr>,                <comment type="block">/* xFileControl */</comment>
  <expr><name>devsymSectorSize</name></expr>,                 <comment type="block">/* xSectorSize */</comment>
  <expr><name>devsymDeviceCharacteristics</name></expr>       <comment type="block">/* xDeviceCharacteristics */</comment>
}</block></expr></init></decl>;</decl_stmt>

<struct>struct <name>DevsymGlobal</name> <block>{<public type="default">
  <decl_stmt><decl><type><name>sqlite3_vfs</name> *</type><name>pVfs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iDeviceChar</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iSectorSize</name></decl>;</decl_stmt>
</public>}</block>;</struct>
<decl_stmt><decl><type>struct <name>DevsymGlobal</name></type> <name>g</name> =<init> <expr><block>{<expr>0</expr>, <expr>0</expr>, <expr>512</expr>}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
** Close an devsym-file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>devsymClose</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>devsym_file</name> *</type><name>p</name> =<init> <expr>(<name>devsym_file</name> *)<name>pFile</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>sqlite3OsClose</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>pReal</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/*
** Read data from an devsym-file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>devsymRead</name><parameter_list>(
  <param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>, 
  <param><decl><type><name>void</name> *</type><name>zBuf</name></decl></param>, 
  <param><decl><type><name>int</name></type> <name>iAmt</name></decl></param>, 
  <param><decl><type><name>sqlite_int64</name></type> <name>iOfst</name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>devsym_file</name> *</type><name>p</name> =<init> <expr>(<name>devsym_file</name> *)<name>pFile</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>sqlite3OsRead</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>pReal</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>, <argument><expr><name>iOfst</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/*
** Write data to an devsym-file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>devsymWrite</name><parameter_list>(
  <param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>, 
  <param><decl><type><name>const</name> <name>void</name> *</type><name>zBuf</name></decl></param>, 
  <param><decl><type><name>int</name></type> <name>iAmt</name></decl></param>, 
  <param><decl><type><name>sqlite_int64</name></type> <name>iOfst</name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>devsym_file</name> *</type><name>p</name> =<init> <expr>(<name>devsym_file</name> *)<name>pFile</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>sqlite3OsWrite</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>pReal</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>, <argument><expr><name>iOfst</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/*
** Truncate an devsym-file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>devsymTruncate</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>, <param><decl><type><name>sqlite_int64</name></type> <name>size</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>devsym_file</name> *</type><name>p</name> =<init> <expr>(<name>devsym_file</name> *)<name>pFile</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>sqlite3OsTruncate</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>pReal</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/*
** Sync an devsym-file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>devsymSync</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>, <param><decl><type><name>int</name></type> <name>flags</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>devsym_file</name> *</type><name>p</name> =<init> <expr>(<name>devsym_file</name> *)<name>pFile</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>sqlite3OsSync</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>pReal</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/*
** Return the current file-size of an devsym-file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>devsymFileSize</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>, <param><decl><type><name>sqlite_int64</name> *</type><name>pSize</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>devsym_file</name> *</type><name>p</name> =<init> <expr>(<name>devsym_file</name> *)<name>pFile</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>sqlite3OsFileSize</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>pReal</name></expr></argument>, <argument><expr><name>pSize</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/*
** Lock an devsym-file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>devsymLock</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>, <param><decl><type><name>int</name></type> <name>eLock</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>devsym_file</name> *</type><name>p</name> =<init> <expr>(<name>devsym_file</name> *)<name>pFile</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>sqlite3OsLock</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>pReal</name></expr></argument>, <argument><expr><name>eLock</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/*
** Unlock an devsym-file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>devsymUnlock</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>, <param><decl><type><name>int</name></type> <name>eLock</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>devsym_file</name> *</type><name>p</name> =<init> <expr>(<name>devsym_file</name> *)<name>pFile</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>sqlite3OsUnlock</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>pReal</name></expr></argument>, <argument><expr><name>eLock</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/*
** Check if another file-handle holds a RESERVED lock on an devsym-file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>devsymCheckReservedLock</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>, <param><decl><type><name>int</name> *</type><name>pResOut</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>devsym_file</name> *</type><name>p</name> =<init> <expr>(<name>devsym_file</name> *)<name>pFile</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>sqlite3OsCheckReservedLock</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>pReal</name></expr></argument>, <argument><expr><name>pResOut</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/*
** File control method. For custom operations on an devsym-file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>devsymFileControl</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>, <param><decl><type><name>int</name></type> <name>op</name></decl></param>, <param><decl><type><name>void</name> *</type><name>pArg</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>devsym_file</name> *</type><name>p</name> =<init> <expr>(<name>devsym_file</name> *)<name>pFile</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><call><name>sqlite3OsFileControl</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>pReal</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>pArg</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/*
** Return the sector-size in bytes for an devsym-file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>devsymSectorSize</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>)</parameter_list><block>{
  <return>return <expr><name>g</name>.<name>iSectorSize</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Return the device characteristic flags supported by an devsym-file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>devsymDeviceCharacteristics</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>)</parameter_list><block>{
  <return>return <expr><name>g</name>.<name>iDeviceChar</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Open an devsym file handle.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>devsymOpen</name><parameter_list>(
  <param><decl><type><name>sqlite3_vfs</name> *</type><name>pVfs</name></decl></param>,
  <param><decl><type><name>const</name> <name>char</name> *</type><name>zName</name></decl></param>,
  <param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>flags</name></decl></param>,
  <param><decl><type><name>int</name> *</type><name>pOutFlags</name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>devsym_file</name> *</type><name>p</name> =<init> <expr>(<name>devsym_file</name> *)<name>pFile</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>p</name>-&gt;<name>pReal</name> = (<name>sqlite3_file</name> *)&amp;<name><name>p</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3OsOpen</name><argument_list>(<argument><expr><name>g</name>.<name>pVfs</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><name>p</name>-&gt;<name>pReal</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>pOutFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>p</name>-&gt;<name>pReal</name>-&gt;<name>pMethods</name></expr> )</condition><then><block>{
    <expr_stmt><expr><name>pFile</name>-&gt;<name>pMethods</name> = &amp;<name>devsym_io_methods</name></expr>;</expr_stmt>
  }</block></then></if>
  <return>return <expr><name>rc</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Delete the file located at zPath. If the dirSync argument is true,
** ensure the file-system modifications are synced to disk before
** returning.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>devsymDelete</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name> *</type><name>pVfs</name></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>zPath</name></decl></param>, <param><decl><type><name>int</name></type> <name>dirSync</name></decl></param>)</parameter_list><block>{
  <return>return <expr><call><name>sqlite3OsDelete</name><argument_list>(<argument><expr><name>g</name>.<name>pVfs</name></expr></argument>, <argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>dirSync</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/*
** Test for access permissions. Return true if the requested permission
** is available, or false otherwise.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>devsymAccess</name><parameter_list>(
  <param><decl><type><name>sqlite3_vfs</name> *</type><name>pVfs</name></decl></param>, 
  <param><decl><type><name>const</name> <name>char</name> *</type><name>zPath</name></decl></param>, 
  <param><decl><type><name>int</name></type> <name>flags</name></decl></param>, 
  <param><decl><type><name>int</name> *</type><name>pResOut</name></decl></param>
)</parameter_list><block>{
  <return>return <expr><call><name>sqlite3OsAccess</name><argument_list>(<argument><expr><name>g</name>.<name>pVfs</name></expr></argument>, <argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>pResOut</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/*
** Populate buffer zOut with the full canonical pathname corresponding
** to the pathname in zPath. zOut is guaranteed to point to a buffer
** of at least (DEVSYM_MAX_PATHNAME+1) bytes.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>devsymFullPathname</name><parameter_list>(
  <param><decl><type><name>sqlite3_vfs</name> *</type><name>pVfs</name></decl></param>, 
  <param><decl><type><name>const</name> <name>char</name> *</type><name>zPath</name></decl></param>, 
  <param><decl><type><name>int</name></type> <name>nOut</name></decl></param>, 
  <param><decl><type><name>char</name> *</type><name>zOut</name></decl></param>
)</parameter_list><block>{
  <return>return <expr><call><name>sqlite3OsFullPathname</name><argument_list>(<argument><expr><name>g</name>.<name>pVfs</name></expr></argument>, <argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>nOut</name></expr></argument>, <argument><expr><name>zOut</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_LOAD_EXTENSION</name></cpp:ifndef>
<comment type="block">/*
** Open the dynamic library located at zPath and return a handle.
*/</comment>
<function><type><name>static</name> <name>void</name> *</type><name>devsymDlOpen</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name> *</type><name>pVfs</name></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>zPath</name></decl></param>)</parameter_list><block>{
  <return>return <expr><call><name>sqlite3OsDlOpen</name><argument_list>(<argument><expr><name>g</name>.<name>pVfs</name></expr></argument>, <argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/*
** Populate the buffer zErrMsg (size nByte bytes) with a human readable
** utf-8 string describing the most recent error encountered associated 
** with dynamic libraries.
*/</comment>
<function><type><name>static</name> <name>void</name></type> <name>devsymDlError</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name> *</type><name>pVfs</name></decl></param>, <param><decl><type><name>int</name></type> <name>nByte</name></decl></param>, <param><decl><type><name>char</name> *</type><name>zErrMsg</name></decl></param>)</parameter_list><block>{
  <expr_stmt><expr><call><name>sqlite3OsDlError</name><argument_list>(<argument><expr><name>g</name>.<name>pVfs</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>, <argument><expr><name>zErrMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
** Return a pointer to the symbol zSymbol in the dynamic library pHandle.
*/</comment>
<decl_stmt><decl><type><name>static</name></type> <name>void</name> <argument_list>(<argument><expr>*<call><name>devsymDlSym</name><argument_list>(<argument><expr><name>sqlite3_vfs</name> *<name>pVfs</name></expr></argument>, <argument><expr><name>void</name> *<name>p</name></expr></argument>, <argument><expr><name>const</name> <name>char</name> *<name>zSym</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list><block>{
  <return>return <expr><call><name>sqlite3OsDlSym</name><argument_list>(<argument><expr><name>g</name>.<name>pVfs</name></expr></argument>, <argument><expr><name>p</name></expr></argument>, <argument><expr><name>zSym</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></decl></decl_stmt>

<comment type="block">/*
** Close the dynamic library handle pHandle.
*/</comment>
<function><type><name>static</name> <name>void</name></type> <name>devsymDlClose</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name> *</type><name>pVfs</name></decl></param>, <param><decl><type><name>void</name> *</type><name>pHandle</name></decl></param>)</parameter_list><block>{
  <expr_stmt><expr><call><name>sqlite3OsDlClose</name><argument_list>(<argument><expr><name>g</name>.<name>pVfs</name></expr></argument>, <argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_LOAD_EXTENSION */</comment>

<comment type="block">/*
** Populate the buffer pointed to by zBufOut with nByte bytes of 
** random data.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>devsymRandomness</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name> *</type><name>pVfs</name></decl></param>, <param><decl><type><name>int</name></type> <name>nByte</name></decl></param>, <param><decl><type><name>char</name> *</type><name>zBufOut</name></decl></param>)</parameter_list><block>{
  <return>return <expr><call><name>sqlite3OsRandomness</name><argument_list>(<argument><expr><name>g</name>.<name>pVfs</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>, <argument><expr><name>zBufOut</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/*
** Sleep for nMicro microseconds. Return the number of microseconds 
** actually slept.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>devsymSleep</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name> *</type><name>pVfs</name></decl></param>, <param><decl><type><name>int</name></type> <name>nMicro</name></decl></param>)</parameter_list><block>{
  <return>return <expr><call><name>sqlite3OsSleep</name><argument_list>(<argument><expr><name>g</name>.<name>pVfs</name></expr></argument>, <argument><expr><name>nMicro</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/*
** Return the current time as a Julian Day number in *pTimeOut.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>devsymCurrentTime</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name> *</type><name>pVfs</name></decl></param>, <param><decl><type><name>double</name> *</type><name>pTimeOut</name></decl></param>)</parameter_list><block>{
  <return>return <expr><call><name>sqlite3OsCurrentTime</name><argument_list>(<argument><expr><name>g</name>.<name>pVfs</name></expr></argument>, <argument><expr><name>pTimeOut</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/*
** This procedure registers the devsym vfs with SQLite. If the argument is
** true, the devsym vfs becomes the new default vfs. It is the only publicly
** available function in this file.
*/</comment>
<function><type><name>void</name></type> <name>devsym_register</name><parameter_list>(<param><decl><type><name>int</name></type> <name>iDeviceChar</name></decl></param>, <param><decl><type><name>int</name></type> <name>iSectorSize</name></decl></param>)</parameter_list><block>{
  <if>if<condition>( <expr><name>g</name>.<name>pVfs</name>==0</expr> )</condition><then><block>{
    <expr_stmt><expr><name>g</name>.<name>pVfs</name> = <call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>devsym_vfs</name>.<name>szOsFile</name> += <name>g</name>.<name>pVfs</name>-&gt;<name>szOsFile</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_vfs_register</name><argument_list>(<argument><expr>&amp;<name>devsym_vfs</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <if>if<condition>( <expr><name>iDeviceChar</name>&gt;=0</expr> )</condition><then><block>{
    <expr_stmt><expr><name>g</name>.<name>iDeviceChar</name> = <name>iDeviceChar</name></expr>;</expr_stmt>
  }</block></then></if>
  <if>if<condition>( <expr><name>iSectorSize</name>&gt;=0</expr> )</condition><then><block>{
    <expr_stmt><expr><name>g</name>.<name>iSectorSize</name> = <name>iSectorSize</name></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
