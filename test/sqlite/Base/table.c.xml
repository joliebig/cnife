<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="table.c" filename=""><comment type="block">/*
** 2001 September 15
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** This file contains the sqlite3_get_table() and sqlite3_free_table()
** interface routines.  These are just wrappers around the main
** interface routine of sqlite3_exec().
**
** These routines are in a separate files so that they will not be linked
** if they are not used.
**
** $Id: table.c,v 1.38 2008/12/10 19:26:24 drh Exp $
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_GET_TABLE</name></cpp:ifndef>

<comment type="block">/*
** This structure is used to pass data from sqlite3_get_table() through
** to the callback function is uses to build the result.
*/</comment>
<typedef>typedef <type><struct>struct <name>TabResult</name> <block>{<public type="default">
  <decl_stmt><decl><type><name>char</name> **</type><name>azResult</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>zErrMsg</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nResult</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nAlloc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nRow</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nColumn</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
</public>}</block></struct></type> <name>TabResult</name>;</typedef>

<comment type="block">/*
** This routine is called once for each row in the result table.  Its job
** is to fill in the TabResult structure appropriately, allocating new
** memory as necessary.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>sqlite3_get_table_cb</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>pArg</name></decl></param>, <param><decl><type><name>int</name></type> <name>nCol</name></decl></param>, <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>, <param><decl><type><name>char</name> **</type><name>colv</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>TabResult</name> *</type><name>p</name> =<init> <expr>(<name>TabResult</name>*)<name>pArg</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>need</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>z</name></decl>;</decl_stmt>

  <comment type="block">/* Make sure there is enough space in p-&gt;azResult to hold everything
  ** we need to remember from this invocation of the callback.
  */</comment>
  <if>if<condition>( <expr><name>p</name>-&gt;<name>nRow</name>==0 &amp;&amp; <name>argv</name>!=0</expr> )</condition><then><block>{
    <expr_stmt><expr><name>need</name> = <name>nCol</name>*2</expr>;</expr_stmt>
  }</block></then><else>else<block>{
    <expr_stmt><expr><name>need</name> = <name>nCol</name></expr>;</expr_stmt>
  }</block></else></if>
  <if>if<condition>( <expr><name>p</name>-&gt;<name>nData</name> + <name>need</name> &gt;= <name>p</name>-&gt;<name>nAlloc</name></expr> )</condition><then><block>{
    <decl_stmt><decl><type><name>char</name> **</type><name>azNew</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>p</name>-&gt;<name>nAlloc</name> = <name>p</name>-&gt;<name>nAlloc</name>*2 + <name>need</name> + 1</expr>;</expr_stmt>
    <expr_stmt><expr><name>azNew</name> = <call><name>sqlite3_realloc</name><argument_list>( <argument><expr><name>p</name>-&gt;<name>azResult</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>char</name>*</expr></argument>)</argument_list></call>*<name>p</name>-&gt;<name>nAlloc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>( <expr><name>azNew</name>==0</expr> )</condition><then> <goto>goto <name>malloc_failed</name>;</goto></then></if>
    <expr_stmt><expr><name>p</name>-&gt;<name>azResult</name> = <name>azNew</name></expr>;</expr_stmt>
  }</block></then></if>

  <comment type="block">/* If this is the first row, then generate an extra row containing
  ** the names of all columns.
  */</comment>
  <if>if<condition>( <expr><name>p</name>-&gt;<name>nRow</name>==0</expr> )</condition><then><block>{
    <expr_stmt><expr><name>p</name>-&gt;<name>nColumn</name> = <name>nCol</name></expr>;</expr_stmt>
    <for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<name>nCol</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
      <expr_stmt><expr><name>z</name> = <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr>"%s"</expr></argument>, <argument><expr><name><name>colv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if<condition>( <expr><name>z</name>==0</expr> )</condition><then> <goto>goto <name>malloc_failed</name>;</goto></then></if>
      <expr_stmt><expr><name>p</name>-&gt;<name><name>azResult</name><index>[<expr><name>p</name>-&gt;<name>nData</name>++</expr>]</index></name> = <name>z</name></expr>;</expr_stmt>
    }</block></for>
  }</block></then><else>else <if>if<condition>( <expr><name>p</name>-&gt;<name>nColumn</name>!=<name>nCol</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>zErrMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name>-&gt;<name>zErrMsg</name> = <call><name>sqlite3_mprintf</name><argument_list>(
       <argument><expr>"sqlite3_get_table() called with two or more incompatible queries"</expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name>-&gt;<name>rc</name> = <name>SQLITE_ERROR</name></expr>;</expr_stmt>
    <return>return <expr>1</expr>;</return>
  }</block></then></if></else></if>

  <comment type="block">/* Copy over the row data
  */</comment>
  <if>if<condition>( <expr><name>argv</name>!=0</expr> )</condition><then><block>{
    <for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<name>nCol</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
      <if>if<condition>( <expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name>==0</expr> )</condition><then><block>{
        <expr_stmt><expr><name>z</name> = 0</expr>;</expr_stmt>
      }</block></then><else>else<block>{
        <decl_stmt><decl><type><name>int</name></type> <name>n</name> =<init> <expr><call><name>sqlite3Strlen30</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call>+1</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name>z</name> = <call><name>sqlite3_malloc</name><argument_list>( <argument><expr><name>n</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>( <expr><name>z</name>==0</expr> )</condition><then> <goto>goto <name>malloc_failed</name>;</goto></then></if>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
      <expr_stmt><expr><name>p</name>-&gt;<name><name>azResult</name><index>[<expr><name>p</name>-&gt;<name>nData</name>++</expr>]</index></name> = <name>z</name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>p</name>-&gt;<name>nRow</name>++</expr>;</expr_stmt>
  }</block></then></if>
  <return>return <expr>0</expr>;</return>

<label><name>malloc_failed</name>:</label>
  <expr_stmt><expr><name>p</name>-&gt;<name>rc</name> = <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
  <return>return <expr>1</expr>;</return>
}</block></function>

<comment type="block">/*
** Query the database.  But instead of invoking a callback for each row,
** malloc() for space to hold the result and return the entire results
** at the conclusion of the call.
**
** The result that is written to ***pazResult is held in memory obtained
** from malloc().  But the caller cannot free this memory directly.  
** Instead, the entire table should be passed to sqlite3_free_table() when
** the calling procedure is finished using it.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3_get_table</name><parameter_list>(
  <param><decl><type><name>sqlite3</name> *</type><name>db</name></decl></param>,                <comment type="block">/* The database on which the SQL executes */</comment>
  <param><decl><type><name>const</name> <name>char</name> *</type><name>zSql</name></decl></param>,           <comment type="block">/* The SQL to be executed */</comment>
  <param><decl><type><name>char</name> ***</type><name>pazResult</name></decl></param>,          <comment type="block">/* Write the result table here */</comment>
  <param><decl><type><name>int</name> *</type><name>pnRow</name></decl></param>,                 <comment type="block">/* Write the number of rows in the result here */</comment>
  <param><decl><type><name>int</name> *</type><name>pnColumn</name></decl></param>,              <comment type="block">/* Write the number of columns of result here */</comment>
  <param><decl><type><name>char</name> **</type><name>pzErrMsg</name></decl></param>             <comment type="block">/* Write error messages here */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>TabResult</name></type> <name>res</name></decl>;</decl_stmt>

  <expr_stmt><expr>*<name>pazResult</name> = 0</expr>;</expr_stmt>
  <if>if<condition>( <expr><name>pnColumn</name></expr> )</condition><then> <expr_stmt><expr>*<name>pnColumn</name> = 0</expr>;</expr_stmt></then></if>
  <if>if<condition>( <expr><name>pnRow</name></expr> )</condition><then> <expr_stmt><expr>*<name>pnRow</name> = 0</expr>;</expr_stmt></then></if>
  <expr_stmt><expr><name>res</name>.<name>zErrMsg</name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name>.<name>nResult</name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name>.<name>nRow</name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name>.<name>nColumn</name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name>.<name>nData</name> = 1</expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name>.<name>nAlloc</name> = 20</expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name>.<name>rc</name> = <name>SQLITE_OK</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name>.<name>azResult</name> = <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>char</name>*</expr></argument>)</argument_list></call>*<name>res</name>.<name>nAlloc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>res</name>.<name>azResult</name>==0</expr> )</condition><then><block>{
     <expr_stmt><expr><name>db</name>-&gt;<name>errCode</name> = <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
     <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><name>res</name>.<name><name>azResult</name><index>[<expr>0</expr>]</index></name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><name>sqlite3_get_table_cb</name></expr></argument>, <argument><expr>&amp;<name>res</name></expr></argument>, <argument><expr><name>pzErrMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>res</name>.<name><name>azResult</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call>&gt;= <call><name>sizeof</name><argument_list>(<argument><expr><name>res</name>.<name>nData</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>res</name>.<name><name>azResult</name><index>[<expr>0</expr>]</index></name> = <call><name>SQLITE_INT_TO_PTR</name><argument_list>(<argument><expr><name>res</name>.<name>nData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr>(<name>rc</name>&amp;0xff)==<name>SQLITE_ABORT</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>sqlite3_free_table</name><argument_list>(<argument><expr>&amp;<name>res</name>.<name><name>azResult</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>( <expr><name>res</name>.<name>zErrMsg</name></expr> )</condition><then><block>{
      <if>if<condition>( <expr><name>pzErrMsg</name></expr> )</condition><then><block>{
        <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr>*<name>pzErrMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr>*<name>pzErrMsg</name> = <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr>"%s"</expr></argument>,<argument><expr><name>res</name>.<name>zErrMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>res</name>.<name>zErrMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>db</name>-&gt;<name>errCode</name> = <name>res</name>.<name>rc</name></expr>;</expr_stmt>  <comment type="block">/* Assume 32-bit assignment is atomic */</comment>
    <return>return <expr><name>res</name>.<name>rc</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>res</name>.<name>zErrMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_OK</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>sqlite3_free_table</name><argument_list>(<argument><expr>&amp;<name>res</name>.<name><name>azResult</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><name>res</name>.<name>nAlloc</name>&gt;<name>res</name>.<name>nData</name></expr> )</condition><then><block>{
    <decl_stmt><decl><type><name>char</name> **</type><name>azNew</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>azNew</name> = <call><name>sqlite3_realloc</name><argument_list>( <argument><expr><name>res</name>.<name>azResult</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>char</name>*</expr></argument>)</argument_list></call>*(<name>res</name>.<name>nData</name>+1)</expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>( <expr><name>azNew</name>==0</expr> )</condition><then><block>{
      <expr_stmt><expr><call><name>sqlite3_free_table</name><argument_list>(<argument><expr>&amp;<name>res</name>.<name><name>azResult</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>db</name>-&gt;<name>errCode</name> = <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
      <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>res</name>.<name>nAlloc</name> = <name>res</name>.<name>nData</name>+1</expr>;</expr_stmt>
    <expr_stmt><expr><name>res</name>.<name>azResult</name> = <name>azNew</name></expr>;</expr_stmt>
  }</block></then></if>
  <expr_stmt><expr>*<name>pazResult</name> = &amp;<name>res</name>.<name><name>azResult</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>pnColumn</name></expr> )</condition><then> <expr_stmt><expr>*<name>pnColumn</name> = <name>res</name>.<name>nColumn</name></expr>;</expr_stmt></then></if>
  <if>if<condition>( <expr><name>pnRow</name></expr> )</condition><then> <expr_stmt><expr>*<name>pnRow</name> = <name>res</name>.<name>nRow</name></expr>;</expr_stmt></then></if>
  <return>return <expr><name>rc</name></expr>;</return>
}</block></function>

<comment type="block">/*
** This routine frees the space the sqlite3_get_table() malloced.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3_free_table</name><parameter_list>(
  <param><decl><type><name>char</name> **</type><name>azResult</name></decl></param>            <comment type="block">/* Result returned from from sqlite3_get_table() */</comment>
)</parameter_list><block>{
  <if>if<condition>( <expr><name>azResult</name></expr> )</condition><then><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name>, <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>azResult</name>--</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>azResult</name>!=0</expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>n</name> = <call><name>SQLITE_PTR_TO_INT</name><argument_list>(<argument><expr><name><name>azResult</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for(<init><expr><name>i</name>=1</expr>;</init> <condition><expr><name>i</name>&lt;<name>n</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{ <if>if<condition>( <expr><name><name>azResult</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><then> <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>azResult</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if> }</block></for>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>azResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_GET_TABLE */</comment>
</unit>
