<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="random.c" filename=""><comment type="block">/*
** 2001 September 15
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** This file contains code to implement a pseudo-random number
** generator (PRNG) for SQLite.
**
** Random numbers are used by some of the database backends in order
** to generate random integer keys for tables or random filenames.
**
** $Id: random.c,v 1.29 2008/12/10 19:26:24 drh Exp $
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>


<comment type="block">/* All threads share a single random number generator.
** This structure is the current state of the generator.
*/</comment>
<decl_stmt><decl><type><name>static</name> <name>SQLITE_WSD</name> struct</type> <name>sqlite3PrngType</name> <block>{
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>isInit</name></decl>;</decl_stmt>          <comment type="block">/* True if initialized */</comment>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>i</name>, <name>j</name></decl>;</decl_stmt>            <comment type="block">/* State variables */</comment>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>s</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>          <comment type="block">/* State variables */</comment>
}</block></decl></decl_stmt> <expr_stmt><expr><name>sqlite3Prng</name></expr>;</expr_stmt>

<comment type="block">/*
** Get a single 8-bit random value from the RC4 PRNG.  The Mutex
** must be held while executing this routine.
**
** Why not just use a library random generator like lrand48() for this?
** Because the OP_NewRowid opcode in the VDBE depends on having a very
** good source of random numbers.  The lrand48() library function may
** well be good enough.  But maybe not.  Or maybe lrand48() has some
** subtle problems on some systems that could cause problems.  It is hard
** to know.  To minimize the risk of problems due to bad lrand48()
** implementations, SQLite uses this random number generator based
** on RC4, which we know works very well.
**
** (Later):  Actually, OP_NewRowid does not depend on a good source of
** randomness any more.  But we will leave this code in all the same.
*/</comment>
<function><type><name>static</name> <name>u8</name></type> <name>randomByte</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>t</name></decl>;</decl_stmt>


  <comment type="block">/* The "wsdPrng" macro will resolve to the pseudo-random number generator
  ** state vector.  If writable static data is unsupported on the target,
  ** we have to locate the state vector at run-time.  In the more common
  ** case where writable static data is supported, wsdPrng can refer directly
  ** to the "sqlite3Prng" state vector declared above.
  */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_WSD</name></cpp:ifdef>
  <decl_stmt><decl><type>struct <name>sqlite3PrngType</name> *</type><name>p</name> =<init> <expr>&amp;<call><name>GLOBAL</name><argument_list>(<argument><expr>struct <name>sqlite3PrngType</name></expr></argument>, <argument><expr><name>sqlite3Prng</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:define># <cpp:directive>define</cpp:directive> <name>wsdPrng</name> <name>p</name>[0]</cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define># <cpp:directive>define</cpp:directive> <name>wsdPrng</name> <name>sqlite3Prng</name></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


  <comment type="block">/* Initialize the state of the random number generator once,
  ** the first time this routine is called.  The seed value does
  ** not need to contain a lot of randomness since we are not
  ** trying to do secure encryption or anything like that...
  **
  ** Nothing in this file or anywhere else in SQLite does any kind of
  ** encryption.  The RC4 algorithm is being used as a PRNG (pseudo-random
  ** number generator) not as an encryption device.
  */</comment>
  <if>if<condition>( <expr>!<name>wsdPrng</name>.<name>isInit</name></expr> )</condition><then><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>k</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><name>wsdPrng</name>.<name>j</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>wsdPrng</name>.<name>i</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3OsRandomness</name><argument_list>(<argument><expr><call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>256</expr></argument>, <argument><expr><name>k</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;256</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
      <expr_stmt><expr><name>wsdPrng</name>.<name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>u8</name>)<name>i</name></expr>;</expr_stmt>
    }</block></for>
    <for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;256</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
      <expr_stmt><expr><name>wsdPrng</name>.<name>j</name> += <name>wsdPrng</name>.<name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> + <name><name>k</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>t</name> = <name>wsdPrng</name>.<name><name>s</name><index>[<expr><name>wsdPrng</name>.<name>j</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>wsdPrng</name>.<name><name>s</name><index>[<expr><name>wsdPrng</name>.<name>j</name></expr>]</index></name> = <name>wsdPrng</name>.<name><name>s</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><name>wsdPrng</name>.<name><name>s</name><index>[<expr><name>i</name></expr>]</index></name> = <name>t</name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr><name>wsdPrng</name>.<name>isInit</name> = 1</expr>;</expr_stmt>
  }</block></then></if>

  <comment type="block">/* Generate and return single random byte
  */</comment>
  <expr_stmt><expr><name>wsdPrng</name>.<name>i</name>++</expr>;</expr_stmt>
  <expr_stmt><expr><name>t</name> = <name>wsdPrng</name>.<name><name>s</name><index>[<expr><name>wsdPrng</name>.<name>i</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>wsdPrng</name>.<name>j</name> += <name>t</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>wsdPrng</name>.<name><name>s</name><index>[<expr><name>wsdPrng</name>.<name>i</name></expr>]</index></name> = <name>wsdPrng</name>.<name><name>s</name><index>[<expr><name>wsdPrng</name>.<name>j</name></expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>wsdPrng</name>.<name><name>s</name><index>[<expr><name>wsdPrng</name>.<name>j</name></expr>]</index></name> = <name>t</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>t</name> += <name>wsdPrng</name>.<name><name>s</name><index>[<expr><name>wsdPrng</name>.<name>i</name></expr>]</index></name></expr>;</expr_stmt>
  <return>return <expr><name>wsdPrng</name>.<name><name>s</name><index>[<expr><name>t</name></expr>]</index></name></expr>;</return>
}</block></function>

<comment type="block">/*
** Return N random bytes.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3_randomness</name><parameter_list>(<param><decl><type><name>int</name></type> <name>N</name></decl></param>, <param><decl><type><name>void</name> *</type><name>pBuf</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>zBuf</name> =<init> <expr><name>pBuf</name></expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_THREADSAFE</name></expr></cpp:if>
  <decl_stmt><decl><type><name>sqlite3_mutex</name> *</type><name>mutex</name> =<init> <expr><call><name>sqlite3MutexAlloc</name><argument_list>(<argument><expr><name>SQLITE_MUTEX_STATIC_PRNG</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>( <expr><name>N</name>--</expr> )</condition><block>{
    <expr_stmt><expr>*(<name>zBuf</name>++) = <call><name>randomByte</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></while>
  <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_BUILTIN_TEST</name></cpp:ifndef>
<comment type="block">/*
** For testing purposes, we sometimes want to preserve the state of
** PRNG and restore the PRNG to its saved state at a later time, or
** to reset the PRNG to its initial state.  These routines accomplish
** those tasks.
**
** The sqlite3_test_control() interface calls these routines to
** control the PRNG.
*/</comment>
<decl_stmt><decl><type><name>static</name> <name>SQLITE_WSD</name> struct <name>sqlite3PrngType</name></type> <name>sqlite3SavedPrng</name></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>sqlite3PrngSaveState</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list><block>{
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(
    <argument><expr>&amp;<call><name>GLOBAL</name><argument_list>(<argument><expr>struct <name>sqlite3PrngType</name></expr></argument>, <argument><expr><name>sqlite3SavedPrng</name></expr></argument>)</argument_list></call></expr></argument>,
    <argument><expr>&amp;<call><name>GLOBAL</name><argument_list>(<argument><expr>struct <name>sqlite3PrngType</name></expr></argument>, <argument><expr><name>sqlite3Prng</name></expr></argument>)</argument_list></call></expr></argument>,
    <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>sqlite3Prng</name></expr></argument>)</argument_list></call></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>sqlite3PrngRestoreState</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list><block>{
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(
    <argument><expr>&amp;<call><name>GLOBAL</name><argument_list>(<argument><expr>struct <name>sqlite3PrngType</name></expr></argument>, <argument><expr><name>sqlite3Prng</name></expr></argument>)</argument_list></call></expr></argument>,
    <argument><expr>&amp;<call><name>GLOBAL</name><argument_list>(<argument><expr>struct <name>sqlite3PrngType</name></expr></argument>, <argument><expr><name>sqlite3SavedPrng</name></expr></argument>)</argument_list></call></expr></argument>,
    <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>sqlite3Prng</name></expr></argument>)</argument_list></call></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name>sqlite3PrngResetState</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list><block>{
  <expr_stmt><expr><call><name>GLOBAL</name><argument_list>(<argument><expr>struct <name>sqlite3PrngType</name></expr></argument>, <argument><expr><name>sqlite3Prng</name></expr></argument>)</argument_list></call>.<name>isInit</name> = 0</expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_BUILTIN_TEST */</comment>
</unit>
