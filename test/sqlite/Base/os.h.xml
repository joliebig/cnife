<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="os.h"><comment type="block">/*
** 2001 September 16
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
******************************************************************************
**
** This header file (together with is companion C source-code file
** "os.c") attempt to abstract the underlying operating system so that
** the SQLite library will work on both POSIX and windows systems.
**
** This header file is #include-ed by sqliteInt.h and thus ends up
** being included by every source file.
**
** $Id: os.h,v 1.107 2009/01/14 23:03:41 drh Exp $
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_SQLITE_OS_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>_SQLITE_OS_H_</name></cpp:define>

<comment type="block">/*
** Figure out if we are dealing with Unix, Windows, or some other
** operating system.  After the following block of preprocess macros,
** all of SQLITE_OS_UNIX, SQLITE_OS_WIN, SQLITE_OS_OS2, and SQLITE_OS_OTHER 
** will defined to either 1 or 0.  One of the four will be 1.  The other 
** three will be 0.
*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_OS_OTHER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if># <cpp:directive>if</cpp:directive> <expr><name>SQLITE_OS_OTHER</name>==1</expr></cpp:if>
<cpp:undef>#   <cpp:directive>undef</cpp:directive> <name>SQLITE_OS_UNIX</name></cpp:undef>
<cpp:define>#   <cpp:directive>define</cpp:directive> <name>SQLITE_OS_UNIX</name> 0</cpp:define>
<cpp:undef>#   <cpp:directive>undef</cpp:directive> <name>SQLITE_OS_WIN</name></cpp:undef>
<cpp:define>#   <cpp:directive>define</cpp:directive> <name>SQLITE_OS_WIN</name> 0</cpp:define>
<cpp:undef>#   <cpp:directive>undef</cpp:directive> <name>SQLITE_OS_OS2</name></cpp:undef>
<cpp:define>#   <cpp:directive>define</cpp:directive> <name>SQLITE_OS_OS2</name> 0</cpp:define>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
<cpp:undef>#   <cpp:directive>undef</cpp:directive> <name>SQLITE_OS_OTHER</name></cpp:undef>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_OS_UNIX</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_OS_OTHER</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define># <cpp:directive>define</cpp:directive> <name>SQLITE_OS_OTHER</name> 0</cpp:define>
<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>SQLITE_OS_WIN</name></cpp:ifndef>
<cpp:if>#   <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>WIN32</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>__CYGWIN__</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>__MINGW32__</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>__BORLANDC__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#     <cpp:directive>define</cpp:directive> <name>SQLITE_OS_WIN</name> 1</cpp:define>
<cpp:define>#     <cpp:directive>define</cpp:directive> <name>SQLITE_OS_UNIX</name> 0</cpp:define>
<cpp:define>#     <cpp:directive>define</cpp:directive> <name>SQLITE_OS_OS2</name> 0</cpp:define>
<cpp:elif>#   <cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__EMX__</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>_OS2</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>OS2</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>_OS2_</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>__OS2__</name></expr></argument>)</argument_list></call></expr></cpp:elif>
<cpp:define>#     <cpp:directive>define</cpp:directive> <name>SQLITE_OS_WIN</name> 0</cpp:define>
<cpp:define>#     <cpp:directive>define</cpp:directive> <name>SQLITE_OS_UNIX</name> 0</cpp:define>
<cpp:define>#     <cpp:directive>define</cpp:directive> <name>SQLITE_OS_OS2</name> 1</cpp:define>
<cpp:else>#   <cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#     <cpp:directive>define</cpp:directive> <name>SQLITE_OS_WIN</name> 0</cpp:define>
<cpp:define>#     <cpp:directive>define</cpp:directive> <name>SQLITE_OS_UNIX</name> 1</cpp:define>
<cpp:define>#     <cpp:directive>define</cpp:directive> <name>SQLITE_OS_OS2</name> 0</cpp:define>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else># <cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#  <cpp:directive>define</cpp:directive> <name>SQLITE_OS_UNIX</name> 0</cpp:define>
<cpp:define>#  <cpp:directive>define</cpp:directive> <name>SQLITE_OS_OS2</name> 0</cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:ifndef># <cpp:directive>ifndef</cpp:directive> <name>SQLITE_OS_WIN</name></cpp:ifndef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <name>SQLITE_OS_WIN</name> 0</cpp:define>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** Determine if we are dealing with WindowsCE - which has a much
** reduced API.
*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_WIN32_WCE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define># <cpp:directive>define</cpp:directive> <name>SQLITE_OS_WINCE</name> 1</cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define># <cpp:directive>define</cpp:directive> <name>SQLITE_OS_WINCE</name> 0</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/*
** Define the maximum size of a temporary filename
*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_OS_WIN</name></expr></cpp:if>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;windows.h&gt;</cpp:file></cpp:include>
<cpp:define># <cpp:directive>define</cpp:directive> <name>SQLITE_TEMPNAME_SIZE</name> (MAX_PATH+50)</cpp:define>
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><name>SQLITE_OS_OS2</name></expr></cpp:elif>
<cpp:if># <cpp:directive>if</cpp:directive> <expr>(<name>__GNUC__</name> &gt; 3 || <name>__GNUC__</name> == 3 &amp;&amp; <name>__GNUC_MINOR__</name> &gt;= 3) &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>OS2_HIGH_MEMORY</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:include>#  <cpp:directive>include</cpp:directive> <cpp:file>&lt;os2safe.h&gt;</cpp:file></cpp:include> <comment type="block">/* has to be included before os2.h for linking to work */</comment>
<cpp:endif># <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define># <cpp:directive>define</cpp:directive> <name>INCL_DOSDATETIME</name></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <name>INCL_DOSFILEMGR</name></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <name>INCL_DOSERRORS</name></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <name>INCL_DOSMISC</name></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <name>INCL_DOSPROCESS</name></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <name>INCL_DOSMODULEMGR</name></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <name>INCL_DOSSEMAPHORES</name></cpp:define>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;os2.h&gt;</cpp:file></cpp:include>
<cpp:include># <cpp:directive>include</cpp:directive> <cpp:file>&lt;uconv.h&gt;</cpp:file></cpp:include>
<cpp:define># <cpp:directive>define</cpp:directive> <name>SQLITE_TEMPNAME_SIZE</name> (CCHMAXPATHCOMP)</cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define># <cpp:directive>define</cpp:directive> <name>SQLITE_TEMPNAME_SIZE</name> 200</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* If the SET_FULLSYNC macro is not defined above, then make it
** a no-op
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SET_FULLSYNC</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <name>SET_FULLSYNC</name>(x,y)</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** The default size of a disk sector
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_DEFAULT_SECTOR_SIZE</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <name>SQLITE_DEFAULT_SECTOR_SIZE</name> 512</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** Temporary files are named starting with this prefix followed by 16 random
** alphanumeric characters, and no file extension. They are stored in the
** OS's standard temporary file directory, and are deleted prior to exit.
** If sqlite is being embedded in another program, you may wish to change the
** prefix to reflect your program's name, so that if your program exits
** prematurely, old temporary files can be easily identified. This can be done
** using -DSQLITE_TEMP_FILE_PREFIX=myprefix_ on the compiler command line.
**
** 2006-10-31:  The default prefix used to be "sqlite_".  But then
** Mcafee started using SQLite in their anti-virus product and it
** started putting files with the "sqlite" name in the c:/temp folder.
** This annoyed many windows users.  Those users would then do a 
** Google search for "sqlite", find the telephone numbers of the
** developers and call to wake them up at night and complain.
** For this reason, the default name prefix is changed to be "sqlite" 
** spelled backwards.  So the temp files are still identified, but
** anybody smart enough to figure out the code is also likely smart
** enough to know that calling the developer will not help get rid
** of the file.
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_TEMP_FILE_PREFIX</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <name>SQLITE_TEMP_FILE_PREFIX</name> "etilqs_"</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** The following values may be passed as the second argument to
** sqlite3OsLock(). The various locks exhibit the following semantics:
**
** SHARED:    Any number of processes may hold a SHARED lock simultaneously.
** RESERVED:  A single process may hold a RESERVED lock on a file at
**            any time. Other processes may hold and obtain new SHARED locks.
** PENDING:   A single process may hold a PENDING lock on a file at
**            any one time. Existing SHARED locks may persist, but no new
**            SHARED locks may be obtained by other processes.
** EXCLUSIVE: An EXCLUSIVE lock precludes all other locks.
**
** PENDING_LOCK may not be passed directly to sqlite3OsLock(). Instead, a
** process that requests an EXCLUSIVE lock may actually obtain a PENDING
** lock. This can be upgraded to an EXCLUSIVE lock by a subsequent call to
** sqlite3OsLock().
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>NO_LOCK</name>         0</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>SHARED_LOCK</name>     1</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>RESERVED_LOCK</name>   2</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>PENDING_LOCK</name>    3</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>EXCLUSIVE_LOCK</name>  4</cpp:define>

<comment type="block">/*
** File Locking Notes:  (Mostly about windows but also some info for Unix)
**
** We cannot use LockFileEx() or UnlockFileEx() on Win95/98/ME because
** those functions are not available.  So we use only LockFile() and
** UnlockFile().
**
** LockFile() prevents not just writing but also reading by other processes.
** A SHARED_LOCK is obtained by locking a single randomly-chosen 
** byte out of a specific range of bytes. The lock byte is obtained at 
** random so two separate readers can probably access the file at the 
** same time, unless they are unlucky and choose the same lock byte.
** An EXCLUSIVE_LOCK is obtained by locking all bytes in the range.
** There can only be one writer.  A RESERVED_LOCK is obtained by locking
** a single byte of the file that is designated as the reserved lock byte.
** A PENDING_LOCK is obtained by locking a designated byte different from
** the RESERVED_LOCK byte.
**
** On WinNT/2K/XP systems, LockFileEx() and UnlockFileEx() are available,
** which means we can use reader/writer locks.  When reader/writer locks
** are used, the lock is placed on the same range of bytes that is used
** for probabilistic locking in Win95/98/ME.  Hence, the locking scheme
** will support two or more Win95 readers or two or more WinNT readers.
** But a single Win95 reader will lock out all WinNT readers and a single
** WinNT reader will lock out all other Win95 readers.
**
** The following #defines specify the range of bytes used for locking.
** SHARED_SIZE is the number of bytes available in the pool from which
** a random byte is selected for a shared lock.  The pool of bytes for
** shared locks begins at SHARED_FIRST. 
**
** These #defines are available in sqlite_aux.h so that adaptors for
** connecting SQLite to other operating systems can use the same byte
** ranges for locking.  In particular, the same locking strategy and
** byte ranges are used for Unix.  This leaves open the possiblity of having
** clients on win95, winNT, and unix all talking to the same shared file
** and all locking correctly.  To do so would require that samba (or whatever
** tool is being used for file sharing) implements locks correctly between
** windows and unix.  I'm guessing that isn't likely to happen, but by
** using the same locking range we are at least open to the possibility.
**
** Locking in windows is manditory.  For this reason, we cannot store
** actual data in the bytes used for locking.  The pager never allocates
** the pages involved in locking therefore.  SHARED_SIZE is selected so
** that all locks will fit on a single page even at the minimum page size.
** PENDING_BYTE defines the beginning of the locks.  By default PENDING_BYTE
** is set high so that we don't have to allocate an unused page except
** for very large databases.  But one should test the page skipping logic 
** by setting PENDING_BYTE low and running the entire regression suite.
**
** Changing the value of PENDING_BYTE results in a subtly incompatible
** file format.  Depending on how it is changed, you might not notice
** the incompatibility right away, even running a full regression test.
** The default location of PENDING_BYTE is the first byte past the
** 1GB boundary.
**
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_TEST</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>PENDING_BYTE</name>      0x40000000</cpp:define>  <comment type="block">/* First byte past the 1GB boundary */</comment>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<decl_stmt><decl><type><name>extern</name> <name>unsigned</name> <name>int</name></type> <name>sqlite3_pending_byte</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>PENDING_BYTE</name> <name>sqlite3_pending_byte</name></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>RESERVED_BYTE</name>     (PENDING_BYTE+1)</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>SHARED_FIRST</name>      (PENDING_BYTE+2)</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>SHARED_SIZE</name>       510</cpp:define>

<comment type="block">/* 
** Functions for accessing sqlite3_file methods 
*/</comment>
<function_decl><type><name>int</name></type> <name>sqlite3OsClose</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3OsRead</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>, <param><decl><type><name>void</name>*</type></decl></param>, <param><decl><type><name>int</name></type> <name>amt</name></decl></param>, <param><decl><type><name>i64</name></type> <name>offset</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3OsWrite</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>, <param><decl><type><name>const</name> <name>void</name>*</type></decl></param>, <param><decl><type><name>int</name></type> <name>amt</name></decl></param>, <param><decl><type><name>i64</name></type> <name>offset</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3OsTruncate</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>, <param><decl><type><name>i64</name></type> <name>size</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3OsSync</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3OsFileSize</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>, <param><decl><type><name>i64</name> *</type><name>pSize</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3OsLock</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3OsUnlock</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3OsCheckReservedLock</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type><name>id</name></decl></param>, <param><decl><type><name>int</name> *</type><name>pResOut</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3OsFileControl</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>,<param><decl><type><name>int</name></type></decl></param>,<param><decl><type><name>void</name>*</type></decl></param>)</parameter_list>;</function_decl>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>SQLITE_FCNTL_DB_UNCHANGED</name> 0xca093fa0</cpp:define>
<function_decl><type><name>int</name></type> <name>sqlite3OsSectorSize</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type><name>id</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3OsDeviceCharacteristics</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type><name>id</name></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* 
** Functions for accessing sqlite3_vfs methods 
*/</comment>
<function_decl><type><name>int</name></type> <name>sqlite3OsOpen</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name> *</type></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type></decl></param>, <param><decl><type><name>sqlite3_file</name>*</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>int</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3OsDelete</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name> *</type></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3OsAccess</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name> *</type></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>int</name> *</type><name>pResOut</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3OsFullPathname</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name> *</type></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>char</name> *</type></decl></param>)</parameter_list>;</function_decl>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_LOAD_EXTENSION</name></cpp:ifndef>
<function_decl><type><name>void</name> *</type><name>sqlite3OsDlOpen</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name> *</type></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sqlite3OsDlError</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>char</name> *</type></decl></param>)</parameter_list>;</function_decl>
<macro><name>void</name> <argument_list>(<argument>*sqlite3OsDlSym(sqlite3_vfs *, void *, const char *)</argument>)</argument_list><argument_list>(<argument>void</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
<function_decl><type><name>void</name></type> <name>sqlite3OsDlClose</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name> *</type></decl></param>, <param><decl><type><name>void</name> *</type></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_LOAD_EXTENSION */</comment>
<function_decl><type><name>int</name></type> <name>sqlite3OsRandomness</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>char</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3OsSleep</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3OsCurrentTime</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name> *</type></decl></param>, <param><decl><type><name>double</name>*</type></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/*
** Convenience functions for opening and closing files using 
** sqlite3_malloc() to obtain space for the file-handle structure.
*/</comment>
<function_decl><type><name>int</name></type> <name>sqlite3OsOpenMalloc</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name> *</type></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type></decl></param>, <param><decl><type><name>sqlite3_file</name> **</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>,<param><decl><type><name>int</name>*</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3OsCloseFree</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type></decl></param>)</parameter_list>;</function_decl>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* _SQLITE_OS_H_ */</comment>
</unit>
