<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="test_loadext.c" filename=""><comment type="block">/*
** 2006 June 14
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** Test extension for testing the sqlite3_load_extension() function.
**
** $Id: test_loadext.c,v 1.3 2008/08/02 03:50:39 drh Exp $
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3ext.h"</cpp:file></cpp:include>
<function><type><name>SQLITE_EXTENSION_INIT1</name>

<comment type="block">/*
** The half() SQL function returns half of its input value.
*/</comment>
<name>static</name> <name>void</name></type> <name>halfFunc</name><parameter_list>(
  <param><decl><type><name>sqlite3_context</name> *</type><name>context</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,
  <param><decl><type><name>sqlite3_value</name> **</type><name>argv</name></decl></param>
)</parameter_list><block>{
  <expr_stmt><expr><call><name>sqlite3_result_double</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr>0.5*<call><name>sqlite3_value_double</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
** SQL functions to call the sqlite3_status function and return results.
*/</comment>
<function><type><name>static</name> <name>void</name></type> <name>statusFunc</name><parameter_list>(
  <param><decl><type><name>sqlite3_context</name> *</type><name>context</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,
  <param><decl><type><name>sqlite3_value</name> **</type><name>argv</name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>op</name>, <name>mx</name>, <name>cur</name>, <name>resetFlag</name>, <name>rc</name></decl>;</decl_stmt>
  <if>if<condition>( <expr><call><name>sqlite3_value_type</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call>==<name>SQLITE_INTEGER</name></expr> )</condition><then><block>{
    <expr_stmt><expr><name>op</name> = <call><name>sqlite3_value_int</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then><else>else <if>if<condition>( <expr><call><name>sqlite3_value_type</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call>==<name>SQLITE_TEXT</name></expr> )</condition><then><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>zName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>const</name> <struct>struct <block>{<public type="default"/>
      <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>zName</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>op</name></decl>;</decl_stmt>
    }</block></struct></type></decl></decl_stmt> <expr_stmt><expr><name><name>aOp</name><index>[]</index></name> = <block>{
      <expr><block>{ <expr>"MEMORY_USED"</expr>,         <expr><name>SQLITE_STATUS_MEMORY_USED</name></expr>         }</block></expr>,
      <expr><block>{ <expr>"PAGECACHE_USED"</expr>,      <expr><name>SQLITE_STATUS_PAGECACHE_USED</name></expr>      }</block></expr>,
      <expr><block>{ <expr>"PAGECACHE_OVERFLOW"</expr>,  <expr><name>SQLITE_STATUS_PAGECACHE_OVERFLOW</name></expr>  }</block></expr>,
      <expr><block>{ <expr>"SCRATCH_USED"</expr>,        <expr><name>SQLITE_STATUS_SCRATCH_USED</name></expr>        }</block></expr>,
      <expr><block>{ <expr>"SCRATCH_OVERFLOW"</expr>,    <expr><name>SQLITE_STATUS_SCRATCH_OVERFLOW</name></expr>    }</block></expr>,
      <expr><block>{ <expr>"MALLOC_SIZE"</expr>,         <expr><name>SQLITE_STATUS_MALLOC_SIZE</name></expr>         }</block></expr>,
    }</block></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>nOp</name> =<init> <expr><call><name>sizeof</name><argument_list>(<argument><expr><name>aOp</name></expr></argument>)</argument_list></call>/<call><name>sizeof</name><argument_list>(<argument><expr><name><name>aOp</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name>zName</name> = (<name>const</name> <name>char</name>*)<call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<name>nOp</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
      <if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>aOp</name><index>[<expr><name>i</name></expr>]</index></name>.<name>zName</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
        <expr_stmt><expr><name>op</name> = <name><name>aOp</name><index>[<expr><name>i</name></expr>]</index></name>.<name>op</name></expr>;</expr_stmt>
        <break>break;</break>
      }</block></then></if>
    }</block></for>
    <if>if<condition>( <expr><name>i</name>&gt;=<name>nOp</name></expr> )</condition><then><block>{
      <decl_stmt><decl><type><name>char</name> *</type><name>zMsg</name> =<init> <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr>"unknown status property: %s"</expr></argument>, <argument><expr><name>zName</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>zMsg</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    }</block></then></if>
  }</block></then><else>else<block>{
    <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr>"unknown status type"</expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  }</block></else></if></else></if>
  <if>if<condition>( <expr><name>argc</name>==2</expr> )</condition><then><block>{
    <expr_stmt><expr><name>resetFlag</name> = <call><name>sqlite3_value_int</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then><else>else<block>{
    <expr_stmt><expr><name>resetFlag</name> = 0</expr>;</expr_stmt>
  }</block></else></if>
  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_status</name><argument_list>(<argument><expr><name>op</name></expr></argument>, <argument><expr>&amp;<name>cur</name></expr></argument>, <argument><expr>&amp;<name>mx</name></expr></argument>, <argument><expr><name>resetFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_OK</name></expr> )</condition><then><block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>zMsg</name> =<init> <expr><call><name>sqlite3_mprintf</name><argument_list>(<argument><expr>"sqlite3_status(%d,...) returns %d"</expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>zMsg</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return;</return>
  }</block></then></if> 
  <if>if<condition>( <expr><name>argc</name>==2</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>sqlite3_result_int</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>mx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then><else>else<block>{
    <expr_stmt><expr><call><name>sqlite3_result_int</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>cur</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>
}</block></function>

<comment type="block">/*
** Extension load function.
*/</comment>
<function><type><name>int</name></type> <name>testloadext_init</name><parameter_list>(
  <param><decl><type><name>sqlite3</name> *</type><name>db</name></decl></param>, 
  <param><decl><type><name>char</name> **</type><name>pzErrMsg</name></decl></param>, 
  <param><decl><type><name>const</name> <name>sqlite3_api_routines</name> *</type><name>pApi</name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>nErr</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SQLITE_EXTENSION_INIT2</name><argument_list>(<argument><expr><name>pApi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>nErr</name> |= <call><name>sqlite3_create_function</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr>"half"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>SQLITE_ANY</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>halfFunc</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>nErr</name> |= <call><name>sqlite3_create_function</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr>"sqlite3_status"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>SQLITE_ANY</name></expr></argument>, <argument><expr>0</expr></argument>,
                          <argument><expr><name>statusFunc</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>nErr</name> |= <call><name>sqlite3_create_function</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr>"sqlite3_status"</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>SQLITE_ANY</name></expr></argument>, <argument><expr>0</expr></argument>,
                          <argument><expr><name>statusFunc</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>nErr</name> ? <name>SQLITE_ERROR</name> : <name>SQLITE_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Another extension entry point. This one always fails.
*/</comment>
<function><type><name>int</name></type> <name>testbrokenext_init</name><parameter_list>(
  <param><decl><type><name>sqlite3</name> *</type><name>db</name></decl></param>, 
  <param><decl><type><name>char</name> **</type><name>pzErrMsg</name></decl></param>, 
  <param><decl><type><name>const</name> <name>sqlite3_api_routines</name> *</type><name>pApi</name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>char</name> *</type><name>zErr</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>SQLITE_EXTENSION_INIT2</name><argument_list>(<argument><expr><name>pApi</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zErr</name> = <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr>"broken!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>*<name>pzErrMsg</name> = <name>zErr</name></expr>;</expr_stmt>
  <return>return <expr>1</expr>;</return>
}</block></function>
</unit>
