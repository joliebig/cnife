<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="btree.h"><comment type="block">/*
** 2001 September 15
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** This header file defines the interface that the sqlite B-Tree file
** subsystem.  See comments in the source code for a detailed description
** of what each interface routine does.
**
** @(#) $Id: btree.h,v 1.106 2008/12/17 17:30:26 danielk1977 Exp $
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_BTREE_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>_BTREE_H_</name></cpp:define>

<comment type="block">/* TODO: This definition is just included so other modules compile. It
** needs to be revisited.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>SQLITE_N_BTREE_META</name> 10</cpp:define>

<comment type="block">/*
** If defined as non-zero, auto-vacuum is enabled by default. Otherwise
** it must be turned on for each database using "PRAGMA auto_vacuum = 1".
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_DEFAULT_AUTOVACUUM</name></cpp:ifndef>
  <cpp:define>#<cpp:directive>define</cpp:directive> <name>SQLITE_DEFAULT_AUTOVACUUM</name> 0</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>BTREE_AUTOVACUUM_NONE</name> 0</cpp:define>        <comment type="block">/* Do not do auto-vacuum */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>BTREE_AUTOVACUUM_FULL</name> 1</cpp:define>        <comment type="block">/* Do full auto-vacuum */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>BTREE_AUTOVACUUM_INCR</name> 2</cpp:define>        <comment type="block">/* Incremental vacuum */</comment>

<comment type="block">/*
** Forward declarations of structure
*/</comment>
<typedef>typedef <type><struct>struct <name>Btree</name> Btree;</struct></type></typedef>
<typedef>typedef <type><struct>struct <name>BtCursor</name> BtCursor;</struct></type></typedef>
<typedef>typedef <type><struct>struct <name>BtShared</name> BtShared;</struct></type></typedef>
<typedef>typedef <type><struct>struct <name>BtreeMutexArray</name> BtreeMutexArray;</struct></type></typedef>

<comment type="block">/*
** This structure records all of the Btrees that need to hold
** a mutex before we enter sqlite3VdbeExec().  The Btrees are
** are placed in aBtree[] in order of aBtree[]-&gt;pBt.  That way,
** we can always lock and unlock them all quickly.
*/</comment>
<struct>struct <name>BtreeMutexArray</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>nMutex</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Btree</name> *</type><name><name>aBtree</name><index>[<expr><name>SQLITE_MAX_ATTACHED</name>+1</expr>]</index></name></decl>;</decl_stmt>
}</block>;</struct>


<function_decl><type><name>int</name></type> <name>sqlite3BtreeOpen</name><parameter_list>(
  <param><decl><type><name>const</name> <name>char</name> *</type><name>zFilename</name></decl></param>,   <comment type="block">/* Name of database file to open */</comment>
  <param><decl><type><name>sqlite3</name> *</type><name>db</name></decl></param>,             <comment type="block">/* Associated database connection */</comment>
  <param><decl><type><name>Btree</name> **</type></decl></param>,                <comment type="block">/* Return open Btree* here */</comment>
  <param><decl><type><name>int</name></type> <name>flags</name></decl></param>,               <comment type="block">/* Flags */</comment>
  <param><decl><type><name>int</name></type> <name>vfsFlags</name></decl></param>             <comment type="block">/* Flags passed through to VFS open */</comment>
)</parameter_list>;</function_decl>

<comment type="block">/* The flags parameter to sqlite3BtreeOpen can be the bitwise or of the
** following values.
**
** NOTE:  These values must match the corresponding PAGER_ values in
** pager.h.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>BTREE_OMIT_JOURNAL</name>  1</cpp:define>  <comment type="block">/* Do not use journal.  No argument */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>BTREE_NO_READLOCK</name>   2</cpp:define>  <comment type="block">/* Omit readlocks on readonly files */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>BTREE_MEMORY</name>        4</cpp:define>  <comment type="block">/* In-memory DB.  No argument */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>BTREE_READONLY</name>      8</cpp:define>  <comment type="block">/* Open the database in read-only mode */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>BTREE_READWRITE</name>    16</cpp:define>  <comment type="block">/* Open for both reading and writing */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>BTREE_CREATE</name>       32</cpp:define>  <comment type="block">/* Create the database if it does not exist */</comment>

<function_decl><type><name>int</name></type> <name>sqlite3BtreeClose</name><parameter_list>(<param><decl><type><name>Btree</name>*</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3BtreeSetCacheSize</name><parameter_list>(<param><decl><type><name>Btree</name>*</type></decl></param>,<param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3BtreeSetSafetyLevel</name><parameter_list>(<param><decl><type><name>Btree</name>*</type></decl></param>,<param><decl><type><name>int</name></type></decl></param>,<param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3BtreeSyncDisabled</name><parameter_list>(<param><decl><type><name>Btree</name>*</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3BtreeSetPageSize</name><parameter_list>(<param><decl><type><name>Btree</name>*</type></decl></param>,<param><decl><type><name>int</name></type></decl></param>,<param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3BtreeGetPageSize</name><parameter_list>(<param><decl><type><name>Btree</name>*</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3BtreeMaxPageCount</name><parameter_list>(<param><decl><type><name>Btree</name>*</type></decl></param>,<param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3BtreeGetReserve</name><parameter_list>(<param><decl><type><name>Btree</name>*</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3BtreeSetAutoVacuum</name><parameter_list>(<param><decl><type><name>Btree</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3BtreeGetAutoVacuum</name><parameter_list>(<param><decl><type><name>Btree</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3BtreeBeginTrans</name><parameter_list>(<param><decl><type><name>Btree</name>*</type></decl></param>,<param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3BtreeCommitPhaseOne</name><parameter_list>(<param><decl><type><name>Btree</name>*</type></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>zMaster</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3BtreeCommitPhaseTwo</name><parameter_list>(<param><decl><type><name>Btree</name>*</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3BtreeCommit</name><parameter_list>(<param><decl><type><name>Btree</name>*</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3BtreeRollback</name><parameter_list>(<param><decl><type><name>Btree</name>*</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3BtreeBeginStmt</name><parameter_list>(<param><decl><type><name>Btree</name>*</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3BtreeCommitStmt</name><parameter_list>(<param><decl><type><name>Btree</name>*</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3BtreeRollbackStmt</name><parameter_list>(<param><decl><type><name>Btree</name>*</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3BtreeCreateTable</name><parameter_list>(<param><decl><type><name>Btree</name>*</type></decl></param>, <param><decl><type><name>int</name>*</type></decl></param>, <param><decl><type><name>int</name></type> <name>flags</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3BtreeIsInTrans</name><parameter_list>(<param><decl><type><name>Btree</name>*</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3BtreeIsInStmt</name><parameter_list>(<param><decl><type><name>Btree</name>*</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3BtreeIsInReadTrans</name><parameter_list>(<param><decl><type><name>Btree</name>*</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name> *</type><name>sqlite3BtreeSchema</name><parameter_list>(<param><decl><type><name>Btree</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><function_decl><type><name>void</name></type>(*)<parameter_list>(<param><decl><type><name>void</name> *</type></decl></param>)</parameter_list></function_decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3BtreeSchemaLocked</name><parameter_list>(<param><decl><type><name>Btree</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3BtreeLockTable</name><parameter_list>(<param><decl><type><name>Btree</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>u8</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3BtreeSavepoint</name><parameter_list>(<param><decl><type><name>Btree</name> *</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>const</name> <name>char</name> *</type><name>sqlite3BtreeGetFilename</name><parameter_list>(<param><decl><type><name>Btree</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>const</name> <name>char</name> *</type><name>sqlite3BtreeGetDirname</name><parameter_list>(<param><decl><type><name>Btree</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>const</name> <name>char</name> *</type><name>sqlite3BtreeGetJournalname</name><parameter_list>(<param><decl><type><name>Btree</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3BtreeCopyFile</name><parameter_list>(<param><decl><type><name>Btree</name> *</type></decl></param>, <param><decl><type><name>Btree</name> *</type></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>sqlite3BtreeIncrVacuum</name><parameter_list>(<param><decl><type><name>Btree</name> *</type></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/* The flags parameter to sqlite3BtreeCreateTable can be the bitwise OR
** of the following flags:
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>BTREE_INTKEY</name>     1</cpp:define>    <comment type="block">/* Table has only 64-bit signed integer keys */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>BTREE_ZERODATA</name>   2</cpp:define>    <comment type="block">/* Table has keys only - no data */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>BTREE_LEAFDATA</name>   4</cpp:define>    <comment type="block">/* Data stored in leaves only.  Implies INTKEY */</comment>

<function_decl><type><name>int</name></type> <name>sqlite3BtreeDropTable</name><parameter_list>(<param><decl><type><name>Btree</name>*</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>int</name>*</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3BtreeClearTable</name><parameter_list>(<param><decl><type><name>Btree</name>*</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>int</name>*</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3BtreeGetMeta</name><parameter_list>(<param><decl><type><name>Btree</name>*</type></decl></param>, <param><decl><type><name>int</name></type> <name>idx</name></decl></param>, <param><decl><type><name>u32</name> *</type><name>pValue</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3BtreeUpdateMeta</name><parameter_list>(<param><decl><type><name>Btree</name>*</type></decl></param>, <param><decl><type><name>int</name></type> <name>idx</name></decl></param>, <param><decl><type><name>u32</name></type> <name>value</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sqlite3BtreeTripAllCursors</name><parameter_list>(<param><decl><type><name>Btree</name>*</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>sqlite3BtreeCursor</name><parameter_list>(
  <param><decl><type><name>Btree</name>*</type></decl></param>,                              <comment type="block">/* BTree containing table to open */</comment>
  <param><decl><type><name>int</name></type> <name>iTable</name></decl></param>,                          <comment type="block">/* Index of root page */</comment>
  <param><decl><type><name>int</name></type> <name>wrFlag</name></decl></param>,                          <comment type="block">/* 1 for writing.  0 for read-only */</comment>
  <param><decl><type>struct <name>KeyInfo</name>*</type></decl></param>,                     <comment type="block">/* First argument to compare function */</comment>
  <param><decl><type><name>BtCursor</name> *</type><name>pCursor</name></decl></param>                    <comment type="block">/* Space to write cursor structure */</comment>
)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3BtreeCursorSize</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>sqlite3BtreeCloseCursor</name><parameter_list>(<param><decl><type><name>BtCursor</name>*</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3BtreeMoveto</name><parameter_list>(
  <param><decl><type><name>BtCursor</name>*</type></decl></param>,
  <param><decl><type><name>const</name> <name>void</name> *</type><name>pKey</name></decl></param>,
  <param><decl><type><name>i64</name></type> <name>nKey</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>bias</name></decl></param>,
  <param><decl><type><name>int</name> *</type><name>pRes</name></decl></param>
)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3BtreeMovetoUnpacked</name><parameter_list>(
  <param><decl><type><name>BtCursor</name>*</type></decl></param>,
  <param><decl><type><name>UnpackedRecord</name> *</type><name>pUnKey</name></decl></param>,
  <param><decl><type><name>i64</name></type> <name>intKey</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>bias</name></decl></param>,
  <param><decl><type><name>int</name> *</type><name>pRes</name></decl></param>
)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3BtreeCursorHasMoved</name><parameter_list>(<param><decl><type><name>BtCursor</name>*</type></decl></param>, <param><decl><type><name>int</name>*</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3BtreeDelete</name><parameter_list>(<param><decl><type><name>BtCursor</name>*</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3BtreeInsert</name><parameter_list>(<param><decl><type><name>BtCursor</name>*</type></decl></param>, <param><decl><type><name>const</name> <name>void</name> *</type><name>pKey</name></decl></param>, <param><decl><type><name>i64</name></type> <name>nKey</name></decl></param>,
                                  <param><decl><type><name>const</name> <name>void</name> *</type><name>pData</name></decl></param>, <param><decl><type><name>int</name></type> <name>nData</name></decl></param>,
                                  <param><decl><type><name>int</name></type> <name>nZero</name></decl></param>, <param><decl><type><name>int</name></type> <name>bias</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3BtreeFirst</name><parameter_list>(<param><decl><type><name>BtCursor</name>*</type></decl></param>, <param><decl><type><name>int</name> *</type><name>pRes</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3BtreeLast</name><parameter_list>(<param><decl><type><name>BtCursor</name>*</type></decl></param>, <param><decl><type><name>int</name> *</type><name>pRes</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3BtreeNext</name><parameter_list>(<param><decl><type><name>BtCursor</name>*</type></decl></param>, <param><decl><type><name>int</name> *</type><name>pRes</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3BtreeEof</name><parameter_list>(<param><decl><type><name>BtCursor</name>*</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3BtreeFlags</name><parameter_list>(<param><decl><type><name>BtCursor</name>*</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3BtreePrevious</name><parameter_list>(<param><decl><type><name>BtCursor</name>*</type></decl></param>, <param><decl><type><name>int</name> *</type><name>pRes</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3BtreeKeySize</name><parameter_list>(<param><decl><type><name>BtCursor</name>*</type></decl></param>, <param><decl><type><name>i64</name> *</type><name>pSize</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3BtreeKey</name><parameter_list>(<param><decl><type><name>BtCursor</name>*</type></decl></param>, <param><decl><type><name>u32</name></type> <name>offset</name></decl></param>, <param><decl><type><name>u32</name></type> <name>amt</name></decl></param>, <param><decl><type><name>void</name>*</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>sqlite3</name> *</type><name>sqlite3BtreeCursorDb</name><parameter_list>(<param><decl><type><name>const</name> <name>BtCursor</name>*</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>const</name> <name>void</name> *</type><name>sqlite3BtreeKeyFetch</name><parameter_list>(<param><decl><type><name>BtCursor</name>*</type></decl></param>, <param><decl><type><name>int</name> *</type><name>pAmt</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>const</name> <name>void</name> *</type><name>sqlite3BtreeDataFetch</name><parameter_list>(<param><decl><type><name>BtCursor</name>*</type></decl></param>, <param><decl><type><name>int</name> *</type><name>pAmt</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3BtreeDataSize</name><parameter_list>(<param><decl><type><name>BtCursor</name>*</type></decl></param>, <param><decl><type><name>u32</name> *</type><name>pSize</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>sqlite3BtreeData</name><parameter_list>(<param><decl><type><name>BtCursor</name>*</type></decl></param>, <param><decl><type><name>u32</name></type> <name>offset</name></decl></param>, <param><decl><type><name>u32</name></type> <name>amt</name></decl></param>, <param><decl><type><name>void</name>*</type></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>char</name> *</type><name>sqlite3BtreeIntegrityCheck</name><parameter_list>(<param><decl><type><name>Btree</name>*</type></decl></param>, <param><decl><type><name>int</name> *</type><name>aRoot</name></decl></param>, <param><decl><type><name>int</name></type> <name>nRoot</name></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>int</name>*</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type>struct <name>Pager</name> *</type><name>sqlite3BtreePager</name><parameter_list>(<param><decl><type><name>Btree</name>*</type></decl></param>)</parameter_list>;</function_decl>

<function_decl><type><name>int</name></type> <name>sqlite3BtreePutData</name><parameter_list>(<param><decl><type><name>BtCursor</name>*</type></decl></param>, <param><decl><type><name>u32</name></type> <name>offset</name></decl></param>, <param><decl><type><name>u32</name></type> <name>amt</name></decl></param>, <param><decl><type><name>void</name>*</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sqlite3BtreeCacheOverflow</name><parameter_list>(<param><decl><type><name>BtCursor</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sqlite3BtreeClearCursor</name><parameter_list>(<param><decl><type><name>BtCursor</name> *</type></decl></param>)</parameter_list>;</function_decl>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_TEST</name></cpp:ifdef>
<function_decl><type><name>int</name></type> <name>sqlite3BtreeCursorInfo</name><parameter_list>(<param><decl><type><name>BtCursor</name>*</type></decl></param>, <param><decl><type><name>int</name>*</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>void</name></type> <name>sqlite3BtreeCursorList</name><parameter_list>(<param><decl><type><name>Btree</name>*</type></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** If we are not using shared cache, then there is no need to
** use mutexes to access the BtShared structures.  So make the
** Enter and Leave procedures no-ops.
*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_OMIT_SHARED_CACHE</name></expr></argument>)</argument_list></call> &amp;&amp; <name>SQLITE_THREADSAFE</name></expr></cpp:if>
  <function_decl><type><name>void</name></type> <name>sqlite3BtreeEnter</name><parameter_list>(<param><decl><type><name>Btree</name>*</type></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>sqlite3BtreeLeave</name><parameter_list>(<param><decl><type><name>Btree</name>*</type></decl></param>)</parameter_list>;</function_decl>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NDEBUG</name></cpp:ifndef>
  <comment type="block">/* This routine is used inside assert() statements only. */</comment>
  <function_decl><type><name>int</name></type> <name>sqlite3BtreeHoldsMutex</name><parameter_list>(<param><decl><type><name>Btree</name>*</type></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <function_decl><type><name>void</name></type> <name>sqlite3BtreeEnterCursor</name><parameter_list>(<param><decl><type><name>BtCursor</name>*</type></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>sqlite3BtreeLeaveCursor</name><parameter_list>(<param><decl><type><name>BtCursor</name>*</type></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>sqlite3BtreeEnterAll</name><parameter_list>(<param><decl><type><name>sqlite3</name>*</type></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>sqlite3BtreeLeaveAll</name><parameter_list>(<param><decl><type><name>sqlite3</name>*</type></decl></param>)</parameter_list>;</function_decl>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NDEBUG</name></cpp:ifndef>
  <comment type="block">/* This routine is used inside assert() statements only. */</comment>
  <function_decl><type><name>int</name></type> <name>sqlite3BtreeHoldsAllMutexes</name><parameter_list>(<param><decl><type><name>sqlite3</name>*</type></decl></param>)</parameter_list>;</function_decl>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <function_decl><type><name>void</name></type> <name>sqlite3BtreeMutexArrayEnter</name><parameter_list>(<param><decl><type><name>BtreeMutexArray</name>*</type></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>sqlite3BtreeMutexArrayLeave</name><parameter_list>(<param><decl><type><name>BtreeMutexArray</name>*</type></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> <name>sqlite3BtreeMutexArrayInsert</name><parameter_list>(<param><decl><type><name>BtreeMutexArray</name>*</type></decl></param>, <param><decl><type><name>Btree</name>*</type></decl></param>)</parameter_list>;</function_decl>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3BtreeEnter</name>(X)</cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3BtreeLeave</name>(X)</cpp:define>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NDEBUG</name></cpp:ifndef>
  <comment type="block">/* This routine is used inside assert() statements only. */</comment>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3BtreeHoldsMutex</name>(X) 1</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3BtreeEnterCursor</name>(X)</cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3BtreeLeaveCursor</name>(X)</cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3BtreeEnterAll</name>(X)</cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3BtreeLeaveAll</name>(X)</cpp:define>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NDEBUG</name></cpp:ifndef>
  <comment type="block">/* This routine is used inside assert() statements only. */</comment>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3BtreeHoldsAllMutexes</name>(X) 1</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3BtreeMutexArrayEnter</name>(X)</cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3BtreeMutexArrayLeave</name>(X)</cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3BtreeMutexArrayInsert</name>(X,Y)</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* _BTREE_H_ */</comment>
</unit>
