<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="test_onefile.c" filename=""><comment type="block">/*
** 2007 September 14
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
**
** $Id: test_onefile.c,v 1.10 2008/12/09 01:32:03 drh Exp $
**
** OVERVIEW:
**
**   This file contains some example code demonstrating how the SQLite 
**   vfs feature can be used to have SQLite operate directly on an 
**   embedded media, without using an intermediate file system.
**
**   Because this is only a demo designed to run on a workstation, the
**   underlying media is simulated using a regular file-system file. The
**   size of the file is fixed when it is first created (default size 10 MB).
**   From SQLite's point of view, this space is used to store a single
**   database file and the journal file. 
**
**   Any statement journal created is stored in volatile memory obtained 
**   from sqlite3_malloc(). Any attempt to create a temporary database file 
**   will fail (SQLITE_IOERR). To prevent SQLite from attempting this,
**   it should be configured to store all temporary database files in 
**   main memory (see pragma "temp_store" or the SQLITE_TEMP_STORE compile 
**   time option).
**
** ASSUMPTIONS:
**
**   After it has been created, the blob file is accessed using the
**   following three functions only:
**
**       mediaRead();            - Read a 512 byte block from the file.
**       mediaWrite();           - Write a 512 byte block to the file.
**       mediaSync();            - Tell the media hardware to sync.
**
**   It is assumed that these can be easily implemented by any "real"
**   media vfs driver adapting this code.
**
** FILE FORMAT:
**
**   The basic principle is that the "database file" is stored at the
**   beginning of the 10 MB blob and grows in a forward direction. The 
**   "journal file" is stored at the end of the 10MB blob and grows
**   in the reverse direction. If, during a transaction, insufficient
**   space is available to expand either the journal or database file,
**   an SQLITE_FULL error is returned. The database file is never allowed
**   to consume more than 90% of the blob space. If SQLite tries to
**   create a file larger than this, SQLITE_FULL is returned.
**
**   No allowance is made for "wear-leveling", as is required by.
**   embedded devices in the absence of equivalent hardware features.
**
**   The first 512 block byte of the file is reserved for storing the
**   size of the "database file". It is updated as part of the sync()
**   operation. On startup, it can only be trusted if no journal file
**   exists. If a journal-file does exist, then it stores the real size
**   of the database region. The second and subsequent blocks store the 
**   actual database content.
**
**   The size of the "journal file" is not stored persistently in the 
**   file. When the system is running, the size of the journal file is
**   stored in volatile memory. When recovering from a crash, this vfs
**   reports a very large size for the journal file. The normal journal
**   header and checksum mechanisms serve to prevent SQLite from 
**   processing any data that lies past the logical end of the journal.
**
**   When SQLite calls OsDelete() to delete the journal file, the final
**   512 bytes of the blob (the area containing the first journal header)
**   are zeroed.
**
** LOCKING:
**
**   File locking is a no-op. Only one connection may be open at any one
**   time using this demo vfs.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;assert.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<comment type="block">/*
** Maximum pathname length supported by the fs backend.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>BLOCKSIZE</name> 512</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>BLOBSIZE</name> 10485760</cpp:define>

<comment type="block">/*
** Name used to identify this VFS.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>FS_VFS_NAME</name> "fs"</cpp:define>

<typedef>typedef <type><struct>struct <name>fs_real_file</name> fs_real_file;</struct></type></typedef>
<struct>struct <name>fs_real_file</name> <block>{<public type="default">
  <decl_stmt><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>zName</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nDatabase</name></decl>;</decl_stmt>              <comment type="block">/* Current size of database region */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nJournal</name></decl>;</decl_stmt>               <comment type="block">/* Current size of journal region */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nBlob</name></decl>;</decl_stmt>                  <comment type="block">/* Total size of allocated blob */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nRef</name></decl>;</decl_stmt>                   <comment type="block">/* Number of pointers to this structure */</comment>
  <decl_stmt><decl><type><name>fs_real_file</name> *</type><name>pNext</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>fs_real_file</name> **</type><name>ppThis</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<typedef>typedef <type><struct>struct <name>fs_file</name> fs_file;</struct></type></typedef>
<struct>struct <name>fs_file</name> <block>{<public type="default">
  <decl_stmt><decl><type><name>sqlite3_file</name></type> <name>base</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>eType</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>fs_real_file</name> *</type><name>pReal</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<typedef>typedef <type><struct>struct <name>tmp_file</name> tmp_file;</struct></type></typedef>
<struct>struct <name>tmp_file</name> <block>{<public type="default">
  <decl_stmt><decl><type><name>sqlite3_file</name></type> <name>base</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nSize</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nAlloc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>zAlloc</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<comment type="block">/* Values for fs_file.eType. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>DATABASE_FILE</name>   1</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>JOURNAL_FILE</name>    2</cpp:define>

<comment type="block">/*
** Method declarations for fs_file.
*/</comment>
<function_decl><type><name>static</name> <name>int</name></type> <name>fsClose</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>fsRead</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>, <param><decl><type><name>void</name>*</type></decl></param>, <param><decl><type><name>int</name></type> <name>iAmt</name></decl></param>, <param><decl><type><name>sqlite3_int64</name></type> <name>iOfst</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>fsWrite</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>, <param><decl><type><name>const</name> <name>void</name>*</type></decl></param>, <param><decl><type><name>int</name></type> <name>iAmt</name></decl></param>, <param><decl><type><name>sqlite3_int64</name></type> <name>iOfst</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>fsTruncate</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>, <param><decl><type><name>sqlite3_int64</name></type> <name>size</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>fsSync</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>, <param><decl><type><name>int</name></type> <name>flags</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>fsFileSize</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>, <param><decl><type><name>sqlite3_int64</name> *</type><name>pSize</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>fsLock</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>fsUnlock</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>fsCheckReservedLock</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>, <param><decl><type><name>int</name> *</type><name>pResOut</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>fsFileControl</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>, <param><decl><type><name>int</name></type> <name>op</name></decl></param>, <param><decl><type><name>void</name> *</type><name>pArg</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>fsSectorSize</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>fsDeviceCharacteristics</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/*
** Method declarations for tmp_file.
*/</comment>
<function_decl><type><name>static</name> <name>int</name></type> <name>tmpClose</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>tmpRead</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>, <param><decl><type><name>void</name>*</type></decl></param>, <param><decl><type><name>int</name></type> <name>iAmt</name></decl></param>, <param><decl><type><name>sqlite3_int64</name></type> <name>iOfst</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>tmpWrite</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>, <param><decl><type><name>const</name> <name>void</name>*</type></decl></param>, <param><decl><type><name>int</name></type> <name>iAmt</name></decl></param>, <param><decl><type><name>sqlite3_int64</name></type> <name>iOfst</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>tmpTruncate</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>, <param><decl><type><name>sqlite3_int64</name></type> <name>size</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>tmpSync</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>, <param><decl><type><name>int</name></type> <name>flags</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>tmpFileSize</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>, <param><decl><type><name>sqlite3_int64</name> *</type><name>pSize</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>tmpLock</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>tmpUnlock</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>tmpCheckReservedLock</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>, <param><decl><type><name>int</name> *</type><name>pResOut</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>tmpFileControl</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>, <param><decl><type><name>int</name></type> <name>op</name></decl></param>, <param><decl><type><name>void</name> *</type><name>pArg</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>tmpSectorSize</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>tmpDeviceCharacteristics</name><parameter_list>(<param><decl><type><name>sqlite3_file</name>*</type></decl></param>)</parameter_list>;</function_decl>

<comment type="block">/*
** Method declarations for fs_vfs.
*/</comment>
<function_decl><type><name>static</name> <name>int</name></type> <name>fsOpen</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name>*</type></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type></decl></param>, <param><decl><type><name>sqlite3_file</name>*</type></decl></param>, <param><decl><type><name>int</name></type></decl></param> , <param><decl><type><name>int</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>fsDelete</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name>*</type></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>zName</name></decl></param>, <param><decl><type><name>int</name></type> <name>syncDir</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>fsAccess</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name>*</type></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>zName</name></decl></param>, <param><decl><type><name>int</name></type> <name>flags</name></decl></param>, <param><decl><type><name>int</name> *</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>fsFullPathname</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name>*</type></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>zName</name></decl></param>, <param><decl><type><name>int</name></type> <name>nOut</name></decl></param>,<param><decl><type><name>char</name> *</type><name>zOut</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>void</name> *</type><name>fsDlOpen</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name>*</type></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>zFilename</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>void</name></type> <name>fsDlError</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name>*</type></decl></param>, <param><decl><type><name>int</name></type> <name>nByte</name></decl></param>, <param><decl><type><name>char</name> *</type><name>zErrMsg</name></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>static</name></type> <name>void</name> <argument_list>(<argument><expr>*<call><name>fsDlSym</name><argument_list>(<argument><expr><name>sqlite3_vfs</name>*</expr></argument>,<argument><expr><name>void</name>*</expr></argument>, <argument><expr><name>const</name> <name>char</name> *<name>zSymbol</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list></decl>;</decl_stmt>
<function_decl><type><name>static</name> <name>void</name></type> <name>fsDlClose</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name>*</type></decl></param>, <param><decl><type><name>void</name>*</type></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>fsRandomness</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name>*</type></decl></param>, <param><decl><type><name>int</name></type> <name>nByte</name></decl></param>, <param><decl><type><name>char</name> *</type><name>zOut</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>fsSleep</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name>*</type></decl></param>, <param><decl><type><name>int</name></type> <name>microseconds</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>int</name></type> <name>fsCurrentTime</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name>*</type></decl></param>, <param><decl><type><name>double</name>*</type></decl></param>)</parameter_list>;</function_decl>


<typedef>typedef <type><struct>struct <name>fs_vfs_t</name> fs_vfs_t;</struct></type></typedef>
<struct>struct <name>fs_vfs_t</name> <block>{<public type="default">
  <decl_stmt><decl><type><name>sqlite3_vfs</name></type> <name>base</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>fs_real_file</name> *</type><name>pFileList</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> *</type><name>pParent</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<decl_stmt><decl><type><name>static</name> <name>fs_vfs_t</name></type> <name>fs_vfs</name> =<init> <expr><block>{
  <expr><block>{
    <expr>1</expr>,                                          <comment type="block">/* iVersion */</comment>
    <expr>0</expr>,                                          <comment type="block">/* szOsFile */</comment>
    <expr>0</expr>,                                          <comment type="block">/* mxPathname */</comment>
    <expr>0</expr>,                                          <comment type="block">/* pNext */</comment>
    <expr><name>FS_VFS_NAME</name></expr>,                                <comment type="block">/* zName */</comment>
    <expr>0</expr>,                                          <comment type="block">/* pAppData */</comment>
    <expr><name>fsOpen</name></expr>,                                     <comment type="block">/* xOpen */</comment>
    <expr><name>fsDelete</name></expr>,                                   <comment type="block">/* xDelete */</comment>
    <expr><name>fsAccess</name></expr>,                                   <comment type="block">/* xAccess */</comment>
    <expr><name>fsFullPathname</name></expr>,                             <comment type="block">/* xFullPathname */</comment>
    <expr><name>fsDlOpen</name></expr>,                                   <comment type="block">/* xDlOpen */</comment>
    <expr><name>fsDlError</name></expr>,                                  <comment type="block">/* xDlError */</comment>
    <expr><name>fsDlSym</name></expr>,                                    <comment type="block">/* xDlSym */</comment>
    <expr><name>fsDlClose</name></expr>,                                  <comment type="block">/* xDlClose */</comment>
    <expr><name>fsRandomness</name></expr>,                               <comment type="block">/* xRandomness */</comment>
    <expr><name>fsSleep</name></expr>,                                    <comment type="block">/* xSleep */</comment>
    <expr><name>fsCurrentTime</name></expr>                               <comment type="block">/* xCurrentTime */</comment>
  }</block></expr>, 
  <expr>0</expr>,                                            <comment type="block">/* pFileList */</comment>
  <expr>0</expr>                                             <comment type="block">/* pParent */</comment>
}</block></expr></init></decl>;</decl_stmt>

<decl_stmt><decl><type><name>static</name> <name>sqlite3_io_methods</name></type> <name>fs_io_methods</name> =<init> <expr><block>{
  <expr>1</expr>,                            <comment type="block">/* iVersion */</comment>
  <expr><name>fsClose</name></expr>,                      <comment type="block">/* xClose */</comment>
  <expr><name>fsRead</name></expr>,                       <comment type="block">/* xRead */</comment>
  <expr><name>fsWrite</name></expr>,                      <comment type="block">/* xWrite */</comment>
  <expr><name>fsTruncate</name></expr>,                   <comment type="block">/* xTruncate */</comment>
  <expr><name>fsSync</name></expr>,                       <comment type="block">/* xSync */</comment>
  <expr><name>fsFileSize</name></expr>,                   <comment type="block">/* xFileSize */</comment>
  <expr><name>fsLock</name></expr>,                       <comment type="block">/* xLock */</comment>
  <expr><name>fsUnlock</name></expr>,                     <comment type="block">/* xUnlock */</comment>
  <expr><name>fsCheckReservedLock</name></expr>,          <comment type="block">/* xCheckReservedLock */</comment>
  <expr><name>fsFileControl</name></expr>,                <comment type="block">/* xFileControl */</comment>
  <expr><name>fsSectorSize</name></expr>,                 <comment type="block">/* xSectorSize */</comment>
  <expr><name>fsDeviceCharacteristics</name></expr>       <comment type="block">/* xDeviceCharacteristics */</comment>
}</block></expr></init></decl>;</decl_stmt>


<decl_stmt><decl><type><name>static</name> <name>sqlite3_io_methods</name></type> <name>tmp_io_methods</name> =<init> <expr><block>{
  <expr>1</expr>,                            <comment type="block">/* iVersion */</comment>
  <expr><name>tmpClose</name></expr>,                     <comment type="block">/* xClose */</comment>
  <expr><name>tmpRead</name></expr>,                      <comment type="block">/* xRead */</comment>
  <expr><name>tmpWrite</name></expr>,                     <comment type="block">/* xWrite */</comment>
  <expr><name>tmpTruncate</name></expr>,                  <comment type="block">/* xTruncate */</comment>
  <expr><name>tmpSync</name></expr>,                      <comment type="block">/* xSync */</comment>
  <expr><name>tmpFileSize</name></expr>,                  <comment type="block">/* xFileSize */</comment>
  <expr><name>tmpLock</name></expr>,                      <comment type="block">/* xLock */</comment>
  <expr><name>tmpUnlock</name></expr>,                    <comment type="block">/* xUnlock */</comment>
  <expr><name>tmpCheckReservedLock</name></expr>,         <comment type="block">/* xCheckReservedLock */</comment>
  <expr><name>tmpFileControl</name></expr>,               <comment type="block">/* xFileControl */</comment>
  <expr><name>tmpSectorSize</name></expr>,                <comment type="block">/* xSectorSize */</comment>
  <expr><name>tmpDeviceCharacteristics</name></expr>      <comment type="block">/* xDeviceCharacteristics */</comment>
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/* Useful macros used in several places */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>MIN</name>(x,y) ((x)&lt;(y)?(x):(y))</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>MAX</name>(x,y) ((x)&gt;(y)?(x):(y))</cpp:define>


<comment type="block">/*
** Close a tmp-file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>tmpClose</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>tmp_file</name> *</type><name>pTmp</name> =<init> <expr>(<name>tmp_file</name> *)<name>pFile</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pTmp</name>-&gt;<name>zAlloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Read data from a tmp-file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>tmpRead</name><parameter_list>(
  <param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>, 
  <param><decl><type><name>void</name> *</type><name>zBuf</name></decl></param>, 
  <param><decl><type><name>int</name></type> <name>iAmt</name></decl></param>, 
  <param><decl><type><name>sqlite_int64</name></type> <name>iOfst</name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>tmp_file</name> *</type><name>pTmp</name> =<init> <expr>(<name>tmp_file</name> *)<name>pFile</name></expr></init></decl>;</decl_stmt>
  <if>if<condition>( <expr>(<name>iAmt</name>+<name>iOfst</name>)&gt;<name>pTmp</name>-&gt;<name>nSize</name></expr> )</condition><then><block>{
    <return>return <expr><name>SQLITE_IOERR_SHORT_READ</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>, <argument><expr>&amp;<name>pTmp</name>-&gt;<name><name>zAlloc</name><index>[<expr><name>iOfst</name></expr>]</index></name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Write data to a tmp-file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>tmpWrite</name><parameter_list>(
  <param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>, 
  <param><decl><type><name>const</name> <name>void</name> *</type><name>zBuf</name></decl></param>, 
  <param><decl><type><name>int</name></type> <name>iAmt</name></decl></param>, 
  <param><decl><type><name>sqlite_int64</name></type> <name>iOfst</name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>tmp_file</name> *</type><name>pTmp</name> =<init> <expr>(<name>tmp_file</name> *)<name>pFile</name></expr></init></decl>;</decl_stmt>
  <if>if<condition>( <expr>(<name>iAmt</name>+<name>iOfst</name>)&gt;<name>pTmp</name>-&gt;<name>nAlloc</name></expr> )</condition><then><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>nNew</name> =<init> <expr>2*(<name>iAmt</name>+<name>iOfst</name>+<name>pTmp</name>-&gt;<name>nAlloc</name>)</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>zNew</name> =<init> <expr><call><name>sqlite3_realloc</name><argument_list>(<argument><expr><name>pTmp</name>-&gt;<name>zAlloc</name></expr></argument>, <argument><expr><name>nNew</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if<condition>( <expr>!<name>zNew</name></expr> )</condition><then><block>{
      <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>pTmp</name>-&gt;<name>zAlloc</name> = <name>zNew</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pTmp</name>-&gt;<name>nAlloc</name> = <name>nNew</name></expr>;</expr_stmt>
  }</block></then></if>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>&amp;<name>pTmp</name>-&gt;<name><name>zAlloc</name><index>[<expr><name>iOfst</name></expr>]</index></name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pTmp</name>-&gt;<name>nSize</name> = <call><name>MAX</name><argument_list>(<argument><expr><name>pTmp</name>-&gt;<name>nSize</name></expr></argument>, <argument><expr><name>iOfst</name>+<name>iAmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Truncate a tmp-file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>tmpTruncate</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>, <param><decl><type><name>sqlite_int64</name></type> <name>size</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>tmp_file</name> *</type><name>pTmp</name> =<init> <expr>(<name>tmp_file</name> *)<name>pFile</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>pTmp</name>-&gt;<name>nSize</name> = <call><name>MIN</name><argument_list>(<argument><expr><name>pTmp</name>-&gt;<name>nSize</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Sync a tmp-file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>tmpSync</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>, <param><decl><type><name>int</name></type> <name>flags</name></decl></param>)</parameter_list><block>{
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Return the current file-size of a tmp-file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>tmpFileSize</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>, <param><decl><type><name>sqlite_int64</name> *</type><name>pSize</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>tmp_file</name> *</type><name>pTmp</name> =<init> <expr>(<name>tmp_file</name> *)<name>pFile</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr>*<name>pSize</name> = <name>pTmp</name>-&gt;<name>nSize</name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Lock a tmp-file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>tmpLock</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>, <param><decl><type><name>int</name></type> <name>eLock</name></decl></param>)</parameter_list><block>{
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Unlock a tmp-file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>tmpUnlock</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>, <param><decl><type><name>int</name></type> <name>eLock</name></decl></param>)</parameter_list><block>{
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Check if another file-handle holds a RESERVED lock on a tmp-file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>tmpCheckReservedLock</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>, <param><decl><type><name>int</name> *</type><name>pResOut</name></decl></param>)</parameter_list><block>{
  <expr_stmt><expr>*<name>pResOut</name> = 0</expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** File control method. For custom operations on a tmp-file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>tmpFileControl</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>, <param><decl><type><name>int</name></type> <name>op</name></decl></param>, <param><decl><type><name>void</name> *</type><name>pArg</name></decl></param>)</parameter_list><block>{
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Return the sector-size in bytes for a tmp-file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>tmpSectorSize</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>)</parameter_list><block>{
  <return>return <expr>0</expr>;</return>
}</block></function>

<comment type="block">/*
** Return the device characteristic flags supported by a tmp-file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>tmpDeviceCharacteristics</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>)</parameter_list><block>{
  <return>return <expr>0</expr>;</return>
}</block></function>

<comment type="block">/*
** Close an fs-file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>fsClose</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> =<init> <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>fs_file</name> *</type><name>p</name> =<init> <expr>(<name>fs_file</name> *)<name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>fs_real_file</name> *</type><name>pReal</name> =<init> <expr><name>p</name>-&gt;<name>pReal</name></expr></init></decl>;</decl_stmt>

  <comment type="block">/* Decrement the real_file ref-count. */</comment>
  <expr_stmt><expr><name>pReal</name>-&gt;<name>nRef</name>--</expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pReal</name>-&gt;<name>nRef</name>&gt;=0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* When the ref-count reaches 0, destroy the structure */</comment>
  <if>if<condition>( <expr><name>pReal</name>-&gt;<name>nRef</name>==0</expr> )</condition><then><block>{
    <expr_stmt><expr>*<name>pReal</name>-&gt;<name>ppThis</name> = <name>pReal</name>-&gt;<name>pNext</name></expr>;</expr_stmt>
    <if>if<condition>( <expr><name>pReal</name>-&gt;<name>pNext</name></expr> )</condition><then><block>{
      <expr_stmt><expr><name>pReal</name>-&gt;<name>pNext</name>-&gt;<name>ppThis</name> = <name>pReal</name>-&gt;<name>ppThis</name></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>rc</name> = <name>pReal</name>-&gt;<name>pFile</name>-&gt;<name>pMethods</name>-&gt;<call><name>xClose</name><argument_list>(<argument><expr><name>pReal</name>-&gt;<name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pReal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>rc</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Read data from an fs-file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>fsRead</name><parameter_list>(
  <param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>, 
  <param><decl><type><name>void</name> *</type><name>zBuf</name></decl></param>, 
  <param><decl><type><name>int</name></type> <name>iAmt</name></decl></param>, 
  <param><decl><type><name>sqlite_int64</name></type> <name>iOfst</name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> =<init> <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>fs_file</name> *</type><name>p</name> =<init> <expr>(<name>fs_file</name> *)<name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>fs_real_file</name> *</type><name>pReal</name> =<init> <expr><name>p</name>-&gt;<name>pReal</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_file</name> *</type><name>pF</name> =<init> <expr><name>pReal</name>-&gt;<name>pFile</name></expr></init></decl>;</decl_stmt>

  <if>if<condition>( <expr>(<name>p</name>-&gt;<name>eType</name>==<name>DATABASE_FILE</name> &amp;&amp; (<name>iAmt</name>+<name>iOfst</name>)&gt;<name>pReal</name>-&gt;<name>nDatabase</name>)
   || (<name>p</name>-&gt;<name>eType</name>==<name>JOURNAL_FILE</name> &amp;&amp; (<name>iAmt</name>+<name>iOfst</name>)&gt;<name>pReal</name>-&gt;<name>nJournal</name>)</expr>
  )</condition><then><block>{
    <expr_stmt><expr><name>rc</name> = <name>SQLITE_IOERR_SHORT_READ</name></expr>;</expr_stmt>
  }</block></then><else>else <if>if<condition>( <expr><name>p</name>-&gt;<name>eType</name>==<name>DATABASE_FILE</name></expr> )</condition><then><block>{
    <expr_stmt><expr><name>rc</name> = <name>pF</name>-&gt;<name>pMethods</name>-&gt;<call><name>xRead</name><argument_list>(<argument><expr><name>pF</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>, <argument><expr><name>iOfst</name>+<name>BLOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then><else>else<block>{
    <comment type="block">/* Journal file. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>iRem</name> =<init> <expr><name>iAmt</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iBuf</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name> =<init> <expr><name>iOfst</name></expr></init></decl>;</decl_stmt>
    <while>while<condition>( <expr><name>iRem</name>&gt;0 &amp;&amp; <name>rc</name>==<name>SQLITE_OK</name></expr> )</condition><block>{
      <decl_stmt><decl><type><name>int</name></type> <name>iRealOff</name> =<init> <expr><name>pReal</name>-&gt;<name>nBlob</name> - <name>BLOCKSIZE</name>*((<name>ii</name>/<name>BLOCKSIZE</name>)+1) + <name>ii</name>%<name>BLOCKSIZE</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>iRealAmt</name> =<init> <expr><call><name>MIN</name><argument_list>(<argument><expr><name>iRem</name></expr></argument>, <argument><expr><name>BLOCKSIZE</name> - (<name>iRealOff</name>%<name>BLOCKSIZE</name>)</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <expr_stmt><expr><name>rc</name> = <name>pF</name>-&gt;<name>pMethods</name>-&gt;<call><name>xRead</name><argument_list>(<argument><expr><name>pF</name></expr></argument>, <argument><expr>&amp;((<name>char</name> *)<name>zBuf</name>)[<name>iBuf</name>]</expr></argument>, <argument><expr><name>iRealAmt</name></expr></argument>, <argument><expr><name>iRealOff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>ii</name> += <name>iRealAmt</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>iBuf</name> += <name>iRealAmt</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>iRem</name> -= <name>iRealAmt</name></expr>;</expr_stmt>
    }</block></while>
  }</block></else></if></else></if>

  <return>return <expr><name>rc</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Write data to an fs-file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>fsWrite</name><parameter_list>(
  <param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>, 
  <param><decl><type><name>const</name> <name>void</name> *</type><name>zBuf</name></decl></param>, 
  <param><decl><type><name>int</name></type> <name>iAmt</name></decl></param>, 
  <param><decl><type><name>sqlite_int64</name></type> <name>iOfst</name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> =<init> <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>fs_file</name> *</type><name>p</name> =<init> <expr>(<name>fs_file</name> *)<name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>fs_real_file</name> *</type><name>pReal</name> =<init> <expr><name>p</name>-&gt;<name>pReal</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_file</name> *</type><name>pF</name> =<init> <expr><name>pReal</name>-&gt;<name>pFile</name></expr></init></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>p</name>-&gt;<name>eType</name>==<name>DATABASE_FILE</name></expr> )</condition><then><block>{
    <if>if<condition>( <expr>(<name>iAmt</name>+<name>iOfst</name>+<name>BLOCKSIZE</name>)&gt;(<name>pReal</name>-&gt;<name>nBlob</name>-<name>pReal</name>-&gt;<name>nJournal</name>)</expr> )</condition><then><block>{
      <expr_stmt><expr><name>rc</name> = <name>SQLITE_FULL</name></expr>;</expr_stmt>
    }</block></then><else>else<block>{
      <expr_stmt><expr><name>rc</name> = <name>pF</name>-&gt;<name>pMethods</name>-&gt;<call><name>xWrite</name><argument_list>(<argument><expr><name>pF</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>iAmt</name></expr></argument>, <argument><expr><name>iOfst</name>+<name>BLOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if<condition>( <expr><name>rc</name>==<name>SQLITE_OK</name></expr> )</condition><then><block>{
        <expr_stmt><expr><name>pReal</name>-&gt;<name>nDatabase</name> = <call><name>MAX</name><argument_list>(<argument><expr><name>pReal</name>-&gt;<name>nDatabase</name></expr></argument>, <argument><expr><name>iAmt</name>+<name>iOfst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></else></if>
  }</block></then><else>else<block>{
    <comment type="block">/* Journal file. */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>iRem</name> =<init> <expr><name>iAmt</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>iBuf</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>ii</name> =<init> <expr><name>iOfst</name></expr></init></decl>;</decl_stmt>
    <while>while<condition>( <expr><name>iRem</name>&gt;0 &amp;&amp; <name>rc</name>==<name>SQLITE_OK</name></expr> )</condition><block>{
      <decl_stmt><decl><type><name>int</name></type> <name>iRealOff</name> =<init> <expr><name>pReal</name>-&gt;<name>nBlob</name> - <name>BLOCKSIZE</name>*((<name>ii</name>/<name>BLOCKSIZE</name>)+1) + <name>ii</name>%<name>BLOCKSIZE</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>iRealAmt</name> =<init> <expr><call><name>MIN</name><argument_list>(<argument><expr><name>iRem</name></expr></argument>, <argument><expr><name>BLOCKSIZE</name> - (<name>iRealOff</name>%<name>BLOCKSIZE</name>)</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

      <if>if<condition>( <expr><name>iRealOff</name>&lt;(<name>pReal</name>-&gt;<name>nDatabase</name>+<name>BLOCKSIZE</name>)</expr> )</condition><then><block>{
        <expr_stmt><expr><name>rc</name> = <name>SQLITE_FULL</name></expr>;</expr_stmt>
      }</block></then><else>else<block>{
        <expr_stmt><expr><name>rc</name> = <name>pF</name>-&gt;<name>pMethods</name>-&gt;<call><name>xWrite</name><argument_list>(<argument><expr><name>pF</name></expr></argument>, <argument><expr>&amp;((<name>char</name> *)<name>zBuf</name>)[<name>iBuf</name>]</expr></argument>, <argument><expr><name>iRealAmt</name></expr></argument>,<argument><expr><name>iRealOff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>ii</name> += <name>iRealAmt</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>iBuf</name> += <name>iRealAmt</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>iRem</name> -= <name>iRealAmt</name></expr>;</expr_stmt>
      }</block></else></if>
    }</block></while>
    <if>if<condition>( <expr><name>rc</name>==<name>SQLITE_OK</name></expr> )</condition><then><block>{
      <expr_stmt><expr><name>pReal</name>-&gt;<name>nJournal</name> = <call><name>MAX</name><argument_list>(<argument><expr><name>pReal</name>-&gt;<name>nJournal</name></expr></argument>, <argument><expr><name>iAmt</name>+<name>iOfst</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></else></if>

  <return>return <expr><name>rc</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Truncate an fs-file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>fsTruncate</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>, <param><decl><type><name>sqlite_int64</name></type> <name>size</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>fs_file</name> *</type><name>p</name> =<init> <expr>(<name>fs_file</name> *)<name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>fs_real_file</name> *</type><name>pReal</name> =<init> <expr><name>p</name>-&gt;<name>pReal</name></expr></init></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>p</name>-&gt;<name>eType</name>==<name>DATABASE_FILE</name></expr> )</condition><then><block>{
    <expr_stmt><expr><name>pReal</name>-&gt;<name>nDatabase</name> = <call><name>MIN</name><argument_list>(<argument><expr><name>pReal</name>-&gt;<name>nDatabase</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then><else>else<block>{
    <expr_stmt><expr><name>pReal</name>-&gt;<name>nJournal</name> = <call><name>MIN</name><argument_list>(<argument><expr><name>pReal</name>-&gt;<name>nJournal</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Sync an fs-file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>fsSync</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>, <param><decl><type><name>int</name></type> <name>flags</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>fs_file</name> *</type><name>p</name> =<init> <expr>(<name>fs_file</name> *)<name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>fs_real_file</name> *</type><name>pReal</name> =<init> <expr><name>p</name>-&gt;<name>pReal</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_file</name> *</type><name>pRealFile</name> =<init> <expr><name>pReal</name>-&gt;<name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> =<init> <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>p</name>-&gt;<name>eType</name>==<name>DATABASE_FILE</name></expr> )</condition><then><block>{
    <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>zSize</name><index>[<expr>4</expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>zSize</name><index>[<expr>0</expr>]</index></name> = (<name>pReal</name>-&gt;<name>nDatabase</name>&amp;0xFF000000)&gt;&gt;24</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>zSize</name><index>[<expr>1</expr>]</index></name> = (<name>pReal</name>-&gt;<name>nDatabase</name>&amp;0x00FF0000)&gt;&gt;16</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>zSize</name><index>[<expr>2</expr>]</index></name> = (<name>pReal</name>-&gt;<name>nDatabase</name>&amp;0x0000FF00)&gt;&gt;8</expr>;</expr_stmt>
    <expr_stmt><expr><name><name>zSize</name><index>[<expr>3</expr>]</index></name> = (<name>pReal</name>-&gt;<name>nDatabase</name>&amp;0x000000FF)</expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> = <name>pRealFile</name>-&gt;<name>pMethods</name>-&gt;<call><name>xWrite</name><argument_list>(<argument><expr><name>pRealFile</name></expr></argument>, <argument><expr><name>zSize</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <if>if<condition>( <expr><name>rc</name>==<name>SQLITE_OK</name></expr> )</condition><then><block>{
    <expr_stmt><expr><name>rc</name> = <name>pRealFile</name>-&gt;<name>pMethods</name>-&gt;<call><name>xSync</name><argument_list>(<argument><expr><name>pRealFile</name></expr></argument>, <argument><expr><name>flags</name>&amp;(~<name>SQLITE_SYNC_DATAONLY</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>rc</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Return the current file-size of an fs-file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>fsFileSize</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>, <param><decl><type><name>sqlite_int64</name> *</type><name>pSize</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>fs_file</name> *</type><name>p</name> =<init> <expr>(<name>fs_file</name> *)<name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>fs_real_file</name> *</type><name>pReal</name> =<init> <expr><name>p</name>-&gt;<name>pReal</name></expr></init></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>p</name>-&gt;<name>eType</name>==<name>DATABASE_FILE</name></expr> )</condition><then><block>{
    <expr_stmt><expr>*<name>pSize</name> = <name>pReal</name>-&gt;<name>nDatabase</name></expr>;</expr_stmt>
  }</block></then><else>else<block>{
    <expr_stmt><expr>*<name>pSize</name> = <name>pReal</name>-&gt;<name>nJournal</name></expr>;</expr_stmt>
  }</block></else></if>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Lock an fs-file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>fsLock</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>, <param><decl><type><name>int</name></type> <name>eLock</name></decl></param>)</parameter_list><block>{
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Unlock an fs-file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>fsUnlock</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>, <param><decl><type><name>int</name></type> <name>eLock</name></decl></param>)</parameter_list><block>{
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Check if another file-handle holds a RESERVED lock on an fs-file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>fsCheckReservedLock</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>, <param><decl><type><name>int</name> *</type><name>pResOut</name></decl></param>)</parameter_list><block>{
  <expr_stmt><expr>*<name>pResOut</name> = 0</expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** File control method. For custom operations on an fs-file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>fsFileControl</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>, <param><decl><type><name>int</name></type> <name>op</name></decl></param>, <param><decl><type><name>void</name> *</type><name>pArg</name></decl></param>)</parameter_list><block>{
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Return the sector-size in bytes for an fs-file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>fsSectorSize</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>)</parameter_list><block>{
  <return>return <expr><name>BLOCKSIZE</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Return the device characteristic flags supported by an fs-file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>fsDeviceCharacteristics</name><parameter_list>(<param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>)</parameter_list><block>{
  <return>return <expr>0</expr>;</return>
}</block></function>

<comment type="block">/*
** Open an fs file handle.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>fsOpen</name><parameter_list>(
  <param><decl><type><name>sqlite3_vfs</name> *</type><name>pVfs</name></decl></param>,
  <param><decl><type><name>const</name> <name>char</name> *</type><name>zName</name></decl></param>,
  <param><decl><type><name>sqlite3_file</name> *</type><name>pFile</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>flags</name></decl></param>,
  <param><decl><type><name>int</name> *</type><name>pOutFlags</name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>fs_vfs_t</name> *</type><name>pFsVfs</name> =<init> <expr>(<name>fs_vfs_t</name> *)<name>pVfs</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>fs_file</name> *</type><name>p</name> =<init> <expr>(<name>fs_file</name> *)<name>pFile</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>fs_real_file</name> *</type><name>pReal</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>eType</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nName</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> =<init> <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>

  <if>if<condition>( <expr>0==(<name>flags</name>&amp;(<name>SQLITE_OPEN_MAIN_DB</name>|<name>SQLITE_OPEN_MAIN_JOURNAL</name>))</expr> )</condition><then><block>{
    <decl_stmt><decl><type><name>tmp_file</name> *</type><name>p</name> =<init> <expr>(<name>tmp_file</name> *)<name>pFile</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name>-&gt;<name>base</name>.<name>pMethods</name> = &amp;<name>tmp_io_methods</name></expr>;</expr_stmt>
    <return>return <expr><name>SQLITE_OK</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><name>eType</name> = ((<name>flags</name>&amp;(<name>SQLITE_OPEN_MAIN_DB</name>))?<name>DATABASE_FILE</name>:<name>JOURNAL_FILE</name>)</expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name>-&gt;<name>base</name>.<name>pMethods</name> = &amp;<name>fs_io_methods</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name>-&gt;<name>eType</name> = <name>eType</name></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr>"-journal"</expr></argument>)</argument_list></call>==8</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>nName</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>zName</name></expr></argument>)</argument_list></call>-((<name>eType</name>==<name>JOURNAL_FILE</name>)?8:0)</expr>;</expr_stmt>
  <expr_stmt><expr><name>pReal</name>=<name>pFsVfs</name>-&gt;<name>pFileList</name></expr>;</expr_stmt> 
  <for>for(<init>;</init> <condition><expr><name>pReal</name> &amp;&amp; <call><name>strncmp</name><argument_list>(<argument><expr><name>pReal</name>-&gt;<name>zName</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><name>nName</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>pReal</name>=<name>pReal</name>-&gt;<name>pNext</name></expr></incr>)<empty_stmt>;</empty_stmt></for>

  <if>if<condition>( <expr>!<name>pReal</name></expr> )</condition><then><block>{
    <decl_stmt><decl><type><name>sqlite3_int64</name></type> <name>size</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sqlite3_file</name> *</type><name>pRealFile</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sqlite3_vfs</name> *</type><name>pParent</name> =<init> <expr><name>pFsVfs</name>-&gt;<name>pParent</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>eType</name>==<name>DATABASE_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <expr_stmt><expr><name>pReal</name> = (<name>fs_real_file</name> *)<call><name>sqlite3_malloc</name><argument_list>(<argument><expr><call><name>sizeof</name><argument_list>(<argument><expr>*<name>pReal</name></expr></argument>)</argument_list></call>+<name>pParent</name>-&gt;<name>szOsFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>( <expr>!<name>pReal</name></expr> )</condition><then><block>{
      <expr_stmt><expr><name>rc</name> = <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
      <goto>goto <name>open_out</name>;</goto>
    }</block></then></if>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>pReal</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr>*<name>pReal</name></expr></argument>)</argument_list></call>+<name>pParent</name>-&gt;<name>szOsFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pReal</name>-&gt;<name>zName</name> = <name>zName</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>pReal</name>-&gt;<name>pFile</name> = (<name>sqlite3_file</name> *)(&amp;<name><name>pReal</name><index>[<expr>1</expr>]</index></name>)</expr>;</expr_stmt>

    <expr_stmt><expr><name>rc</name> = <name>pParent</name>-&gt;<call><name>xOpen</name><argument_list>(<argument><expr><name>pParent</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr><name>pReal</name>-&gt;<name>pFile</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>pOutFlags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_OK</name></expr> )</condition><then><block>{
      <goto>goto <name>open_out</name>;</goto>
    }</block></then></if>
    <expr_stmt><expr><name>pRealFile</name> = <name>pReal</name>-&gt;<name>pFile</name></expr>;</expr_stmt>

    <expr_stmt><expr><name>rc</name> = <name>pRealFile</name>-&gt;<name>pMethods</name>-&gt;<call><name>xFileSize</name><argument_list>(<argument><expr><name>pRealFile</name></expr></argument>, <argument><expr>&amp;<name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_OK</name></expr> )</condition><then><block>{
      <goto>goto <name>open_out</name>;</goto>
    }</block></then></if>
    <if>if<condition>( <expr><name>size</name>==0</expr> )</condition><then><block>{
      <expr_stmt><expr><name>rc</name> = <name>pRealFile</name>-&gt;<name>pMethods</name>-&gt;<call><name>xWrite</name><argument_list>(<argument><expr><name>pRealFile</name></expr></argument>, <argument><expr>"\0"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>BLOBSIZE</name>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pReal</name>-&gt;<name>nBlob</name> = <name>BLOBSIZE</name></expr>;</expr_stmt>
    }</block></then><else>else<block>{
      <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>zS</name><index>[<expr>4</expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><name>pReal</name>-&gt;<name>nBlob</name> = <name>size</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> = <name>pRealFile</name>-&gt;<name>pMethods</name>-&gt;<call><name>xRead</name><argument_list>(<argument><expr><name>pRealFile</name></expr></argument>, <argument><expr><name>zS</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pReal</name>-&gt;<name>nDatabase</name> = (<name><name>zS</name><index>[<expr>0</expr>]</index></name>&lt;&lt;24)+(<name><name>zS</name><index>[<expr>1</expr>]</index></name>&lt;&lt;16)+(<name><name>zS</name><index>[<expr>2</expr>]</index></name>&lt;&lt;8)+<name><name>zS</name><index>[<expr>3</expr>]</index></name></expr>;</expr_stmt>
      <if>if<condition>( <expr><name>rc</name>==<name>SQLITE_OK</name></expr> )</condition><then><block>{
        <expr_stmt><expr><name>rc</name> = <name>pRealFile</name>-&gt;<name>pMethods</name>-&gt;<call><name>xRead</name><argument_list>(<argument><expr><name>pRealFile</name></expr></argument>, <argument><expr><name>zS</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><name>pReal</name>-&gt;<name>nBlob</name>-4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>( <expr><name><name>zS</name><index>[<expr>0</expr>]</index></name> || <name><name>zS</name><index>[<expr>1</expr>]</index></name> || <name><name>zS</name><index>[<expr>2</expr>]</index></name> || <name><name>zS</name><index>[<expr>3</expr>]</index></name></expr> )</condition><then><block>{
          <expr_stmt><expr><name>pReal</name>-&gt;<name>nJournal</name> = <name>pReal</name>-&gt;<name>nBlob</name></expr>;</expr_stmt>
        }</block></then></if>
      }</block></then></if>
    }</block></else></if>

    <if>if<condition>( <expr><name>rc</name>==<name>SQLITE_OK</name></expr> )</condition><then><block>{
      <expr_stmt><expr><name>pReal</name>-&gt;<name>pNext</name> = <name>pFsVfs</name>-&gt;<name>pFileList</name></expr>;</expr_stmt>
      <if>if<condition>( <expr><name>pReal</name>-&gt;<name>pNext</name></expr> )</condition><then><block>{
        <expr_stmt><expr><name>pReal</name>-&gt;<name>pNext</name>-&gt;<name>ppThis</name> = &amp;<name>pReal</name>-&gt;<name>pNext</name></expr>;</expr_stmt>
      }</block></then></if>
      <expr_stmt><expr><name>pReal</name>-&gt;<name>ppThis</name> = &amp;<name>pFsVfs</name>-&gt;<name>pFileList</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>pFsVfs</name>-&gt;<name>pFileList</name> = <name>pReal</name></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>

<label><name>open_out</name>:</label>
  <if>if<condition>( <expr><name>pReal</name></expr> )</condition><then><block>{
    <if>if<condition>( <expr><name>rc</name>==<name>SQLITE_OK</name></expr> )</condition><then><block>{
      <expr_stmt><expr><name>p</name>-&gt;<name>pReal</name> = <name>pReal</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>pReal</name>-&gt;<name>nRef</name>++</expr>;</expr_stmt>
    }</block></then><else>else<block>{
      <if>if<condition>( <expr><name>pReal</name>-&gt;<name>pFile</name>-&gt;<name>pMethods</name></expr> )</condition><then><block>{
        <expr_stmt><expr><name>pReal</name>-&gt;<name>pFile</name>-&gt;<name>pMethods</name>-&gt;<call><name>xClose</name><argument_list>(<argument><expr><name>pReal</name>-&gt;<name>pFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>pReal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></then></if>
  <return>return <expr><name>rc</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Delete the file located at zPath. If the dirSync argument is true,
** ensure the file-system modifications are synced to disk before
** returning.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>fsDelete</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name> *</type><name>pVfs</name></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>zPath</name></decl></param>, <param><decl><type><name>int</name></type> <name>dirSync</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> =<init> <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>fs_vfs_t</name> *</type><name>pFsVfs</name> =<init> <expr>(<name>fs_vfs_t</name> *)<name>pVfs</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>fs_real_file</name> *</type><name>pReal</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_file</name> *</type><name>pF</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nName</name> =<init> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call> - 8</expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr>"-journal"</expr></argument>)</argument_list></call>==8</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>strcmp</name><argument_list>(<argument><expr>"-journal"</expr></argument>, <argument><expr>&amp;<name><name>zPath</name><index>[<expr><name>nName</name></expr>]</index></name></expr></argument>)</argument_list></call>==0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pReal</name> = <name>pFsVfs</name>-&gt;<name>pFileList</name></expr>;</expr_stmt> 
  <for>for(<init>;</init> <condition><expr><name>pReal</name> &amp;&amp; <call><name>strncmp</name><argument_list>(<argument><expr><name>pReal</name>-&gt;<name>zName</name></expr></argument>, <argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>nName</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>pReal</name>=<name>pReal</name>-&gt;<name>pNext</name></expr></incr>)<empty_stmt>;</empty_stmt></for>
  <if>if<condition>( <expr><name>pReal</name></expr> )</condition><then><block>{
    <expr_stmt><expr><name>pF</name> = <name>pReal</name>-&gt;<name>pFile</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> = <name>pF</name>-&gt;<name>pMethods</name>-&gt;<call><name>xWrite</name><argument_list>(<argument><expr><name>pF</name></expr></argument>, <argument><expr>"\0\0\0\0"</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><name>pReal</name>-&gt;<name>nBlob</name>-<name>BLOCKSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>( <expr><name>rc</name>==<name>SQLITE_OK</name></expr> )</condition><then><block>{
      <expr_stmt><expr><name>pReal</name>-&gt;<name>nJournal</name> = 0</expr>;</expr_stmt>
    }</block></then></if>
  }</block></then></if>
  <return>return <expr><name>rc</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Test for access permissions. Return true if the requested permission
** is available, or false otherwise.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>fsAccess</name><parameter_list>(
  <param><decl><type><name>sqlite3_vfs</name> *</type><name>pVfs</name></decl></param>, 
  <param><decl><type><name>const</name> <name>char</name> *</type><name>zPath</name></decl></param>, 
  <param><decl><type><name>int</name></type> <name>flags</name></decl></param>, 
  <param><decl><type><name>int</name> *</type><name>pResOut</name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>fs_vfs_t</name> *</type><name>pFsVfs</name> =<init> <expr>(<name>fs_vfs_t</name> *)<name>pVfs</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>fs_real_file</name> *</type><name>pReal</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>isJournal</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nName</name> =<init> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>flags</name>!=<name>SQLITE_ACCESS_EXISTS</name></expr> )</condition><then><block>{
    <decl_stmt><decl><type><name>sqlite3_vfs</name> *</type><name>pParent</name> =<init> <expr>((<name>fs_vfs_t</name> *)<name>pVfs</name>)-&gt;<name>pParent</name></expr></init></decl>;</decl_stmt>
    <return>return <expr><name>pParent</name>-&gt;<call><name>xAccess</name><argument_list>(<argument><expr><name>pParent</name></expr></argument>, <argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>pResOut</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><call><name>strlen</name><argument_list>(<argument><expr>"-journal"</expr></argument>)</argument_list></call>==8</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>nName</name>&gt;8 &amp;&amp; <call><name>strcmp</name><argument_list>(<argument><expr>"-journal"</expr></argument>, <argument><expr>&amp;<name><name>zPath</name><index>[<expr><name>nName</name>-8</expr>]</index></name></expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
    <expr_stmt><expr><name>nName</name> -= 8</expr>;</expr_stmt>
    <expr_stmt><expr><name>isJournal</name> = 1</expr>;</expr_stmt>
  }</block></then></if>

  <expr_stmt><expr><name>pReal</name> = <name>pFsVfs</name>-&gt;<name>pFileList</name></expr>;</expr_stmt> 
  <for>for(<init>;</init> <condition><expr><name>pReal</name> &amp;&amp; <call><name>strncmp</name><argument_list>(<argument><expr><name>pReal</name>-&gt;<name>zName</name></expr></argument>, <argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>nName</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>pReal</name>=<name>pReal</name>-&gt;<name>pNext</name></expr></incr>)<empty_stmt>;</empty_stmt></for>

  <expr_stmt><expr>*<name>pResOut</name> = (<name>pReal</name> &amp;&amp; (!<name>isJournal</name> || <name>pReal</name>-&gt;<name>nJournal</name>&gt;0))</expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Populate buffer zOut with the full canonical pathname corresponding
** to the pathname in zPath. zOut is guaranteed to point to a buffer
** of at least (FS_MAX_PATHNAME+1) bytes.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>fsFullPathname</name><parameter_list>(
  <param><decl><type><name>sqlite3_vfs</name> *</type><name>pVfs</name></decl></param>,            <comment type="block">/* Pointer to vfs object */</comment>
  <param><decl><type><name>const</name> <name>char</name> *</type><name>zPath</name></decl></param>,            <comment type="block">/* Possibly relative input path */</comment>
  <param><decl><type><name>int</name></type> <name>nOut</name></decl></param>,                     <comment type="block">/* Size of output buffer in bytes */</comment>
  <param><decl><type><name>char</name> *</type><name>zOut</name></decl></param>                    <comment type="block">/* Output buffer */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3_vfs</name> *</type><name>pParent</name> =<init> <expr>((<name>fs_vfs_t</name> *)<name>pVfs</name>)-&gt;<name>pParent</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>pParent</name>-&gt;<call><name>xFullPathname</name><argument_list>(<argument><expr><name>pParent</name></expr></argument>, <argument><expr><name>zPath</name></expr></argument>, <argument><expr><name>nOut</name></expr></argument>, <argument><expr><name>zOut</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/*
** Open the dynamic library located at zPath and return a handle.
*/</comment>
<function><type><name>static</name> <name>void</name> *</type><name>fsDlOpen</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name> *</type><name>pVfs</name></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>zPath</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3_vfs</name> *</type><name>pParent</name> =<init> <expr>((<name>fs_vfs_t</name> *)<name>pVfs</name>)-&gt;<name>pParent</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>pParent</name>-&gt;<call><name>xDlOpen</name><argument_list>(<argument><expr><name>pParent</name></expr></argument>, <argument><expr><name>zPath</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/*
** Populate the buffer zErrMsg (size nByte bytes) with a human readable
** utf-8 string describing the most recent error encountered associated 
** with dynamic libraries.
*/</comment>
<function><type><name>static</name> <name>void</name></type> <name>fsDlError</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name> *</type><name>pVfs</name></decl></param>, <param><decl><type><name>int</name></type> <name>nByte</name></decl></param>, <param><decl><type><name>char</name> *</type><name>zErrMsg</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3_vfs</name> *</type><name>pParent</name> =<init> <expr>((<name>fs_vfs_t</name> *)<name>pVfs</name>)-&gt;<name>pParent</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>pParent</name>-&gt;<call><name>xDlError</name><argument_list>(<argument><expr><name>pParent</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>, <argument><expr><name>zErrMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
** Return a pointer to the symbol zSymbol in the dynamic library pHandle.
*/</comment>
<decl_stmt><decl><type><name>static</name></type> <name>void</name> <argument_list>(<argument><expr>*<call><name>fsDlSym</name><argument_list>(<argument><expr><name>sqlite3_vfs</name> *<name>pVfs</name></expr></argument>, <argument><expr><name>void</name> *<name>pH</name></expr></argument>, <argument><expr><name>const</name> <name>char</name> *<name>zSym</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list><argument_list>(<argument><expr><name>void</name></expr></argument>)</argument_list><block>{
  <decl_stmt><decl><type><name>sqlite3_vfs</name> *</type><name>pParent</name> =<init> <expr>((<name>fs_vfs_t</name> *)<name>pVfs</name>)-&gt;<name>pParent</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>pParent</name>-&gt;<call><name>xDlSym</name><argument_list>(<argument><expr><name>pParent</name></expr></argument>, <argument><expr><name>pH</name></expr></argument>, <argument><expr><name>zSym</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></decl></decl_stmt>

<comment type="block">/*
** Close the dynamic library handle pHandle.
*/</comment>
<function><type><name>static</name> <name>void</name></type> <name>fsDlClose</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name> *</type><name>pVfs</name></decl></param>, <param><decl><type><name>void</name> *</type><name>pHandle</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3_vfs</name> *</type><name>pParent</name> =<init> <expr>((<name>fs_vfs_t</name> *)<name>pVfs</name>)-&gt;<name>pParent</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>pParent</name>-&gt;<call><name>xDlClose</name><argument_list>(<argument><expr><name>pParent</name></expr></argument>, <argument><expr><name>pHandle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
** Populate the buffer pointed to by zBufOut with nByte bytes of 
** random data.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>fsRandomness</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name> *</type><name>pVfs</name></decl></param>, <param><decl><type><name>int</name></type> <name>nByte</name></decl></param>, <param><decl><type><name>char</name> *</type><name>zBufOut</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3_vfs</name> *</type><name>pParent</name> =<init> <expr>((<name>fs_vfs_t</name> *)<name>pVfs</name>)-&gt;<name>pParent</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>pParent</name>-&gt;<call><name>xRandomness</name><argument_list>(<argument><expr><name>pParent</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>, <argument><expr><name>zBufOut</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/*
** Sleep for nMicro microseconds. Return the number of microseconds 
** actually slept.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>fsSleep</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name> *</type><name>pVfs</name></decl></param>, <param><decl><type><name>int</name></type> <name>nMicro</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3_vfs</name> *</type><name>pParent</name> =<init> <expr>((<name>fs_vfs_t</name> *)<name>pVfs</name>)-&gt;<name>pParent</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>pParent</name>-&gt;<call><name>xSleep</name><argument_list>(<argument><expr><name>pParent</name></expr></argument>, <argument><expr><name>nMicro</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/*
** Return the current time as a Julian Day number in *pTimeOut.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>fsCurrentTime</name><parameter_list>(<param><decl><type><name>sqlite3_vfs</name> *</type><name>pVfs</name></decl></param>, <param><decl><type><name>double</name> *</type><name>pTimeOut</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3_vfs</name> *</type><name>pParent</name> =<init> <expr>((<name>fs_vfs_t</name> *)<name>pVfs</name>)-&gt;<name>pParent</name></expr></init></decl>;</decl_stmt>
  <return>return <expr><name>pParent</name>-&gt;<call><name>xCurrentTime</name><argument_list>(<argument><expr><name>pParent</name></expr></argument>, <argument><expr><name>pTimeOut</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/*
** This procedure registers the fs vfs with SQLite. If the argument is
** true, the fs vfs becomes the new default vfs. It is the only publicly
** available function in this file.
*/</comment>
<function><type><name>int</name></type> <name>fs_register</name><parameter_list>()</parameter_list><block>{
  <if>if<condition>( <expr><name>fs_vfs</name>.<name>pParent</name></expr> )</condition><then> <return>return <expr><name>SQLITE_OK</name></expr>;</return></then></if>
  <expr_stmt><expr><name>fs_vfs</name>.<name>pParent</name> = <call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>fs_vfs</name>.<name>base</name>.<name>mxPathname</name> = <name>fs_vfs</name>.<name>pParent</name>-&gt;<name>mxPathname</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>fs_vfs</name>.<name>base</name>.<name>szOsFile</name> = <call><name>MAX</name><argument_list>(<argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>tmp_file</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>fs_file</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><call><name>sqlite3_vfs_register</name><argument_list>(<argument><expr>&amp;<name>fs_vfs</name>.<name>base</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_TEST</name></cpp:ifdef>
  <function><type><name>int</name></type> <name>SqlitetestOnefile_Init</name><parameter_list>()</parameter_list> <block>{<return>return <expr><call><name>fs_register</name><argument_list>()</argument_list></call></expr>;</return>}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
