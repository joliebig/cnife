<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="vacuum.c" filename=""><comment type="block">/*
** 2003 April 6
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** This file contains code used to implement the VACUUM command.
**
** Most of the code in this file may be omitted by defining the
** SQLITE_OMIT_VACUUM macro.
**
** $Id: vacuum.c,v 1.84 2008/11/17 19:18:55 danielk1977 Exp $
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vdbeInt.h"</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_OMIT_VACUUM</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_OMIT_ATTACH</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="block">/*
** Execute zSql on database db. Return an error code.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>execSql</name><parameter_list>(<param><decl><type><name>sqlite3</name> *</type><name>db</name></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>zSql</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3_stmt</name> *</type><name>pStmt</name></decl>;</decl_stmt>
  <if>if<condition>( <expr>!<name>zSql</name></expr> )</condition><then><block>{
    <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><name>SQLITE_OK</name>!=<call><name>sqlite3_prepare</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr>&amp;<name>pStmt</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr> )</condition><then><block>{
    <return>return <expr><call><name>sqlite3_errcode</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></then></if>
  <while>while<condition>( <expr><name>SQLITE_ROW</name>==<call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><block>{}</block></while>
  <return>return <expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/*
** Execute zSql on database db. The statement returns exactly
** one column. Execute this as SQL on the same database.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>execExecSql</name><parameter_list>(<param><decl><type><name>sqlite3</name> *</type><name>db</name></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>zSql</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3_stmt</name> *</type><name>pStmt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_prepare</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr>&amp;<name>pStmt</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_OK</name></expr> )</condition><then> <return>return <expr><name>rc</name></expr>;</return></then></if>

  <while>while<condition>( <expr><name>SQLITE_ROW</name>==<call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><block>{
    <expr_stmt><expr><name>rc</name> = <call><name>execSql</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr>(<name>char</name>*)<call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_OK</name></expr> )</condition><then><block>{
      <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>rc</name></expr>;</return>
    }</block></then></if>
  }</block></while>

  <return>return <expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/*
** The non-standard VACUUM command is used to clean up the database,
** collapse free space, etc.  It is modelled after the VACUUM command
** in PostgreSQL.
**
** In version 1.0.x of SQLite, the VACUUM command would call
** gdbm_reorganize() on all the database tables.  But beginning
** with 2.0.0, SQLite no longer uses GDBM so this command has
** become a no-op.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3Vacuum</name><parameter_list>(<param><decl><type><name>Parse</name> *</type><name>pParse</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>Vdbe</name> *</type><name>v</name> =<init> <expr><call><name>sqlite3GetVdbe</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>v</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Vacuum</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <return>return;</return>
}</block></function>

<comment type="block">/*
** This routine implements the OP_Vacuum opcode of the VDBE.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3RunVacuum</name><parameter_list>(<param><decl><type><name>char</name> **</type><name>pzErrMsg</name></decl></param>, <param><decl><type><name>sqlite3</name> *</type><name>db</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> =<init> <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>     <comment type="block">/* Return code from service routines */</comment>
  <decl_stmt><decl><type><name>Btree</name> *</type><name>pMain</name></decl>;</decl_stmt>           <comment type="block">/* The database being vacuumed */</comment>
  <decl_stmt><decl><type><name>Pager</name> *</type><name>pMainPager</name></decl>;</decl_stmt>      <comment type="block">/* Pager for database being vacuumed */</comment>
  <decl_stmt><decl><type><name>Btree</name> *</type><name>pTemp</name></decl>;</decl_stmt>           <comment type="block">/* The temporary database we vacuum into */</comment>
  <decl_stmt><decl><type><name>char</name> *</type><name>zSql</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>         <comment type="block">/* SQL statements */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>saved_flags</name></decl>;</decl_stmt>        <comment type="block">/* Saved value of the db-&gt;flags */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>saved_nChange</name></decl>;</decl_stmt>      <comment type="block">/* Saved value of db-&gt;nChange */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>saved_nTotalChange</name></decl>;</decl_stmt> <comment type="block">/* Saved value of db-&gt;nTotalChange */</comment>
  <decl_stmt><decl><type><name>Db</name> *</type><name>pDb</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>            <comment type="block">/* Database to detach at end of vacuum */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>isMemDb</name></decl>;</decl_stmt>            <comment type="block">/* True is vacuuming a :memory: database */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nRes</name></decl>;</decl_stmt>

  <comment type="block">/* Save the current value of the write-schema flag before setting it. */</comment>
  <expr_stmt><expr><name>saved_flags</name> = <name>db</name>-&gt;<name>flags</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>saved_nChange</name> = <name>db</name>-&gt;<name>nChange</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>saved_nTotalChange</name> = <name>db</name>-&gt;<name>nTotalChange</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>db</name>-&gt;<name>flags</name> |= <name>SQLITE_WriteSchema</name> | <name>SQLITE_IgnoreChecks</name></expr>;</expr_stmt>

  <if>if<condition>( <expr>!<name>db</name>-&gt;<name>autoCommit</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>sqlite3SetString</name><argument_list>(<argument><expr><name>pzErrMsg</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr>"cannot VACUUM from within a transaction"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> = <name>SQLITE_ERROR</name></expr>;</expr_stmt>
    <goto>goto <name>end_of_vacuum</name>;</goto>
  }</block></then></if>
  <expr_stmt><expr><name>pMain</name> = <name>db</name>-&gt;<name><name>aDb</name><index>[<expr>0</expr>]</index></name>.<name>pBt</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>pMainPager</name> = <call><name>sqlite3BtreePager</name><argument_list>(<argument><expr><name>pMain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>isMemDb</name> = <call><name>sqlite3PagerFile</name><argument_list>(<argument><expr><name>pMainPager</name></expr></argument>)</argument_list></call>-&gt;<name>pMethods</name>==0</expr>;</expr_stmt>

  <comment type="block">/* Attach the temporary database as 'vacuum_db'. The synchronous pragma
  ** can be set to 'off' for this file, as it is not recovered if a crash
  ** occurs anyway. The integrity of the database is maintained by a
  ** (possibly synchronous) transaction opened on the main database before
  ** sqlite3BtreeCopyFile() is called.
  **
  ** An optimisation would be to use a non-journaled pager.
  ** (Later:) I tried setting "PRAGMA vacuum_db.journal_mode=OFF" but
  ** that actually made the VACUUM run slower.  Very little journalling
  ** actually occurs when doing a vacuum since the vacuum_db is initially
  ** empty.  Only the journal header is written.  Apparently it takes more
  ** time to parse and run the PRAGMA to turn journalling off than it does
  ** to write the journal header file.
  */</comment>
  <expr_stmt><expr><name>zSql</name> = "ATTACH '' AS vacuum_db;"</expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> = <call><name>execSql</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_OK</name></expr> )</condition><then> <goto>goto <name>end_of_vacuum</name>;</goto></then></if>
  <expr_stmt><expr><name>pDb</name> = &amp;<name>db</name>-&gt;<name><name>aDb</name><index>[<expr><name>db</name>-&gt;<name>nDb</name>-1</expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>strcmp</name><argument_list>(<argument><expr><name>db</name>-&gt;<name><name>aDb</name><index>[<expr><name>db</name>-&gt;<name>nDb</name>-1</expr>]</index></name>.<name>zName</name></expr></argument>,<argument><expr>"vacuum_db"</expr></argument>)</argument_list></call>==0</expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pTemp</name> = <name>db</name>-&gt;<name><name>aDb</name><index>[<expr><name>db</name>-&gt;<name>nDb</name>-1</expr>]</index></name>.<name>pBt</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>nRes</name> = <call><name>sqlite3BtreeGetReserve</name><argument_list>(<argument><expr><name>pMain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* A VACUUM cannot change the pagesize of an encrypted database. */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_HAS_CODEC</name></cpp:ifdef>
  <if>if<condition>( <expr><name>db</name>-&gt;<name>nextPagesize</name></expr> )</condition><then><block>{
    <function_decl><type><name>extern</name> <name>void</name></type> <name>sqlite3CodecGetKey</name><parameter_list>(<param><decl><type><name>sqlite3</name>*</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>, <param><decl><type><name>void</name>**</type></decl></param>, <param><decl><type><name>int</name>*</type></decl></param>)</parameter_list>;</function_decl>
    <decl_stmt><decl><type><name>int</name></type> <name>nKey</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>zKey</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3CodecGetKey</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>(<name>void</name>**)&amp;<name>zKey</name></expr></argument>, <argument><expr>&amp;<name>nKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>( <expr><name>nKey</name></expr> )</condition><then> <expr_stmt><expr><name>db</name>-&gt;<name>nextPagesize</name> = 0</expr>;</expr_stmt></then></if>
  }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if>if<condition>( <expr><call><name>sqlite3BtreeSetPageSize</name><argument_list>(<argument><expr><name>pTemp</name></expr></argument>, <argument><expr><call><name>sqlite3BtreeGetPageSize</name><argument_list>(<argument><expr><name>pMain</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nRes</name></expr></argument>)</argument_list></call>
   || (!<name>isMemDb</name> &amp;&amp; <call><name>sqlite3BtreeSetPageSize</name><argument_list>(<argument><expr><name>pTemp</name></expr></argument>, <argument><expr><name>db</name>-&gt;<name>nextPagesize</name></expr></argument>, <argument><expr><name>nRes</name></expr></argument>)</argument_list></call>)
   || <name>db</name>-&gt;<name>mallocFailed</name></expr> 
  )</condition><then><block>{
    <expr_stmt><expr><name>rc</name> = <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
    <goto>goto <name>end_of_vacuum</name>;</goto>
  }</block></then></if>
  <expr_stmt><expr><name>rc</name> = <call><name>execSql</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr>"PRAGMA vacuum_db.synchronous=OFF"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_OK</name></expr> )</condition><then><block>{
    <goto>goto <name>end_of_vacuum</name>;</goto>
  }</block></then></if>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_AUTOVACUUM</name></cpp:ifndef>
  <expr_stmt><expr><call><name>sqlite3BtreeSetAutoVacuum</name><argument_list>(<argument><expr><name>pTemp</name></expr></argument>, <argument><expr><name>db</name>-&gt;<name>nextAutovac</name>&gt;=0 ? <name>db</name>-&gt;<name>nextAutovac</name> :
                                           <call><name>sqlite3BtreeGetAutoVacuum</name><argument_list>(<argument><expr><name>pMain</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* Begin a transaction */</comment>
  <expr_stmt><expr><name>rc</name> = <call><name>execSql</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr>"BEGIN EXCLUSIVE;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_OK</name></expr> )</condition><then> <goto>goto <name>end_of_vacuum</name>;</goto></then></if>

  <comment type="block">/* Query the schema of the main database. Create a mirror schema
  ** in the temporary database.
  */</comment>
  <expr_stmt><expr><name>rc</name> = <call><name>execExecSql</name><argument_list>(<argument><expr><name>db</name></expr></argument>, 
      <argument><expr>"SELECT 'CREATE TABLE vacuum_db.' || substr(sql,14) "
      "  FROM sqlite_master WHERE type='table' AND name!='sqlite_sequence'"
      "   AND rootpage&gt;0"</expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_OK</name></expr> )</condition><then> <goto>goto <name>end_of_vacuum</name>;</goto></then></if>
  <expr_stmt><expr><name>rc</name> = <call><name>execExecSql</name><argument_list>(<argument><expr><name>db</name></expr></argument>, 
      <argument><expr>"SELECT 'CREATE INDEX vacuum_db.' || substr(sql,14)"
      "  FROM sqlite_master WHERE sql LIKE 'CREATE INDEX %' "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_OK</name></expr> )</condition><then> <goto>goto <name>end_of_vacuum</name>;</goto></then></if>
  <expr_stmt><expr><name>rc</name> = <call><name>execExecSql</name><argument_list>(<argument><expr><name>db</name></expr></argument>, 
      <argument><expr>"SELECT 'CREATE UNIQUE INDEX vacuum_db.' || substr(sql,21) "
      "  FROM sqlite_master WHERE sql LIKE 'CREATE UNIQUE INDEX %'"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_OK</name></expr> )</condition><then> <goto>goto <name>end_of_vacuum</name>;</goto></then></if>

  <comment type="block">/* Loop through the tables in the main database. For each, do
  ** an "INSERT INTO vacuum_db.xxx SELECT * FROM xxx;" to copy
  ** the contents to the temporary database.
  */</comment>
  <expr_stmt><expr><name>rc</name> = <call><name>execExecSql</name><argument_list>(<argument><expr><name>db</name></expr></argument>, 
      <argument><expr>"SELECT 'INSERT INTO vacuum_db.' || quote(name) "
      "|| ' SELECT * FROM ' || quote(name) || ';'"
      "FROM sqlite_master "
      "WHERE type = 'table' AND name!='sqlite_sequence' "
      "  AND rootpage&gt;0"</expr></argument>

  )</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_OK</name></expr> )</condition><then> <goto>goto <name>end_of_vacuum</name>;</goto></then></if>

  <comment type="block">/* Copy over the sequence table
  */</comment>
  <expr_stmt><expr><name>rc</name> = <call><name>execExecSql</name><argument_list>(<argument><expr><name>db</name></expr></argument>, 
      <argument><expr>"SELECT 'DELETE FROM vacuum_db.' || quote(name) || ';' "
      "FROM vacuum_db.sqlite_master WHERE name='sqlite_sequence' "</expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_OK</name></expr> )</condition><then> <goto>goto <name>end_of_vacuum</name>;</goto></then></if>
  <expr_stmt><expr><name>rc</name> = <call><name>execExecSql</name><argument_list>(<argument><expr><name>db</name></expr></argument>, 
      <argument><expr>"SELECT 'INSERT INTO vacuum_db.' || quote(name) "
      "|| ' SELECT * FROM ' || quote(name) || ';' "
      "FROM vacuum_db.sqlite_master WHERE name=='sqlite_sequence';"</expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_OK</name></expr> )</condition><then> <goto>goto <name>end_of_vacuum</name>;</goto></then></if>


  <comment type="block">/* Copy the triggers, views, and virtual tables from the main database
  ** over to the temporary database.  None of these objects has any
  ** associated storage, so all we have to do is copy their entries
  ** from the SQLITE_MASTER table.
  */</comment>
  <expr_stmt><expr><name>rc</name> = <call><name>execSql</name><argument_list>(<argument><expr><name>db</name></expr></argument>,
      <argument><expr>"INSERT INTO vacuum_db.sqlite_master "
      "  SELECT type, name, tbl_name, rootpage, sql"
      "    FROM sqlite_master"
      "   WHERE type='view' OR type='trigger'"
      "      OR (type='table' AND rootpage=0)"</expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>rc</name></expr> )</condition><then> <goto>goto <name>end_of_vacuum</name>;</goto></then></if>

  <comment type="block">/* At this point, unless the main db was completely empty, there is now a
  ** transaction open on the vacuum database, but not on the main database.
  ** Open a btree level transaction on the main database. This allows a
  ** call to sqlite3BtreeCopyFile(). The main database btree level
  ** transaction is then committed, so the SQL level never knows it was
  ** opened for writing. This way, the SQL transaction used to create the
  ** temporary database never needs to be committed.
  */</comment>
  <if>if<condition>( <expr><name>rc</name>==<name>SQLITE_OK</name></expr> )</condition><then><block>{
    <decl_stmt><decl><type><name>u32</name></type> <name>meta</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

    <comment type="block">/* This array determines which meta meta values are preserved in the
    ** vacuum.  Even entries are the meta value number and odd entries
    ** are an increment to apply to the meta value after the vacuum.
    ** The increment is used to increase the schema cookie so that other
    ** connections to the same database will know to reread the schema.
    */</comment>
    <decl_stmt><decl><type><name>static</name> <name>const</name> <name>unsigned</name> <name>char</name></type> <name><name>aCopy</name><index>[]</index></name> =<init> <expr><block>{
       <expr>1</expr>, <expr>1</expr>,    <comment type="block">/* Add one to the old schema cookie */</comment>
       <expr>3</expr>, <expr>0</expr>,    <comment type="block">/* Preserve the default page cache size */</comment>
       <expr>5</expr>, <expr>0</expr>,    <comment type="block">/* Preserve the default text encoding */</comment>
       <expr>6</expr>, <expr>0</expr>,    <comment type="block">/* Preserve the user version */</comment>
    }</block></expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr>1==<call><name>sqlite3BtreeIsInTrans</name><argument_list>(<argument><expr><name>pTemp</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr>1==<call><name>sqlite3BtreeIsInTrans</name><argument_list>(<argument><expr><name>pMain</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Copy Btree meta values */</comment>
    <for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<call><name>ArraySize</name><argument_list>(<argument><expr><name>aCopy</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name>+=2</expr></incr>)<block>{
      <expr_stmt><expr><name>rc</name> = <call><name>sqlite3BtreeGetMeta</name><argument_list>(<argument><expr><name>pMain</name></expr></argument>, <argument><expr><name><name>aCopy</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>meta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_OK</name></expr> )</condition><then> <goto>goto <name>end_of_vacuum</name>;</goto></then></if>
      <expr_stmt><expr><name>rc</name> = <call><name>sqlite3BtreeUpdateMeta</name><argument_list>(<argument><expr><name>pTemp</name></expr></argument>, <argument><expr><name><name>aCopy</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>meta</name>+<name><name>aCopy</name><index>[<expr><name>i</name>+1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_OK</name></expr> )</condition><then> <goto>goto <name>end_of_vacuum</name>;</goto></then></if>
    }</block></for>

    <expr_stmt><expr><name>rc</name> = <call><name>sqlite3BtreeCopyFile</name><argument_list>(<argument><expr><name>pMain</name></expr></argument>, <argument><expr><name>pTemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_OK</name></expr> )</condition><then> <goto>goto <name>end_of_vacuum</name>;</goto></then></if>
    <expr_stmt><expr><name>rc</name> = <call><name>sqlite3BtreeCommit</name><argument_list>(<argument><expr><name>pTemp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_OK</name></expr> )</condition><then> <goto>goto <name>end_of_vacuum</name>;</goto></then></if>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_AUTOVACUUM</name></cpp:ifndef>
    <expr_stmt><expr><call><name>sqlite3BtreeSetAutoVacuum</name><argument_list>(<argument><expr><name>pMain</name></expr></argument>, <argument><expr><call><name>sqlite3BtreeGetAutoVacuum</name><argument_list>(<argument><expr><name>pTemp</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>rc</name> = <call><name>sqlite3BtreeCommit</name><argument_list>(<argument><expr><name>pMain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <if>if<condition>( <expr><name>rc</name>==<name>SQLITE_OK</name></expr> )</condition><then><block>{
    <expr_stmt><expr><name>rc</name> = <call><name>sqlite3BtreeSetPageSize</name><argument_list>(<argument><expr><name>pMain</name></expr></argument>, <argument><expr><call><name>sqlite3BtreeGetPageSize</name><argument_list>(<argument><expr><name>pTemp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nRes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

<label><name>end_of_vacuum</name>:</label>
  <comment type="block">/* Restore the original value of db-&gt;flags */</comment>
  <expr_stmt><expr><name>db</name>-&gt;<name>flags</name> = <name>saved_flags</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>db</name>-&gt;<name>nChange</name> = <name>saved_nChange</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>db</name>-&gt;<name>nTotalChange</name> = <name>saved_nTotalChange</name></expr>;</expr_stmt>

  <comment type="block">/* Currently there is an SQL level transaction open on the vacuum
  ** database. No locks are held on any other files (since the main file
  ** was committed at the btree level). So it safe to end the transaction
  ** by manually setting the autoCommit flag to true and detaching the
  ** vacuum database. The vacuum_db journal file is deleted when the pager
  ** is closed by the DETACH.
  */</comment>
  <expr_stmt><expr><name>db</name>-&gt;<name>autoCommit</name> = 1</expr>;</expr_stmt>

  <if>if<condition>( <expr><name>pDb</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>sqlite3BtreeClose</name><argument_list>(<argument><expr><name>pDb</name>-&gt;<name>pBt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pDb</name>-&gt;<name>pBt</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>pDb</name>-&gt;<name>pSchema</name> = 0</expr>;</expr_stmt>
  }</block></then></if>

  <expr_stmt><expr><call><name>sqlite3ResetInternalSchema</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>  <comment type="block">/* SQLITE_OMIT_VACUUM &amp;&amp; SQLITE_OMIT_ATTACH */</comment>
</unit>
