<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="os_common.h"><comment type="block">/*
** 2004 May 22
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
******************************************************************************
**
** This file contains macros and a little bit of code that is common to
** all of the platform-specific files (os_*.c) and is #included into those
** files.
**
** This file should be #included by the os_*.c files only.  It is not a
** general purpose header file.
**
** $Id: os_common.h,v 1.37 2008/05/29 20:22:37 shane Exp $
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_OS_COMMON_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>_OS_COMMON_H_</name></cpp:define>

<comment type="block">/*
** At least two bugs have slipped in because we changed the MEMORY_DEBUG
** macro to SQLITE_DEBUG and some older makefiles have not yet made the
** switch.  The following code should catch this problem at compile-time.
*/</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MEMORY_DEBUG</name></cpp:ifdef>
<cpp:error># <cpp:directive>error</cpp:directive> "The MEMORY_DEBUG macro is obsolete.  Use SQLITE_DEBUG instead."</cpp:error>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/*
 * When testing, this global variable stores the location of the
 * pending-byte in the database file.
 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_TEST</name></cpp:ifdef>
<decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>sqlite3_pending_byte</name> =<init> <expr>0x40000000</expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_DEBUG</name></cpp:ifdef>
<decl_stmt><decl><type><name>int</name></type> <name>sqlite3OSTrace</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>OSTRACE1</name>(X)         if( sqlite3OSTrace ) sqlite3DebugPrintf(X)</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>OSTRACE2</name>(X,Y)       if( sqlite3OSTrace ) sqlite3DebugPrintf(X,Y)</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>OSTRACE3</name>(X,Y,Z)     if( sqlite3OSTrace ) sqlite3DebugPrintf(X,Y,Z)</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>OSTRACE4</name>(X,Y,Z,A)   if( sqlite3OSTrace ) sqlite3DebugPrintf(X,Y,Z,A)</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>OSTRACE5</name>(X,Y,Z,A,B) if( sqlite3OSTrace ) sqlite3DebugPrintf(X,Y,Z,A,B)</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>OSTRACE6</name>(X,Y,Z,A,B,C) \
    if(sqlite3OSTrace) sqlite3DebugPrintf(X,Y,Z,A,B,C)</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>OSTRACE7</name>(X,Y,Z,A,B,C,D) \
    if(sqlite3OSTrace) sqlite3DebugPrintf(X,Y,Z,A,B,C,D)</cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>OSTRACE1</name>(X)</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>OSTRACE2</name>(X,Y)</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>OSTRACE3</name>(X,Y,Z)</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>OSTRACE4</name>(X,Y,Z,A)</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>OSTRACE5</name>(X,Y,Z,A,B)</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>OSTRACE6</name>(X,Y,Z,A,B,C)</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>OSTRACE7</name>(X,Y,Z,A,B,C,D)</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** Macros for performance tracing.  Normally turned off.  Only works
** on i486 hardware.
*/</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_PERFORMANCE_TRACE</name></cpp:ifdef>

<comment type="block">/* 
** hwtime.h contains inline assembler code for implementing 
** high-performance timing routines.
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hwtime.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>static</name> <name>sqlite_uint64</name></type> <name>g_start</name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>sqlite_uint64</name></type> <name>g_elapsed</name></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>TIMER_START</name>       <name>g_start</name>=sqlite3Hwtime()</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>TIMER_END</name>         <name>g_elapsed</name>=sqlite3Hwtime()-g_start</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>TIMER_ELAPSED</name>     <name>g_elapsed</name></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>TIMER_START</name></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>TIMER_END</name></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>TIMER_ELAPSED</name>     ((sqlite_uint64)0)</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** If we compile with the SQLITE_TEST macro set, then the following block
** of code will give us the ability to simulate a disk I/O error.  This
** is used for testing the I/O recovery logic.
*/</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_TEST</name></cpp:ifdef>
<decl_stmt><decl><type><name>int</name></type> <name>sqlite3_io_error_hit</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>            <comment type="block">/* Total number of I/O Errors */</comment>
<decl_stmt><decl><type><name>int</name></type> <name>sqlite3_io_error_hardhit</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>        <comment type="block">/* Number of non-benign errors */</comment>
<decl_stmt><decl><type><name>int</name></type> <name>sqlite3_io_error_pending</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>        <comment type="block">/* Count down to first I/O error */</comment>
<decl_stmt><decl><type><name>int</name></type> <name>sqlite3_io_error_persist</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>        <comment type="block">/* True if I/O errors persist */</comment>
<decl_stmt><decl><type><name>int</name></type> <name>sqlite3_io_error_benign</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>         <comment type="block">/* True if errors are benign */</comment>
<decl_stmt><decl><type><name>int</name></type> <name>sqlite3_diskfull_pending</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>int</name></type> <name>sqlite3_diskfull</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>SimulateIOErrorBenign</name>(X) sqlite3_io_error_benign=(X)</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>SimulateIOError</name>(CODE)  \
  if( (sqlite3_io_error_persist &amp;&amp; sqlite3_io_error_hit) \
       || sqlite3_io_error_pending-- == 1 )  \
              { local_ioerr(); CODE; }</cpp:define>
<function><type><name>static</name> <name>void</name></type> <name>local_ioerr</name><parameter_list>()</parameter_list><block>{
  <expr_stmt><expr><call><name>IOTRACE</name><argument_list>(<argument><expr>("IOERR\n")</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>sqlite3_io_error_hit</name>++</expr>;</expr_stmt>
  <if>if<condition>( <expr>!<name>sqlite3_io_error_benign</name></expr> )</condition><then> <expr_stmt><expr><name>sqlite3_io_error_hardhit</name>++</expr>;</expr_stmt></then></if>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>SimulateDiskfullError</name>(CODE) \
   if( sqlite3_diskfull_pending ){ \
     if( sqlite3_diskfull_pending == 1 ){ \
       local_ioerr(); \
       sqlite3_diskfull = 1; \
       sqlite3_io_error_hit = 1; \
       CODE; \
     }else{ \
       sqlite3_diskfull_pending--; \
     } \
   }</cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>SimulateIOErrorBenign</name>(X)</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>SimulateIOError</name>(A)</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>SimulateDiskfullError</name>(A)</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** When testing, keep a count of the number of open files.
*/</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_TEST</name></cpp:ifdef>
<decl_stmt><decl><type><name>int</name></type> <name>sqlite3_open_file_count</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>OpenCounter</name>(X)  sqlite3_open_file_count+=(X)</cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>OpenCounter</name>(X)</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !defined(_OS_COMMON_H_) */</comment>
</unit>
