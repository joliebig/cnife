<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="fault.c" filename=""><comment type="block">/*
** 2008 Jan 22
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
**
** $Id: fault.c,v 1.11 2008/09/02 00:52:52 drh Exp $
*/</comment>

<comment type="block">/*
** This file contains code to support the concept of "benign" 
** malloc failures (when the xMalloc() or xRealloc() method of the
** sqlite3_mem_methods structure fails to allocate a block of memory
** and returns 0). 
**
** Most malloc failures are non-benign. After they occur, SQLite
** abandons the current operation and returns an error code (usually
** SQLITE_NOMEM) to the user. However, sometimes a fault is not necessarily
** fatal. For example, if a malloc fails while resizing a hash table, this 
** is completely recoverable simply by not carrying out the resize. The 
** hash table will continue to function normally.  So a malloc failure 
** during a hash table resize is a benign fault.
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_BUILTIN_TEST</name></cpp:ifndef>

<comment type="block">/*
** Global variables.
*/</comment>
<typedef>typedef <type><struct>struct <name>BenignMallocHooks</name> BenignMallocHooks;</struct></type></typedef>
<decl_stmt><decl><type><name>static</name> <name>SQLITE_WSD</name> struct</type> <name>BenignMallocHooks</name> <block>{
  <function_decl><type><name>void</name></type> (*<name>xBenignBegin</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
  <function_decl><type><name>void</name></type> (*<name>xBenignEnd</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
}</block></decl></decl_stmt> <expr_stmt><expr><name>sqlite3Hooks</name> = <block>{ <expr>0</expr>, <expr>0</expr> }</block></expr>;</expr_stmt>

<comment type="block">/* The "wsdHooks" macro will resolve to the appropriate BenignMallocHooks
** structure.  If writable static data is unsupported on the target,
** we have to locate the state vector at run-time.  In the more common
** case where writable static data is supported, wsdHooks can refer directly
** to the "sqlite3Hooks" state vector declared above.
*/</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_WSD</name></cpp:ifdef>
<cpp:define># <cpp:directive>define</cpp:directive> <name>wsdHooksInit</name> \
  <name>BenignMallocHooks</name> *x = &amp;GLOBAL(BenignMallocHooks,sqlite3Hooks)</cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <name>wsdHooks</name> <name>x</name>[0]</cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define># <cpp:directive>define</cpp:directive> <name>wsdHooksInit</name></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <name>wsdHooks</name> <name>sqlite3Hooks</name></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/*
** Register hooks to call when sqlite3BeginBenignMalloc() and
** sqlite3EndBenignMalloc() are called, respectively.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3BenignMallocHooks</name><parameter_list>(
  <param><function_decl><type><name>void</name></type> (*<name>xBenignBegin</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>,
  <param><function_decl><type><name>void</name></type> (*<name>xBenignEnd</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list></function_decl></param></function_decl></param>
)</parameter_list><block>{
  <expr_stmt><expr><name>wsdHooksInit</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>wsdHooks</name>.<name>xBenignBegin</name> = <name>xBenignBegin</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>wsdHooks</name>.<name>xBenignEnd</name> = <name>xBenignEnd</name></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
** This (sqlite3EndBenignMalloc()) is called by SQLite code to indicate that
** subsequent malloc failures are benign. A call to sqlite3EndBenignMalloc()
** indicates that subsequent malloc failures are non-benign.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3BeginBenignMalloc</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list><block>{
  <expr_stmt><expr><name>wsdHooksInit</name></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>wsdHooks</name>.<name>xBenignBegin</name></expr> )</condition><then><block>{
    <expr_stmt><expr><name>wsdHooks</name>.<call><name>xBenignBegin</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>
<function><type><name>void</name></type> <name>sqlite3EndBenignMalloc</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list><block>{
  <expr_stmt><expr><name>wsdHooksInit</name></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>wsdHooks</name>.<name>xBenignEnd</name></expr> )</condition><then><block>{
    <expr_stmt><expr><name>wsdHooks</name>.<call><name>xBenignEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>   <comment type="block">/* #ifndef SQLITE_OMIT_BUILTIN_TEST */</comment>
</unit>
