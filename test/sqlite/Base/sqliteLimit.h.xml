<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="sqliteLimit.h"><comment type="block">/*
** 2007 May 7
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** 
** This file defines various limits of what SQLite can process.
**
** @(#) $Id: sqliteLimit.h,v 1.10 2009/01/10 16:15:09 danielk1977 Exp $
*/</comment>

<comment type="block">/*
** The maximum length of a TEXT or BLOB in bytes.   This also
** limits the size of a row in a table or index.
**
** The hard limit is the ability of a 32-bit signed integer
** to count the size: 2^31-1 or 2147483647.
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_MAX_LENGTH</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <name>SQLITE_MAX_LENGTH</name> 1000000000</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** This is the maximum number of
**
**    * Columns in a table
**    * Columns in an index
**    * Columns in a view
**    * Terms in the SET clause of an UPDATE statement
**    * Terms in the result set of a SELECT statement
**    * Terms in the GROUP BY or ORDER BY clauses of a SELECT statement.
**    * Terms in the VALUES clause of an INSERT statement
**
** The hard upper limit here is 32676.  Most database people will
** tell you that in a well-normalized database, you usually should
** not have more than a dozen or so columns in any table.  And if
** that is the case, there is no point in having more than a few
** dozen values in any of the other situations described above.
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_MAX_COLUMN</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <name>SQLITE_MAX_COLUMN</name> 2000</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** The maximum length of a single SQL statement in bytes.
**
** It used to be the case that setting this value to zero would
** turn the limit off.  That is no longer true.  It is not possible
** to turn this limit off.
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_MAX_SQL_LENGTH</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <name>SQLITE_MAX_SQL_LENGTH</name> 1000000000</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** The maximum depth of an expression tree. This is limited to 
** some extent by SQLITE_MAX_SQL_LENGTH. But sometime you might 
** want to place more severe limits on the complexity of an 
** expression.
**
** A value of 0 used to mean that the limit was not enforced.
** But that is no longer true.  The limit is now strictly enforced
** at all times.
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_MAX_EXPR_DEPTH</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <name>SQLITE_MAX_EXPR_DEPTH</name> 1000</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** The maximum number of terms in a compound SELECT statement.
** The code generator for compound SELECT statements does one
** level of recursion for each term.  A stack overflow can result
** if the number of terms is too large.  In practice, most SQL
** never has more than 3 or 4 terms.  Use a value of 0 to disable
** any limit on the number of terms in a compount SELECT.
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_MAX_COMPOUND_SELECT</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <name>SQLITE_MAX_COMPOUND_SELECT</name> 500</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** The maximum number of opcodes in a VDBE program.
** Not currently enforced.
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_MAX_VDBE_OP</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <name>SQLITE_MAX_VDBE_OP</name> 25000</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** The maximum number of arguments to an SQL function.
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_MAX_FUNCTION_ARG</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <name>SQLITE_MAX_FUNCTION_ARG</name> 127</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** The maximum number of in-memory pages to use for the main database
** table and for temporary tables.  The SQLITE_DEFAULT_CACHE_SIZE
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_DEFAULT_CACHE_SIZE</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <name>SQLITE_DEFAULT_CACHE_SIZE</name>  2000</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_DEFAULT_TEMP_CACHE_SIZE</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <name>SQLITE_DEFAULT_TEMP_CACHE_SIZE</name>  500</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** The maximum number of attached databases.  This must be between 0
** and 30.  The upper bound on 30 is because a 32-bit integer bitmap
** is used internally to track attached databases.
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_MAX_ATTACHED</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <name>SQLITE_MAX_ATTACHED</name> 10</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/*
** The maximum value of a ?nnn wildcard that the parser will accept.
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_MAX_VARIABLE_NUMBER</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <name>SQLITE_MAX_VARIABLE_NUMBER</name> 999</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/* Maximum page size.  The upper bound on this value is 32768.  This a limit
** imposed by the necessity of storing the value in a 2-byte unsigned integer
** and the fact that the page size must be a power of 2.
**
** If this limit is changed, then the compiled library is technically
** incompatible with an SQLite library compiled with a different limit. If
** a process operating on a database with a page-size of 65536 bytes 
** crashes, then an instance of SQLite compiled with the default page-size 
** limit will not be able to rollback the aborted transaction. This could
** lead to database corruption.
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_MAX_PAGE_SIZE</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <name>SQLITE_MAX_PAGE_SIZE</name> 32768</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/*
** The default size of a database page.
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_DEFAULT_PAGE_SIZE</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <name>SQLITE_DEFAULT_PAGE_SIZE</name> 1024</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_DEFAULT_PAGE_SIZE</name>&gt;<name>SQLITE_MAX_PAGE_SIZE</name></expr></cpp:if>
<cpp:undef># <cpp:directive>undef</cpp:directive> <name>SQLITE_DEFAULT_PAGE_SIZE</name></cpp:undef>
<cpp:define># <cpp:directive>define</cpp:directive> <name>SQLITE_DEFAULT_PAGE_SIZE</name> <name>SQLITE_MAX_PAGE_SIZE</name></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** Ordinarily, if no value is explicitly provided, SQLite creates databases
** with page size SQLITE_DEFAULT_PAGE_SIZE. However, based on certain
** device characteristics (sector-size and atomic write() support),
** SQLite may choose a larger value. This constant is the maximum value
** SQLite will choose on its own.
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_MAX_DEFAULT_PAGE_SIZE</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <name>SQLITE_MAX_DEFAULT_PAGE_SIZE</name> 8192</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_MAX_DEFAULT_PAGE_SIZE</name>&gt;<name>SQLITE_MAX_PAGE_SIZE</name></expr></cpp:if>
<cpp:undef># <cpp:directive>undef</cpp:directive> <name>SQLITE_MAX_DEFAULT_PAGE_SIZE</name></cpp:undef>
<cpp:define># <cpp:directive>define</cpp:directive> <name>SQLITE_MAX_DEFAULT_PAGE_SIZE</name> <name>SQLITE_MAX_PAGE_SIZE</name></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/*
** Maximum number of pages in one database file.
**
** This is really just the default value for the max_page_count pragma.
** This value can be lowered (or raised) at run-time using that the
** max_page_count macro.
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_MAX_PAGE_COUNT</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <name>SQLITE_MAX_PAGE_COUNT</name> 1073741823</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** Maximum length (in bytes) of the pattern in a LIKE or GLOB
** operator.
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_MAX_LIKE_PATTERN_LENGTH</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <name>SQLITE_MAX_LIKE_PATTERN_LENGTH</name> 50000</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
