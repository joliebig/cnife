<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="test5.c" filename=""><comment type="block">/*
** 2001 September 15
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** Code for testing the utf.c module in SQLite.  This code
** is not included in the SQLite library.  It is used for automated
** testing of the SQLite library. Specifically, the code in this file
** is used for testing the SQLite routines for converting between
** the various supported unicode encodings.
**
** $Id: test5.c,v 1.22 2008/08/12 15:04:59 danielk1977 Exp $
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vdbeInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<comment type="block">/*
** The first argument is a TCL UTF-8 string. Return the byte array
** object with the encoded representation of the string, including
** the NULL terminator.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>binarize</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>bytes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Tcl_Obj</name> *</type><name>pRet</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>objc</name>==2</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>bytes</name> = <call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pRet</name> = <call><name>Tcl_NewByteArrayObj</name><argument_list>(<argument><expr>(<name>u8</name>*)<name>bytes</name></expr></argument>, <argument><expr><name>len</name>+1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>pRet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage: test_value_overhead &lt;repeat-count&gt; &lt;do-calls&gt;.
**
** This routine is used to test the overhead of calls to
** sqlite3_value_text(), on a value that contains a UTF-8 string. The idea
** is to figure out whether or not it is a problem to use sqlite3_value
** structures with collation sequence functions.
**
** If &lt;do-calls&gt; is 0, then the calls to sqlite3_value_text() are not
** actually made.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_value_overhead</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>do_calls</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>repeat_count</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Mem</name></type> <name>val</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>zVal</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=3</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>,
        <argument><expr><call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>" &lt;repeat-count&gt; &lt;do-calls&gt;"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>

  <if>if<condition>( <expr><call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>repeat_count</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr><call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>do_calls</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><name>val</name>.<name>flags</name> = <name>MEM_Str</name>|<name>MEM_Term</name>|<name>MEM_Static</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>val</name>.<name>z</name> = "hello world"</expr>;</expr_stmt>
  <expr_stmt><expr><name>val</name>.<name>type</name> = <name>SQLITE_TEXT</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>val</name>.<name>enc</name> = <name>SQLITE_UTF8</name></expr>;</expr_stmt>

  <for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<name>repeat_count</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
    <if>if<condition>( <expr><name>do_calls</name></expr> )</condition><then><block>{
      <expr_stmt><expr><name>zVal</name> = (<name>char</name>*)<call><name>sqlite3_value_text</name><argument_list>(<argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></for>

  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<function><type><name>static</name> <name>u8</name></type> <name>name_to_enc</name><parameter_list>(<param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>, <param><decl><type><name>Tcl_Obj</name> *</type><name>pObj</name></decl></param>)</parameter_list><block>{
  <struct>struct <name>EncName</name> <block>{<public type="default">
    <decl_stmt><decl><type><name>char</name> *</type><name>zName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>u8</name></type> <name>enc</name></decl>;</decl_stmt>
  </public>}</block> <decl><name><name>encnames</name><index>[]</index></name> =<init> <expr><block>{
    <expr><block>{ <expr>"UTF8"</expr>, <expr><name>SQLITE_UTF8</name></expr> }</block></expr>,
    <expr><block>{ <expr>"UTF16LE"</expr>, <expr><name>SQLITE_UTF16LE</name></expr> }</block></expr>,
    <expr><block>{ <expr>"UTF16BE"</expr>, <expr><name>SQLITE_UTF16BE</name></expr> }</block></expr>,
    <expr><block>{ <expr>"UTF16"</expr>, <expr><name>SQLITE_UTF16</name></expr> }</block></expr>,
    <expr><block>{ <expr>0</expr>, <expr>0</expr> }</block></expr>
  }</block></expr></init></decl>;</struct>
  <decl_stmt><decl><type>struct <name>EncName</name> *</type><name>pEnc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>z</name> =<init> <expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name>pObj</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for(<init><expr><name>pEnc</name>=&amp;<name><name>encnames</name><index>[<expr>0</expr>]</index></name></expr>;</init> <condition><expr><name>pEnc</name>-&gt;<name>zName</name></expr>;</condition> <incr><expr><name>pEnc</name>++</expr></incr>)<block>{
    <if>if<condition>( <expr>0==<call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>pEnc</name>-&gt;<name>zName</name></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
      <break>break;</break>
    }</block></then></if>
  }</block></for>
  <if>if<condition>( <expr>!<name>pEnc</name>-&gt;<name>enc</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"No such encoding: "</expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <if>if<condition>( <expr><name>pEnc</name>-&gt;<name>enc</name>==<name>SQLITE_UTF16</name></expr> )</condition><then><block>{
    <return>return <expr><name>SQLITE_UTF16NATIVE</name></expr>;</return>
  }</block></then></if>
  <return>return <expr><name>pEnc</name>-&gt;<name>enc</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage:   test_translate &lt;string/blob&gt; &lt;from enc&gt; &lt;to enc&gt; ?&lt;transient&gt;?
**
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_translate</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>u8</name></type> <name>enc_from</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u8</name></type> <name>enc_to</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_value</name> *</type><name>pVal</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>char</name> *</type><name>z</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
  <function_decl><type><name>void</name></type> (*<name>xDel</name>)<parameter_list>(<param><decl><type><name>void</name> *</type><name>p</name></decl></param>)</parameter_list> <specifier/>= <specifier>SQLITE_STATIC</specifier>;</function_decl>

  <if>if<condition>( <expr><name>objc</name>!=4 &amp;&amp; <name>objc</name>!=5</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>,
        <argument><expr><call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>, 
        <argument><expr>" &lt;string/blob&gt; &lt;from enc&gt; &lt;to enc&gt;"</expr></argument>, <argument><expr>0</expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><name>objc</name>==5</expr> )</condition><then><block>{
    <expr_stmt><expr><name>xDel</name> = <name>sqlite3_free</name></expr>;</expr_stmt>
  }</block></then></if>

  <expr_stmt><expr><name>enc_from</name> = <call><name>name_to_enc</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr>!<name>enc_from</name></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><name>enc_to</name> = <call><name>name_to_enc</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>3</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr>!<name>enc_to</name></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><name>pVal</name> = <call><name>sqlite3ValueNew</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if<condition>( <expr><name>enc_from</name>==<name>SQLITE_UTF8</name></expr> )</condition><then><block>{
    <expr_stmt><expr><name>z</name> = <call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>( <expr><name>objc</name>==5</expr> )</condition><then><block>{
      <expr_stmt><expr><name>z</name> = <call><name>sqlite3DbStrDup</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>sqlite3ValueSetStr</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>enc_from</name></expr></argument>, <argument><expr><name>xDel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then><else>else<block>{
    <expr_stmt><expr><name>z</name> = (<name>char</name>*)<call><name>Tcl_GetByteArrayFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>( <expr><name>objc</name>==5</expr> )</condition><then><block>{
      <decl_stmt><decl><type><name>char</name> *</type><name>zTmp</name> =<init> <expr><name>z</name></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>z</name> = <call><name>sqlite3_malloc</name><argument_list>(<argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr><name>zTmp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>sqlite3ValueSetStr</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>enc_from</name></expr></argument>, <argument><expr><name>xDel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>

  <expr_stmt><expr><name>z</name> = (<name>char</name> *)<call><name>sqlite3ValueText</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>enc_to</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>len</name> = <call><name>sqlite3ValueBytes</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>enc_to</name></expr></argument>)</argument_list></call> + (<name>enc_to</name>==<name>SQLITE_UTF8</name>?1:2)</expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_NewByteArrayObj</name><argument_list>(<argument><expr>(<name>u8</name>*)<name>z</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>sqlite3ValueFree</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage: translate_selftest
**
** Call sqlite3UtfSelfTest() to run the internal tests for unicode
** translation. If there is a problem an assert() will fail.
**/</comment>
<function_decl><type><name>void</name></type> <name>sqlite3UtfSelfTest</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list>;</function_decl>
<function><type><name>static</name> <name>int</name></type> <name>test_translate_selftest</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_UTF16</name></cpp:ifndef>
  <expr_stmt><expr><call><name>sqlite3UtfSelfTest</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
}</block></function>


<comment type="block">/*
** Register commands with the TCL interpreter.
*/</comment>
<function><type><name>int</name></type> <name>Sqlitetest5_Init</name><parameter_list>(<param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>static</name> <struct>struct <block>{<public type="default"/>
    <decl_stmt><decl><type><name>char</name> *</type><name>zName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Tcl_ObjCmdProc</name> *</type><name>xProc</name></decl>;</decl_stmt>
  }</block> <decl><name><name>aCmd</name><index>[]</index></name> =<init> <expr><block>{
    <expr><block>{ <expr>"binarize"</expr>,                <expr>(<name>Tcl_ObjCmdProc</name>*)<name>binarize</name></expr> }</block></expr>,
    <expr><block>{ <expr>"test_value_overhead"</expr>,     <expr>(<name>Tcl_ObjCmdProc</name>*)<name>test_value_overhead</name></expr> }</block></expr>,
    <expr><block>{ <expr>"test_translate"</expr>,          <expr>(<name>Tcl_ObjCmdProc</name>*)<name>test_translate</name></expr>     }</block></expr>,
    <expr><block>{ <expr>"translate_selftest"</expr>,      <expr>(<name>Tcl_ObjCmdProc</name>*)<name>test_translate_selftest</name></expr>}</block></expr>,
  }</block></expr></init></decl>;</struct></type></decl></decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<call><name>sizeof</name><argument_list>(<argument><expr><name>aCmd</name></expr></argument>)</argument_list></call>/<call><name>sizeof</name><argument_list>(<argument><expr><name><name>aCmd</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
    <expr_stmt><expr><call><name>Tcl_CreateObjCommand</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>aCmd</name><index>[<expr><name>i</name></expr>]</index></name>.<name>zName</name></expr></argument>, <argument><expr><name><name>aCmd</name><index>[<expr><name>i</name></expr>]</index></name>.<name>xProc</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
}</block></function>
</unit>
