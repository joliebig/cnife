<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="hwtime.h"><comment type="block">/*
** 2008 May 27
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
******************************************************************************
**
** This file contains inline asm code for retrieving "high-performance"
** counters for x86 class CPUs.
**
** $Id: hwtime.h,v 1.3 2008/08/01 14:33:15 shane Exp $
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>_HWTIME_H_</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>_HWTIME_H_</name></cpp:define>

<comment type="block">/*
** The following routine only works on pentium-class (or newer) processors.
** It uses the RDTSC opcode to read the cycle count value out of the
** processor and returns that value.  This can be used for high-res
** profiling.
*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call>) &amp;&amp; \
      (<call><name>defined</name><argument_list>(<argument><expr><name>i386</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>__i386__</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>_M_IX86</name></expr></argument>)</argument_list></call>)</expr></cpp:if>

  <cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call></expr></cpp:if>

  <function><type><name>__inline__</name> <name>sqlite_uint64</name></type> <name>sqlite3Hwtime</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list><block>{
     <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>lo</name>, <name>hi</name></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>__asm__</name></type> <name>__volatile__</name> <argument_list>(<argument><expr>"rdtsc" : "=a" (<name>lo</name>)</expr></argument>, <argument><expr>"=d" (<name>hi</name>)</expr></argument>)</argument_list></decl>;</decl_stmt>
     <return>return <expr>(<name>sqlite_uint64</name>)<name>hi</name> &lt;&lt; 32 | <name>lo</name></expr>;</return>
  }</block></function>

  <cpp:elif>#<cpp:directive>elif</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>_MSC_VER</name></expr></argument>)</argument_list></call></expr></cpp:elif>

  <macro><name>__declspec</name><argument_list>(<argument>naked</argument>)</argument_list></macro> <function><type><name>__inline</name> <name>sqlite_uint64</name> <name>__cdecl</name></type> <name>sqlite3Hwtime</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list><block>{
     <macro><name>__asm</name></macro> <block>{
        <decl_stmt><decl><type><name>rdtsc</name></type>
        <name>ret</name></decl>       ;</decl_stmt> <return>return <expr><name>value</name> <name>at</name> <name>EDX</name>:<name>EAX</name></expr></return>
     }</block>
  }</block></function>

  <cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr>(<call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>__x86_64__</name></expr></argument>)</argument_list></call>)</expr></cpp:elif>

  <function><type><name>__inline__</name> <name>sqlite_uint64</name></type> <name>sqlite3Hwtime</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list><block>{
      <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>val</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>__asm__</name></type> <name>__volatile__</name> <argument_list>(<argument><expr>"rdtsc" : "=A" (<name>val</name>)</expr></argument>)</argument_list></decl>;</decl_stmt>
      <return>return <expr><name>val</name></expr>;</return>
  }</block></function>
 
<cpp:elif>#<cpp:directive>elif</cpp:directive> <expr>(<call><name>defined</name><argument_list>(<argument><expr><name>__GNUC__</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>__ppc__</name></expr></argument>)</argument_list></call>)</expr></cpp:elif>

  <function><type><name>__inline__</name> <name>sqlite_uint64</name></type> <name>sqlite3Hwtime</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list><block>{
      <decl_stmt><decl><type><name>unsigned</name> <name>long</name> <name>long</name></type> <name>retval</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>unsigned</name> <name>long</name></type> <name>junk</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>__asm__</name></type> <name>__volatile__</name> <argument_list>(<argument><expr>"\n\
          1:      mftbu   %1\n\
                  mftb    %L0\n\
                  mftbu   %0\n\
                  cmpw    %0,%1\n\
                  bne     1b"
                  : "=r" (<name>retval</name>)</expr></argument>, <argument><expr>"=r" (<name>junk</name>)</expr></argument>)</argument_list></decl>;</decl_stmt>
      <return>return <expr><name>retval</name></expr>;</return>
  }</block></function>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>

  <cpp:error>#<cpp:directive>error</cpp:directive> Need implementation of sqlite3Hwtime() for your platform.</cpp:error>

  <comment type="block">/*
  ** To compile without implementing sqlite3Hwtime() for your platform,
  ** you can remove the above #error and use the following
  ** stub function.  You will lose timing support for many
  ** of the debugging and testing utilities, but it should at
  ** least compile and run.
  */</comment>
  <function><type><name>sqlite_uint64</name></type> <name>sqlite3Hwtime</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list><block>{ <return>return <expr>((<name>sqlite_uint64</name>)0)</expr>;</return> }</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !defined(_HWTIME_H_) */</comment>
</unit>
