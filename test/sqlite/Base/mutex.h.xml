<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="mutex.h"><comment type="block">/*
** 2007 August 28
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
**
** This file contains the common header for all mutex implementations.
** The sqliteInt.h header #includes this file so that it is available
** to all source files.  We break it out in an effort to keep the code
** better organized.
**
** NOTE:  source files should *not* #include this header file directly.
** Source files should #include the sqliteInt.h file and let that file
** include this one indirectly.
**
** $Id: mutex.h,v 1.9 2008/10/07 15:25:48 drh Exp $
*/</comment>


<comment type="block">/*
** Figure out what version of the code to use.  The choices are
**
**   SQLITE_MUTEX_OMIT         No mutex logic.  Not even stubs.  The
**                             mutexes implemention cannot be overridden
**                             at start-time.
**
**   SQLITE_MUTEX_NOOP         For single-threaded applications.  No
**                             mutual exclusion is provided.  But this
**                             implementation can be overridden at
**                             start-time.
**
**   SQLITE_MUTEX_PTHREADS     For multi-threaded applications on Unix.
**
**   SQLITE_MUTEX_W32          For multi-threaded applications on Win32.
**
**   SQLITE_MUTEX_OS2          For multi-threaded applications on OS/2.
*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<name>SQLITE_THREADSAFE</name></expr></cpp:if>
<cpp:define># <cpp:directive>define</cpp:directive> <name>SQLITE_MUTEX_OMIT</name></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_THREADSAFE</name> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_MUTEX_NOOP</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#  <cpp:directive>if</cpp:directive> <expr><name>SQLITE_OS_UNIX</name></expr></cpp:if>
<cpp:define>#    <cpp:directive>define</cpp:directive> <name>SQLITE_MUTEX_PTHREADS</name></cpp:define>
<cpp:elif>#  <cpp:directive>elif</cpp:directive> <expr><name>SQLITE_OS_WIN</name></expr></cpp:elif>
<cpp:define>#    <cpp:directive>define</cpp:directive> <name>SQLITE_MUTEX_W32</name></cpp:define>
<cpp:elif>#  <cpp:directive>elif</cpp:directive> <expr><name>SQLITE_OS_OS2</name></expr></cpp:elif>
<cpp:define>#    <cpp:directive>define</cpp:directive> <name>SQLITE_MUTEX_OS2</name></cpp:define>
<cpp:else>#  <cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#    <cpp:directive>define</cpp:directive> <name>SQLITE_MUTEX_NOOP</name></cpp:define>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_MUTEX_OMIT</name></cpp:ifdef>
<comment type="block">/*
** If this is a no-op implementation, implement everything as macros.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>sqlite3_mutex_alloc</name>(X)    ((sqlite3_mutex*)8)</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>sqlite3_mutex_free</name>(X)</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>sqlite3_mutex_enter</name>(X)</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>sqlite3_mutex_try</name>(X)      SQLITE_OK</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>sqlite3_mutex_leave</name>(X)</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>sqlite3_mutex_held</name>(X)     1</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>sqlite3_mutex_notheld</name>(X)  1</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>sqlite3MutexAlloc</name>(X)      ((sqlite3_mutex*)8)</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>sqlite3MutexInit</name>()        SQLITE_OK</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>sqlite3MutexEnd</name>()</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* defined(SQLITE_OMIT_MUTEX) */</comment>
</unit>
