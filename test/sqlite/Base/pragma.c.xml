<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="pragma.c" filename=""><comment type="block">/*
** 2003 April 6
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** This file contains code used to implement the PRAGMA command.
**
** $Id: pragma.c,v 1.201 2009/01/13 20:14:16 drh Exp $
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<comment type="block">/* Ignore this whole file if pragmas are disabled
*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_OMIT_PRAGMA</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_OMIT_PARSER</name></expr></argument>)</argument_list></call></expr></cpp:if>

<comment type="block">/*
** Interpret the given string as a safety level.  Return 0 for OFF,
** 1 for ON or NORMAL and 2 for FULL.  Return 1 for an empty or 
** unrecognized string argument.
**
** Note that the values returned are one less that the values that
** should be passed into sqlite3BtreeSetSafetyLevel().  The is done
** to support legacy SQL code.  The safety level used to be boolean
** and older scripts may have used numbers 0 for OFF and 1 for ON.
*/</comment>
<function><type><name>static</name> <name>u8</name></type> <name>getSafetyLevel</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type><name>z</name></decl></param>)</parameter_list><block>{
                             <comment type="block">/* 123456789 123456789 */</comment>
  <decl_stmt><decl><type><name>static</name> <name>const</name> <name>char</name></type> <name><name>zText</name><index>[]</index></name> =<init> <expr>"onoffalseyestruefull"</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>static</name> <name>const</name> <name>u8</name></type> <name><name>iOffset</name><index>[]</index></name> =<init> <expr><block>{<expr>0</expr>, <expr>1</expr>, <expr>2</expr>, <expr>4</expr>, <expr>9</expr>, <expr>12</expr>, <expr>16</expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>static</name> <name>const</name> <name>u8</name></type> <name><name>iLength</name><index>[]</index></name> =<init> <expr><block>{<expr>2</expr>, <expr>2</expr>, <expr>3</expr>, <expr>5</expr>, <expr>3</expr>, <expr>4</expr>, <expr>4</expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>static</name> <name>const</name> <name>u8</name></type> <name><name>iValue</name><index>[]</index></name> =<init>  <expr><block>{<expr>1</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>, <expr>1</expr>, <expr>1</expr>, <expr>2</expr>}</block></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name>, <name>n</name></decl>;</decl_stmt>
  <if>if<condition>( <expr><call><name>isdigit</name><argument_list>(<argument><expr>*<name>z</name></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
    <return>return <expr>(<name>u8</name>)<call><name>atoi</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><name>n</name> = <call><name>sqlite3Strlen30</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<call><name>ArraySize</name><argument_list>(<argument><expr><name>iLength</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
    <if>if<condition>( <expr><name><name>iLength</name><index>[<expr><name>i</name></expr>]</index></name>==<name>n</name> &amp;&amp; <call><name>sqlite3StrNICmp</name><argument_list>(<argument><expr>&amp;<name><name>zText</name><index>[<expr><name><name>iOffset</name><index>[<expr><name>i</name></expr>]</index></name></expr>]</index></name></expr></argument>,<argument><expr><name>z</name></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
      <return>return <expr><name><name>iValue</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</return>
    }</block></then></if>
  }</block></for>
  <return>return <expr>1</expr>;</return>
}</block></function>

<comment type="block">/*
** Interpret the given string as a boolean value.
*/</comment>
<function><type><name>static</name> <name>u8</name></type> <name>getBoolean</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type><name>z</name></decl></param>)</parameter_list><block>{
  <return>return <expr><call><name>getSafetyLevel</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call>&amp;1</expr>;</return>
}</block></function>

<comment type="block">/*
** Interpret the given string as a locking mode value.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>getLockingMode</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type><name>z</name></decl></param>)</parameter_list><block>{
  <if>if<condition>( <expr><name>z</name></expr> )</condition><then><block>{
    <if>if<condition>( <expr>0==<call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr>"exclusive"</expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>PAGER_LOCKINGMODE_EXCLUSIVE</name></expr>;</return></then></if>
    <if>if<condition>( <expr>0==<call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr>"normal"</expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>PAGER_LOCKINGMODE_NORMAL</name></expr>;</return></then></if>
  }</block></then></if>
  <return>return <expr><name>PAGER_LOCKINGMODE_QUERY</name></expr>;</return>
}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_AUTOVACUUM</name></cpp:ifndef>
<comment type="block">/*
** Interpret the given string as an auto-vacuum mode value.
**
** The following strings, "none", "full" and "incremental" are 
** acceptable, as are their numeric equivalents: 0, 1 and 2 respectively.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>getAutoVacuum</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type><name>z</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <if>if<condition>( <expr>0==<call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr>"none"</expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>BTREE_AUTOVACUUM_NONE</name></expr>;</return></then></if>
  <if>if<condition>( <expr>0==<call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr>"full"</expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>BTREE_AUTOVACUUM_FULL</name></expr>;</return></then></if>
  <if>if<condition>( <expr>0==<call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr>"incremental"</expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>BTREE_AUTOVACUUM_INCR</name></expr>;</return></then></if>
  <expr_stmt><expr><name>i</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr>(<name>u8</name>)((<name>i</name>&gt;=0&amp;&amp;<name>i</name>&lt;=2)?<name>i</name>:0)</expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* ifndef SQLITE_OMIT_AUTOVACUUM */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_PAGER_PRAGMAS</name></cpp:ifndef>
<comment type="block">/*
** Interpret the given string as a temp db location. Return 1 for file
** backed temporary databases, 2 for the Red-Black tree in memory database
** and 0 to use the compile-time default.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>getTempStore</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type><name>z</name></decl></param>)</parameter_list><block>{
  <if>if<condition>( <expr><name><name>z</name><index>[<expr>0</expr>]</index></name>&gt;='0' &amp;&amp; <name><name>z</name><index>[<expr>0</expr>]</index></name>&lt;='2'</expr> )</condition><then><block>{
    <return>return <expr><name><name>z</name><index>[<expr>0</expr>]</index></name> - '0'</expr>;</return>
  }</block></then><else>else <if>if<condition>( <expr><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr>"file"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
    <return>return <expr>1</expr>;</return>
  }</block></then><else>else <if>if<condition>( <expr><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>z</name></expr></argument>, <argument><expr>"memory"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
    <return>return <expr>2</expr>;</return>
  }</block></then><else>else<block>{
    <return>return <expr>0</expr>;</return>
  }</block></else></if></else></if></else></if>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_PAGER_PRAGMAS */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_PAGER_PRAGMAS</name></cpp:ifndef>
<comment type="block">/*
** Invalidate temp storage, either when the temp storage is changed
** from default, or when 'file' and the temp_store_directory has changed
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>invalidateTempStorage</name><parameter_list>(<param><decl><type><name>Parse</name> *</type><name>pParse</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name> =<init> <expr><name>pParse</name>-&gt;<name>db</name></expr></init></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>db</name>-&gt;<name><name>aDb</name><index>[<expr>1</expr>]</index></name>.<name>pBt</name>!=0</expr> )</condition><then><block>{
    <if>if<condition>( <expr>!<name>db</name>-&gt;<name>autoCommit</name> || <call><name>sqlite3BtreeIsInReadTrans</name><argument_list>(<argument><expr><name>db</name>-&gt;<name><name>aDb</name><index>[<expr>1</expr>]</index></name>.<name>pBt</name></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
      <expr_stmt><expr><call><name>sqlite3ErrorMsg</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr>"temporary storage cannot be changed "
        "from within a transaction"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>sqlite3BtreeClose</name><argument_list>(<argument><expr><name>db</name>-&gt;<name><name>aDb</name><index>[<expr>1</expr>]</index></name>.<name>pBt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>db</name>-&gt;<name><name>aDb</name><index>[<expr>1</expr>]</index></name>.<name>pBt</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3ResetInternalSchema</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_PAGER_PRAGMAS */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_PAGER_PRAGMAS</name></cpp:ifndef>
<comment type="block">/*
** If the TEMP database is open, close it and mark the database schema
** as needing reloading.  This must be done when using the SQLITE_TEMP_STORE
** or DEFAULT_TEMP_STORE pragmas.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>changeTempStorage</name><parameter_list>(<param><decl><type><name>Parse</name> *</type><name>pParse</name></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>zStorageType</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>ts</name> =<init> <expr><call><name>getTempStore</name><argument_list>(<argument><expr><name>zStorageType</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name> =<init> <expr><name>pParse</name>-&gt;<name>db</name></expr></init></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>db</name>-&gt;<name>temp_store</name>==<name>ts</name></expr> )</condition><then> <return>return <expr><name>SQLITE_OK</name></expr>;</return></then></if>
  <if>if<condition>( <expr><call><name>invalidateTempStorage</name><argument_list>( <argument><expr><name>pParse</name></expr></argument> )</argument_list></call> != <name>SQLITE_OK</name></expr> )</condition><then><block>{
    <return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><name>db</name>-&gt;<name>temp_store</name> = (<name>u8</name>)<name>ts</name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_PAGER_PRAGMAS */</comment>

<comment type="block">/*
** Generate code to return a single integer value.
*/</comment>
<function><type><name>static</name> <name>void</name></type> <name>returnSingleInt</name><parameter_list>(<param><decl><type><name>Parse</name> *</type><name>pParse</name></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>zLabel</name></decl></param>, <param><decl><type><name>int</name></type> <name>value</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>Vdbe</name> *</type><name>v</name> =<init> <expr><call><name>sqlite3GetVdbe</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>mem</name> =<init> <expr>++<name>pParse</name>-&gt;<name>nMem</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Integer</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>pParse</name>-&gt;<name>explain</name>==0</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>sqlite3VdbeSetNumCols</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeSetColName</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>COLNAME_NAME</name></expr></argument>, <argument><expr><name>zLabel</name></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_ResultRow</name></expr></argument>, <argument><expr><name>mem</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_FLAG_PRAGMAS</name></cpp:ifndef>
<comment type="block">/*
** Check to see if zRight and zLeft refer to a pragma that queries
** or changes one of the flags in db-&gt;flags.  Return 1 if so and 0 if not.
** Also, implement the pragma.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>flagPragma</name><parameter_list>(<param><decl><type><name>Parse</name> *</type><name>pParse</name></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>zLeft</name></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>zRight</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>static</name> <name>const</name> struct</type> <name>sPragmaType</name> <block>{
    <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>zName</name></decl>;</decl_stmt>  <comment type="block">/* Name of the pragma */</comment>
    <decl_stmt><decl><type><name>int</name></type> <name>mask</name></decl>;</decl_stmt>           <comment type="block">/* Mask for the db-&gt;flags value */</comment>
  }</block></decl></decl_stmt> <expr_stmt><expr><name><name>aPragma</name><index>[]</index></name> = <block>{
    <expr><block>{ <expr>"full_column_names"</expr>,        <expr><name>SQLITE_FullColNames</name></expr>  }</block></expr>,
    <expr><block>{ <expr>"short_column_names"</expr>,       <expr><name>SQLITE_ShortColNames</name></expr> }</block></expr>,
    <expr><block>{ <expr>"count_changes"</expr>,            <expr><name>SQLITE_CountRows</name></expr>     }</block></expr>,
    <expr><block>{ <expr>"empty_result_callbacks"</expr>,   <expr><name>SQLITE_NullCallback</name></expr>  }</block></expr>,
    <expr><block>{ <expr>"legacy_file_format"</expr>,       <expr><name>SQLITE_LegacyFileFmt</name></expr> }</block></expr>,
    <expr><block>{ <expr>"fullfsync"</expr>,                <expr><name>SQLITE_FullFSync</name></expr>     }</block></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_DEBUG</name></cpp:ifdef>
    <expr><block>{ <expr>"sql_trace"</expr>,                <expr><name>SQLITE_SqlTrace</name></expr>      }</block></expr>,
    <expr><block>{ <expr>"vdbe_listing"</expr>,             <expr><name>SQLITE_VdbeListing</name></expr>   }</block></expr>,
    <expr><block>{ <expr>"vdbe_trace"</expr>,               <expr><name>SQLITE_VdbeTrace</name></expr>     }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_CHECK</name></cpp:ifndef>
    <expr><block>{ <expr>"ignore_check_constraints"</expr>, <expr><name>SQLITE_IgnoreChecks</name></expr>  }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <comment type="block">/* The following is VERY experimental */</comment>
    <expr><block>{ <expr>"writable_schema"</expr>,          <expr><name>SQLITE_WriteSchema</name>|<name>SQLITE_RecoveryMode</name></expr> }</block></expr>,
    <expr><block>{ <expr>"omit_readlock"</expr>,            <expr><name>SQLITE_NoReadlock</name></expr>    }</block></expr>,

    <comment type="block">/* TODO: Maybe it shouldn't be possible to change the ReadUncommitted
    ** flag if there are any active statements. */</comment>
    <expr><block>{ <expr>"read_uncommitted"</expr>,         <expr><name>SQLITE_ReadUncommitted</name></expr> }</block></expr>,
  }</block></expr>;</expr_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>const</name> struct <name>sPragmaType</name> *</type><name>p</name></decl>;</decl_stmt>
  <for>for(<init><expr><name>i</name>=0</expr>, <expr><name>p</name>=<name>aPragma</name></expr>;</init> <condition><expr><name>i</name>&lt;<call><name>ArraySize</name><argument_list>(<argument><expr><name>aPragma</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>p</name>++</expr></incr>)<block>{
    <if>if<condition>( <expr><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>, <argument><expr><name>p</name>-&gt;<name>zName</name></expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
      <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name> =<init> <expr><name>pParse</name>-&gt;<name>db</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Vdbe</name> *</type><name>v</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>v</name> = <call><name>sqlite3GetVdbe</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>v</name>!=0</expr></argument> )</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Already allocated by sqlite3Pragma() */</comment>
      <if>if<condition>( <expr><call><name>ALWAYS</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
        <if>if<condition>( <expr><name>zRight</name>==0</expr> )</condition><then><block>{
          <expr_stmt><expr><call><name>returnSingleInt</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>p</name>-&gt;<name>zName</name></expr></argument>, <argument><expr>(<name>db</name>-&gt;<name>flags</name> &amp; <name>p</name>-&gt;<name>mask</name>)!=0</expr></argument> )</argument_list></call></expr>;</expr_stmt>
        }</block></then><else>else<block>{
          <if>if<condition>( <expr><call><name>getBoolean</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
            <expr_stmt><expr><name>db</name>-&gt;<name>flags</name> |= <name>p</name>-&gt;<name>mask</name></expr>;</expr_stmt>
          }</block></then><else>else<block>{
            <expr_stmt><expr><name>db</name>-&gt;<name>flags</name> &amp;= ~<name>p</name>-&gt;<name>mask</name></expr>;</expr_stmt>
          }</block></else></if>

          <comment type="block">/* Many of the flag-pragmas modify the code generated by the SQL 
          ** compiler (eg. count_changes). So add an opcode to expire all
          ** compiled SQL statements after modifying a pragma value.
          */</comment>
          <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Expire</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
      }</block></then></if>

      <return>return <expr>1</expr>;</return>
    }</block></then></if>
  }</block></for>
  <return>return <expr>0</expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_FLAG_PRAGMAS */</comment>

<comment type="block">/*
** Return a human-readable name for a constraint resolution action.
*/</comment>
<function><type><name>static</name> <name>const</name> <name>char</name> *</type><name>actionName</name><parameter_list>(<param><decl><type><name>u8</name></type> <name>action</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>zName</name></decl>;</decl_stmt>
  <switch>switch<condition>( <expr><name>action</name></expr> )</condition><block>{
    <case>case <expr><name>OE_SetNull</name></expr>:  <expr_stmt><expr><name>zName</name> = "SET NULL"</expr>;</expr_stmt>            <break>break;</break>
    </case><case>case <expr><name>OE_SetDflt</name></expr>:  <expr_stmt><expr><name>zName</name> = "SET DEFAULT"</expr>;</expr_stmt>         <break>break;</break>
    </case><case>case <expr><name>OE_Cascade</name></expr>:  <expr_stmt><expr><name>zName</name> = "CASCADE"</expr>;</expr_stmt>             <break>break;</break>
    </case><default>default:          <expr_stmt><expr><name>zName</name> = "RESTRICT"</expr>;</expr_stmt>  
                      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>action</name>==<name>OE_Restrict</name></expr></argument> )</argument_list></call></expr>;</expr_stmt> <break>break;</break>
  </default>}</block></switch>
  <return>return <expr><name>zName</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Process a pragma statement.  
**
** Pragmas are of this form:
**
**      PRAGMA [database.]id [= value]
**
** The identifier might also be a string.  The value is a string, and
** identifier, or a number.  If minusFlag is true, then the value is
** a number that was preceded by a minus sign.
**
** If the left side is "database.id" then pId1 is the database name
** and pId2 is the id.  If the left side is just "id" then pId1 is the
** id and pId2 is any empty string.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3Pragma</name><parameter_list>(
  <param><decl><type><name>Parse</name> *</type><name>pParse</name></decl></param>, 
  <param><decl><type><name>Token</name> *</type><name>pId1</name></decl></param>,        <comment type="block">/* First part of [database.]id field */</comment>
  <param><decl><type><name>Token</name> *</type><name>pId2</name></decl></param>,        <comment type="block">/* Second part of [database.]id field, or NULL */</comment>
  <param><decl><type><name>Token</name> *</type><name>pValue</name></decl></param>,      <comment type="block">/* Token for &lt;value&gt;, or NULL */</comment>
  <param><decl><type><name>int</name></type> <name>minusFlag</name></decl></param>       <comment type="block">/* True if a '-' sign preceded &lt;value&gt; */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>char</name> *</type><name>zLeft</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>       <comment type="block">/* Nul-terminated UTF-8 string &lt;id&gt; */</comment>
  <decl_stmt><decl><type><name>char</name> *</type><name>zRight</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>      <comment type="block">/* Nul-terminated UTF-8 string &lt;value&gt;, or NULL */</comment>
  <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>zDb</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>   <comment type="block">/* The database name */</comment>
  <decl_stmt><decl><type><name>Token</name> *</type><name>pId</name></decl>;</decl_stmt>            <comment type="block">/* Pointer to &lt;id&gt; token */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>iDb</name></decl>;</decl_stmt>               <comment type="block">/* Database index for &lt;database&gt; */</comment>
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name> =<init> <expr><name>pParse</name>-&gt;<name>db</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Db</name> *</type><name>pDb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Vdbe</name> *</type><name>v</name> =<init> <expr><name>pParse</name>-&gt;<name>pVdbe</name> = <call><name>sqlite3VdbeCreate</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>v</name>==0</expr> )</condition><then> <return>return;</return></then></if>
  <expr_stmt><expr><name>pParse</name>-&gt;<name>nMem</name> = 2</expr>;</expr_stmt>

  <comment type="block">/* Interpret the [database.] part of the pragma statement. iDb is the
  ** index of the database this pragma is being applied to in db.aDb[]. */</comment>
  <expr_stmt><expr><name>iDb</name> = <call><name>sqlite3TwoPartName</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>pId1</name></expr></argument>, <argument><expr><name>pId2</name></expr></argument>, <argument><expr>&amp;<name>pId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>iDb</name>&lt;0</expr> )</condition><then> <return>return;</return></then></if>
  <expr_stmt><expr><name>pDb</name> = &amp;<name>db</name>-&gt;<name><name>aDb</name><index>[<expr><name>iDb</name></expr>]</index></name></expr>;</expr_stmt>

  <comment type="block">/* If the temp database has been explicitly named as part of the 
  ** pragma, make sure it is open. 
  */</comment>
  <if>if<condition>( <expr><name>iDb</name>==1 &amp;&amp; <call><name>sqlite3OpenTempDatabase</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
    <return>return;</return>
  }</block></then></if>

  <expr_stmt><expr><name>zLeft</name> = <call><name>sqlite3NameFromToken</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pId</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr>!<name>zLeft</name></expr> )</condition><then> <return>return;</return></then></if>
  <if>if<condition>( <expr><name>minusFlag</name></expr> )</condition><then><block>{
    <expr_stmt><expr><name>zRight</name> = <call><name>sqlite3MPrintf</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr>"-%T"</expr></argument>, <argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then><else>else<block>{
    <expr_stmt><expr><name>zRight</name> = <call><name>sqlite3NameFromToken</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pId2</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zDb</name> = <name>pId2</name>-&gt;<name>n</name>&gt;0 ? <name>pDb</name>-&gt;<name>zName</name> : 0</expr>;</expr_stmt>
  <if>if<condition>( <expr><call><name>sqlite3AuthCheck</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>SQLITE_PRAGMA</name></expr></argument>, <argument><expr><name>zLeft</name></expr></argument>, <argument><expr><name>zRight</name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
    <goto>goto <name>pragma_out</name>;</goto>
  }</block></then></if>
 
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_PAGER_PRAGMAS</name></cpp:ifndef>
  <comment type="block">/*
  **  PRAGMA [database.]default_cache_size
  **  PRAGMA [database.]default_cache_size=N
  **
  ** The first form reports the current persistent setting for the
  ** page cache size.  The value returned is the maximum number of
  ** pages in the page cache.  The second form sets both the current
  ** page cache size value and the persistent page cache size value
  ** stored in the database file.
  **
  ** The default cache size is stored in meta-value 2 of page 1 of the
  ** database file.  The cache size is actually the absolute value of
  ** this memory location.  The sign of meta-value 2 determines the
  ** synchronous setting.  A negative value means synchronous is off
  ** and a positive value means synchronous is on.
  */</comment>
  <if>if<condition>( <expr><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>,<argument><expr>"default_cache_size"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
    <decl_stmt><decl><type><name>static</name> <name>const</name> <name>VdbeOpList</name></type> <name><name>getCacheSize</name><index>[]</index></name> =<init> <expr><block>{
      <expr><block>{ <expr><name>OP_ReadCookie</name></expr>,  <expr>0</expr>, <expr>1</expr>,        <expr>2</expr>}</block></expr>,  <comment type="block">/* 0 */</comment>
      <expr><block>{ <expr><name>OP_IfPos</name></expr>,       <expr>1</expr>, <expr>6</expr>,        <expr>0</expr>}</block></expr>,
      <expr><block>{ <expr><name>OP_Integer</name></expr>,     <expr>0</expr>, <expr>2</expr>,        <expr>0</expr>}</block></expr>,
      <expr><block>{ <expr><name>OP_Subtract</name></expr>,    <expr>1</expr>, <expr>2</expr>,        <expr>1</expr>}</block></expr>,
      <expr><block>{ <expr><name>OP_IfPos</name></expr>,       <expr>1</expr>, <expr>6</expr>,        <expr>0</expr>}</block></expr>,
      <expr><block>{ <expr><name>OP_Integer</name></expr>,     <expr>0</expr>, <expr>1</expr>,        <expr>0</expr>}</block></expr>,  <comment type="block">/* 5 */</comment>
      <expr><block>{ <expr><name>OP_ResultRow</name></expr>,   <expr>1</expr>, <expr>1</expr>,        <expr>0</expr>}</block></expr>,
    }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>addr</name></decl>;</decl_stmt>
    <if>if<condition>( <expr><call><name>sqlite3ReadSchema</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr> )</condition><then> <goto>goto <name>pragma_out</name>;</goto></then></if>
    <expr_stmt><expr><call><name>sqlite3VdbeUsesBtree</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>( <expr>!<name>zRight</name></expr> )</condition><then><block>{
      <expr_stmt><expr><call><name>sqlite3VdbeSetNumCols</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeSetColName</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>COLNAME_NAME</name></expr></argument>, <argument><expr>"cache_size"</expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pParse</name>-&gt;<name>nMem</name> += 2</expr>;</expr_stmt>
      <expr_stmt><expr><name>addr</name> = <call><name>sqlite3VdbeAddOpList</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>ArraySize</name><argument_list>(<argument><expr><name>getCacheSize</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>getCacheSize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeChangeP1</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeChangeP1</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>addr</name>+5</expr></argument>, <argument><expr><name>SQLITE_DEFAULT_CACHE_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then><else>else<block>{
      <decl_stmt><decl><type><name>int</name></type> <name>size</name> =<init> <expr><call><name>atoi</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if<condition>( <expr><name>size</name>&lt;0</expr> )</condition><then> <expr_stmt><expr><name>size</name> = -<name>size</name></expr>;</expr_stmt></then></if>
      <expr_stmt><expr><call><name>sqlite3BeginWriteOperation</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>iDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Integer</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp3</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_ReadCookie</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>addr</name> = <call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_IfPos</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Integer</name></expr></argument>, <argument><expr>-<name>size</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeJumpHere</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp3</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_SetCookie</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pDb</name>-&gt;<name>pSchema</name>-&gt;<name>cache_size</name> = <name>size</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3BtreeSetCacheSize</name><argument_list>(<argument><expr><name>pDb</name>-&gt;<name>pBt</name></expr></argument>, <argument><expr><name>pDb</name>-&gt;<name>pSchema</name>-&gt;<name>cache_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></then><else>else

  <comment type="block">/*
  **  PRAGMA [database.]page_size
  **  PRAGMA [database.]page_size=N
  **
  ** The first form reports the current setting for the
  ** database page size in bytes.  The second form sets the
  ** database page size value.  The value can only be set if
  ** the database has not yet been created.
  */</comment>
  <if>if<condition>( <expr><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>,<argument><expr>"page_size"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
    <decl_stmt><decl><type><name>Btree</name> *</type><name>pBt</name> =<init> <expr><name>pDb</name>-&gt;<name>pBt</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pBt</name>!=0</expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>( <expr>!<name>zRight</name></expr> )</condition><then><block>{
      <decl_stmt><decl><type><name>int</name></type> <name>size</name> =<init> <expr><call><name>ALWAYS</name><argument_list>(<argument><expr><name>pBt</name></expr></argument>)</argument_list></call> ? <call><name>sqlite3BtreeGetPageSize</name><argument_list>(<argument><expr><name>pBt</name></expr></argument>)</argument_list></call> : 0</expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>returnSingleInt</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr>"page_size"</expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then><else>else<block>{
      <comment type="block">/* Malloc may fail when setting the page-size, as there is an internal
      ** buffer that the pager module resizes using sqlite3_realloc().
      */</comment>
      <expr_stmt><expr><name>db</name>-&gt;<name>nextPagesize</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if<condition>( <expr><name>SQLITE_NOMEM</name>==<call><name>sqlite3BtreeSetPageSize</name><argument_list>(<argument><expr><name>pBt</name></expr></argument>, <argument><expr><name>db</name>-&gt;<name>nextPagesize</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr> )</condition><then><block>{
        <expr_stmt><expr><name>db</name>-&gt;<name>mallocFailed</name> = 1</expr>;</expr_stmt>
      }</block></then></if>
    }</block></else></if>
  }</block></then><else>else

  <comment type="block">/*
  **  PRAGMA [database.]max_page_count
  **  PRAGMA [database.]max_page_count=N
  **
  ** The first form reports the current setting for the
  ** maximum number of pages in the database file.  The 
  ** second form attempts to change this setting.  Both
  ** forms return the current setting.
  */</comment>
  <if>if<condition>( <expr><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>,<argument><expr>"max_page_count"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
    <decl_stmt><decl><type><name>Btree</name> *</type><name>pBt</name> =<init> <expr><name>pDb</name>-&gt;<name>pBt</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>newMax</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pBt</name>!=0</expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>( <expr><name>zRight</name></expr> )</condition><then><block>{
      <expr_stmt><expr><name>newMax</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <if>if<condition>( <expr><call><name>ALWAYS</name><argument_list>(<argument><expr><name>pBt</name></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
      <expr_stmt><expr><name>newMax</name> = <call><name>sqlite3BtreeMaxPageCount</name><argument_list>(<argument><expr><name>pBt</name></expr></argument>, <argument><expr><name>newMax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>returnSingleInt</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr>"max_page_count"</expr></argument>, <argument><expr><name>newMax</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then><else>else

  <comment type="block">/*
  **  PRAGMA [database.]page_count
  **
  ** Return the number of pages in the specified database.
  */</comment>
  <if>if<condition>( <expr><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>,<argument><expr>"page_count"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>iReg</name></decl>;</decl_stmt>
    <if>if<condition>( <expr><call><name>sqlite3ReadSchema</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr> )</condition><then> <goto>goto <name>pragma_out</name>;</goto></then></if>
    <expr_stmt><expr><call><name>sqlite3CodeVerifySchema</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>iReg</name> = ++<name>pParse</name>-&gt;<name>nMem</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Pagecount</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>, <argument><expr><name>iReg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_ResultRow</name></expr></argument>, <argument><expr><name>iReg</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeSetNumCols</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeSetColName</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>COLNAME_NAME</name></expr></argument>, <argument><expr>"page_count"</expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then><else>else

  <comment type="block">/*
  **  PRAGMA [database.]locking_mode
  **  PRAGMA [database.]locking_mode = (normal|exclusive)
  */</comment>
  <if>if<condition>( <expr><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>,<argument><expr>"locking_mode"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
    <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>zRet</name> =<init> <expr>"normal"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>eMode</name> =<init> <expr><call><name>getLockingMode</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

    <if>if<condition>( <expr><name>pId2</name>-&gt;<name>n</name>==0 &amp;&amp; <name>eMode</name>==<name>PAGER_LOCKINGMODE_QUERY</name></expr> )</condition><then><block>{
      <comment type="block">/* Simple "PRAGMA locking_mode;" statement. This is a query for
      ** the current default locking mode (which may be different to
      ** the locking-mode of the main database).
      */</comment>
      <expr_stmt><expr><name>eMode</name> = <name>db</name>-&gt;<name>dfltLockMode</name></expr>;</expr_stmt>
    }</block></then><else>else<block>{
      <decl_stmt><decl><type><name>Pager</name> *</type><name>pPager</name></decl>;</decl_stmt>
      <if>if<condition>( <expr><name>pId2</name>-&gt;<name>n</name>==0</expr> )</condition><then><block>{
        <comment type="block">/* This indicates that no database name was specified as part
        ** of the PRAGMA command. In this case the locking-mode must be
        ** set on all attached databases, as well as the main db file.
        **
        ** Also, the sqlite3.dfltLockMode variable is set so that
        ** any subsequently attached databases also use the specified
        ** locking mode.
        */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pDb</name>==&amp;<name>db</name>-&gt;<name><name>aDb</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for(<init><expr><name>ii</name>=2</expr>;</init> <condition><expr><name>ii</name>&lt;<name>db</name>-&gt;<name>nDb</name></expr>;</condition> <incr><expr><name>ii</name>++</expr></incr>)<block>{
          <expr_stmt><expr><name>pPager</name> = <call><name>sqlite3BtreePager</name><argument_list>(<argument><expr><name>db</name>-&gt;<name><name>aDb</name><index>[<expr><name>ii</name></expr>]</index></name>.<name>pBt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3PagerLockingMode</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>, <argument><expr><name>eMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><name>db</name>-&gt;<name>dfltLockMode</name> = (<name>u8</name>)<name>eMode</name></expr>;</expr_stmt>
      }</block></then></if>
      <expr_stmt><expr><name>pPager</name> = <call><name>sqlite3BtreePager</name><argument_list>(<argument><expr><name>pDb</name>-&gt;<name>pBt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>eMode</name> = <call><name>sqlite3PagerLockingMode</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>, <argument><expr><name>eMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>

    <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>eMode</name>==<name>PAGER_LOCKINGMODE_NORMAL</name>||<name>eMode</name>==<name>PAGER_LOCKINGMODE_EXCLUSIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>( <expr><name>eMode</name>==<name>PAGER_LOCKINGMODE_EXCLUSIVE</name></expr> )</condition><then><block>{
      <expr_stmt><expr><name>zRet</name> = "exclusive"</expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>sqlite3VdbeSetNumCols</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeSetColName</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>COLNAME_NAME</name></expr></argument>, <argument><expr>"locking_mode"</expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeAddOp4</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_String8</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>zRet</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_ResultRow</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then><else>else

  <comment type="block">/*
  **  PRAGMA [database.]journal_mode
  **  PRAGMA [database.]journal_mode = (delete|persist|off|truncate|memory)
  */</comment>
  <if>if<condition>( <expr><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>,<argument><expr>"journal_mode"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>eMode</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>static</name> <name>char</name> * <name>const</name></type> <name><name>azModeName</name><index>[]</index></name> =<init> <expr><block>{
      <expr>"delete"</expr>, <expr>"persist"</expr>, <expr>"off"</expr>, <expr>"truncate"</expr>, <expr>"memory"</expr>
    }</block></expr></init></decl>;</decl_stmt>

    <if>if<condition>( <expr><name>zRight</name>==0</expr> )</condition><then><block>{
      <expr_stmt><expr><name>eMode</name> = <name>PAGER_JOURNALMODE_QUERY</name></expr>;</expr_stmt>
    }</block></then><else>else<block>{
      <decl_stmt><decl><type><name>int</name></type> <name>n</name> =<init> <expr><call><name>sqlite3Strlen30</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><name>eMode</name> = <call><name>sizeof</name><argument_list>(<argument><expr><name>azModeName</name></expr></argument>)</argument_list></call>/<call><name>sizeof</name><argument_list>(<argument><expr><name><name>azModeName</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call> - 1</expr>;</expr_stmt>
      <while>while<condition>( <expr><name>eMode</name>&gt;=0 &amp;&amp; <call><name>sqlite3StrNICmp</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr><name><name>azModeName</name><index>[<expr><name>eMode</name></expr>]</index></name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call>!=0</expr> )</condition><block>{
        <expr_stmt><expr><name>eMode</name>--</expr>;</expr_stmt>
      }</block></while>
    }</block></else></if>
    <if>if<condition>( <expr><name>pId2</name>-&gt;<name>n</name>==0 &amp;&amp; <name>eMode</name>==<name>PAGER_JOURNALMODE_QUERY</name></expr> )</condition><then><block>{
      <comment type="block">/* Simple "PRAGMA journal_mode;" statement. This is a query for
      ** the current default journal mode (which may be different to
      ** the journal-mode of the main database).
      */</comment>
      <expr_stmt><expr><name>eMode</name> = <name>db</name>-&gt;<name>dfltJournalMode</name></expr>;</expr_stmt>
    }</block></then><else>else<block>{
      <decl_stmt><decl><type><name>Pager</name> *</type><name>pPager</name></decl>;</decl_stmt>
      <if>if<condition>( <expr><name>pId2</name>-&gt;<name>n</name>==0</expr> )</condition><then><block>{
        <comment type="block">/* This indicates that no database name was specified as part
        ** of the PRAGMA command. In this case the journal-mode must be
        ** set on all attached databases, as well as the main db file.
        **
        ** Also, the sqlite3.dfltJournalMode variable is set so that
        ** any subsequently attached databases also use the specified
        ** journal mode.
        */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>ii</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pDb</name>==&amp;<name>db</name>-&gt;<name><name>aDb</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for(<init><expr><name>ii</name>=1</expr>;</init> <condition><expr><name>ii</name>&lt;<name>db</name>-&gt;<name>nDb</name></expr>;</condition> <incr><expr><name>ii</name>++</expr></incr>)<block>{
          <if>if<condition>( <expr><name>db</name>-&gt;<name><name>aDb</name><index>[<expr><name>ii</name></expr>]</index></name>.<name>pBt</name></expr> )</condition><then><block>{
            <expr_stmt><expr><name>pPager</name> = <call><name>sqlite3BtreePager</name><argument_list>(<argument><expr><name>db</name>-&gt;<name><name>aDb</name><index>[<expr><name>ii</name></expr>]</index></name>.<name>pBt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sqlite3PagerJournalMode</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>, <argument><expr><name>eMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></then></if>
        }</block></for>
        <expr_stmt><expr><name>db</name>-&gt;<name>dfltJournalMode</name> = (<name>u8</name>)<name>eMode</name></expr>;</expr_stmt>
      }</block></then></if>
      <expr_stmt><expr><name>pPager</name> = <call><name>sqlite3BtreePager</name><argument_list>(<argument><expr><name>pDb</name>-&gt;<name>pBt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>eMode</name> = <call><name>sqlite3PagerJournalMode</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>, <argument><expr><name>eMode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>eMode</name>==<name>PAGER_JOURNALMODE_DELETE</name>
              || <name>eMode</name>==<name>PAGER_JOURNALMODE_TRUNCATE</name>
              || <name>eMode</name>==<name>PAGER_JOURNALMODE_PERSIST</name>
              || <name>eMode</name>==<name>PAGER_JOURNALMODE_OFF</name>
              || <name>eMode</name>==<name>PAGER_JOURNALMODE_MEMORY</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeSetNumCols</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeSetColName</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>COLNAME_NAME</name></expr></argument>, <argument><expr>"journal_mode"</expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeAddOp4</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_String8</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, 
           <argument><expr><name><name>azModeName</name><index>[<expr><name>eMode</name></expr>]</index></name></expr></argument>, <argument><expr><name>P4_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_ResultRow</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then><else>else

  <comment type="block">/*
  **  PRAGMA [database.]journal_size_limit
  **  PRAGMA [database.]journal_size_limit=N
  **
  ** Get or set the size limit on rollback journal files.
  */</comment>
  <if>if<condition>( <expr><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>,<argument><expr>"journal_size_limit"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
    <decl_stmt><decl><type><name>Pager</name> *</type><name>pPager</name> =<init> <expr><call><name>sqlite3BtreePager</name><argument_list>(<argument><expr><name>pDb</name>-&gt;<name>pBt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>i64</name></type> <name>iLimit</name> =<init> <expr>-2</expr></init></decl>;</decl_stmt>
    <if>if<condition>( <expr><name>zRight</name></expr> )</condition><then><block>{
      <decl_stmt><decl><type><name>int</name></type> <name>iLimit32</name> =<init> <expr><call><name>atoi</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if<condition>( <expr><name>iLimit32</name>&lt;-1</expr> )</condition><then><block>{
        <expr_stmt><expr><name>iLimit32</name> = -1</expr>;</expr_stmt>
      }</block></then></if>
      <expr_stmt><expr><name>iLimit</name> = <name>iLimit32</name></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>iLimit</name> = <call><name>sqlite3PagerJournalSizeLimit</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>, <argument><expr><name>iLimit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>returnSingleInt</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr>"journal_size_limit"</expr></argument>, <argument><expr>(<name>int</name>)<name>iLimit</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then><else>else

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_PAGER_PRAGMAS */</comment>

  <comment type="block">/*
  **  PRAGMA [database.]auto_vacuum
  **  PRAGMA [database.]auto_vacuum=N
  **
  ** Get or set the value of the database 'auto-vacuum' parameter.
  ** The value is one of:  0 NONE 1 FULL 2 INCREMENTAL
  */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_AUTOVACUUM</name></cpp:ifndef>
  <if>if<condition>( <expr><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>,<argument><expr>"auto_vacuum"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
    <decl_stmt><decl><type><name>Btree</name> *</type><name>pBt</name> =<init> <expr><name>pDb</name>-&gt;<name>pBt</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pBt</name>!=0</expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>( <expr><call><name>sqlite3ReadSchema</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
      <goto>goto <name>pragma_out</name>;</goto>
    }</block></then></if>
    <if>if<condition>( <expr>!<name>zRight</name></expr> )</condition><then><block>{
      <decl_stmt><decl><type><name>int</name></type> <name>auto_vacuum</name></decl>;</decl_stmt>
      <if>if<condition>( <expr><call><name>ALWAYS</name><argument_list>(<argument><expr><name>pBt</name></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
         <expr_stmt><expr><name>auto_vacuum</name> = <call><name>sqlite3BtreeGetAutoVacuum</name><argument_list>(<argument><expr><name>pBt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then><else>else<block>{
         <expr_stmt><expr><name>auto_vacuum</name> = <name>SQLITE_DEFAULT_AUTOVACUUM</name></expr>;</expr_stmt>
      }</block></else></if>
      <expr_stmt><expr><call><name>returnSingleInt</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr>"auto_vacuum"</expr></argument>, <argument><expr><name>auto_vacuum</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then><else>else<block>{
      <decl_stmt><decl><type><name>int</name></type> <name>eAuto</name> =<init> <expr><call><name>getAutoVacuum</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>eAuto</name>&gt;=0 &amp;&amp; <name>eAuto</name>&lt;=2</expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>db</name>-&gt;<name>nextAutovac</name> = (<name>u8</name>)<name>eAuto</name></expr>;</expr_stmt>
      <if>if<condition>( <expr><call><name>ALWAYS</name><argument_list>(<argument><expr><name>eAuto</name>&gt;=0</expr></argument>)</argument_list></call></expr> )</condition><then><block>{
        <comment type="block">/* Call SetAutoVacuum() to set initialize the internal auto and
        ** incr-vacuum flags. This is required in case this connection
        ** creates the database file. It is important that it is created
        ** as an auto-vacuum capable db.
        */</comment>
        <decl_stmt><decl><type><name>int</name></type> <name>rc</name> =<init> <expr><call><name>sqlite3BtreeSetAutoVacuum</name><argument_list>(<argument><expr><name>pBt</name></expr></argument>, <argument><expr><name>eAuto</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <if>if<condition>( <expr><name>rc</name>==<name>SQLITE_OK</name> &amp;&amp; (<name>eAuto</name>==1 || <name>eAuto</name>==2)</expr> )</condition><then><block>{
          <comment type="block">/* When setting the auto_vacuum mode to either "full" or 
          ** "incremental", write the value of meta[6] in the database
          ** file. Before writing to meta[6], check that meta[3] indicates
          ** that this really is an auto-vacuum capable database.
          */</comment>
          <decl_stmt><decl><type><name>static</name> <name>const</name> <name>VdbeOpList</name></type> <name><name>setMeta6</name><index>[]</index></name> =<init> <expr><block>{
            <expr><block>{ <expr><name>OP_Transaction</name></expr>,    <expr>0</expr>,               <expr>1</expr>,        <expr>0</expr>}</block></expr>,    <comment type="block">/* 0 */</comment>
            <expr><block>{ <expr><name>OP_ReadCookie</name></expr>,     <expr>0</expr>,               <expr>1</expr>,        <expr>3</expr>}</block></expr>,    <comment type="block">/* 1 */</comment>
            <expr><block>{ <expr><name>OP_If</name></expr>,             <expr>1</expr>,               <expr>0</expr>,        <expr>0</expr>}</block></expr>,    <comment type="block">/* 2 */</comment>
            <expr><block>{ <expr><name>OP_Halt</name></expr>,           <expr><name>SQLITE_OK</name></expr>,       <expr><name>OE_Abort</name></expr>, <expr>0</expr>}</block></expr>,    <comment type="block">/* 3 */</comment>
            <expr><block>{ <expr><name>OP_Integer</name></expr>,        <expr>0</expr>,               <expr>1</expr>,        <expr>0</expr>}</block></expr>,    <comment type="block">/* 4 */</comment>
            <expr><block>{ <expr><name>OP_SetCookie</name></expr>,      <expr>0</expr>,               <expr>6</expr>,        <expr>1</expr>}</block></expr>,    <comment type="block">/* 5 */</comment>
          }</block></expr></init></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>int</name></type> <name>iAddr</name></decl>;</decl_stmt>
          <expr_stmt><expr><name>iAddr</name> = <call><name>sqlite3VdbeAddOpList</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>ArraySize</name><argument_list>(<argument><expr><name>setMeta6</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setMeta6</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeChangeP1</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>iAddr</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeChangeP1</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>iAddr</name>+1</expr></argument>, <argument><expr><name>iDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeChangeP2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>iAddr</name>+2</expr></argument>, <argument><expr><name>iAddr</name>+4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeChangeP1</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>iAddr</name>+4</expr></argument>, <argument><expr><name>eAuto</name>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeChangeP1</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>iAddr</name>+5</expr></argument>, <argument><expr><name>iDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeUsesBtree</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></then></if>
    }</block></else></if>
  }</block></then><else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/*
  **  PRAGMA [database.]incremental_vacuum(N)
  **
  ** Do N steps of incremental vacuuming on a database.
  */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_AUTOVACUUM</name></cpp:ifndef>
  <if>if<condition>( <expr><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>,<argument><expr>"incremental_vacuum"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>iLimit</name>, <name>addr</name></decl>;</decl_stmt>
    <if>if<condition>( <expr><call><name>sqlite3ReadSchema</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
      <goto>goto <name>pragma_out</name>;</goto>
    }</block></then></if>
    <if>if<condition>( <expr><name>zRight</name>==0 || !<call><name>sqlite3GetInt32</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr>&amp;<name>iLimit</name></expr></argument>)</argument_list></call> || <name>iLimit</name>&lt;=0</expr> )</condition><then><block>{
      <expr_stmt><expr><name>iLimit</name> = 0x7fffffff</expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>sqlite3BeginWriteOperation</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>iDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Integer</name></expr></argument>, <argument><expr><name>iLimit</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>addr</name> = <call><name>sqlite3VdbeAddOp1</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_IncrVacuum</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeAddOp1</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_ResultRow</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_AddImm</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_IfPos</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeJumpHere</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then><else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_PAGER_PRAGMAS</name></cpp:ifndef>
  <comment type="block">/*
  **  PRAGMA [database.]cache_size
  **  PRAGMA [database.]cache_size=N
  **
  ** The first form reports the current local setting for the
  ** page cache size.  The local setting can be different from
  ** the persistent cache size value that is stored in the database
  ** file itself.  The value returned is the maximum number of
  ** pages in the page cache.  The second form sets the local
  ** page cache size value.  It does not change the persistent
  ** cache size stored on the disk so the cache size will revert
  ** to its default value when the database is closed and reopened.
  ** N should be a positive integer.
  */</comment>
  <if>if<condition>( <expr><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>,<argument><expr>"cache_size"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
    <if>if<condition>( <expr><call><name>sqlite3ReadSchema</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr> )</condition><then> <goto>goto <name>pragma_out</name>;</goto></then></if>
    <if>if<condition>( <expr>!<name>zRight</name></expr> )</condition><then><block>{
      <expr_stmt><expr><call><name>returnSingleInt</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr>"cache_size"</expr></argument>, <argument><expr><name>pDb</name>-&gt;<name>pSchema</name>-&gt;<name>cache_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then><else>else<block>{
      <decl_stmt><decl><type><name>int</name></type> <name>size</name> =<init> <expr><call><name>atoi</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <if>if<condition>( <expr><name>size</name>&lt;0</expr> )</condition><then> <expr_stmt><expr><name>size</name> = -<name>size</name></expr>;</expr_stmt></then></if>
      <expr_stmt><expr><name>pDb</name>-&gt;<name>pSchema</name>-&gt;<name>cache_size</name> = <name>size</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3BtreeSetCacheSize</name><argument_list>(<argument><expr><name>pDb</name>-&gt;<name>pBt</name></expr></argument>, <argument><expr><name>pDb</name>-&gt;<name>pSchema</name>-&gt;<name>cache_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></then><else>else

  <comment type="block">/*
  **   PRAGMA temp_store
  **   PRAGMA temp_store = "default"|"memory"|"file"
  **
  ** Return or set the local value of the temp_store flag.  Changing
  ** the local value does not make changes to the disk file and the default
  ** value will be restored the next time the database is opened.
  **
  ** Note that it is possible for the library compile-time options to
  ** override this setting
  */</comment>
  <if>if<condition>( <expr><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>, <argument><expr>"temp_store"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
    <if>if<condition>( <expr>!<name>zRight</name></expr> )</condition><then><block>{
      <expr_stmt><expr><call><name>returnSingleInt</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr>"temp_store"</expr></argument>, <argument><expr><name>db</name>-&gt;<name>temp_store</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then><else>else<block>{
      <expr_stmt><expr><call><name>changeTempStorage</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></then><else>else

  <comment type="block">/*
  **   PRAGMA temp_store_directory
  **   PRAGMA temp_store_directory = ""|"directory_name"
  **
  ** Return or set the local value of the temp_store_directory flag.  Changing
  ** the value sets a specific directory to be used for temporary files.
  ** Setting to a null string reverts to the default temporary directory search.
  ** If temporary directory is changed, then invalidateTempStorage.
  **
  */</comment>
  <if>if<condition>( <expr><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>, <argument><expr>"temp_store_directory"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
    <if>if<condition>( <expr>!<name>zRight</name></expr> )</condition><then><block>{
      <if>if<condition>( <expr><name>sqlite3_temp_directory</name></expr> )</condition><then><block>{
        <expr_stmt><expr><call><name>sqlite3VdbeSetNumCols</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeSetColName</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>COLNAME_NAME</name></expr></argument>, 
            <argument><expr>"temp_store_directory"</expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeAddOp4</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_String8</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>sqlite3_temp_directory</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_ResultRow</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then><else>else<block>{
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_WSD</name></cpp:ifndef>
      <if>if<condition>( <expr><name><name>zRight</name><index>[<expr>0</expr>]</index></name></expr> )</condition><then><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>rc</name> = <call><name>sqlite3OsAccess</name><argument_list>(<argument><expr><name>db</name>-&gt;<name>pVfs</name></expr></argument>, <argument><expr><name>zRight</name></expr></argument>, <argument><expr><name>SQLITE_ACCESS_READWRITE</name></expr></argument>, <argument><expr>&amp;<name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_OK</name> || <name>res</name>==0</expr> )</condition><then><block>{
          <expr_stmt><expr><call><name>sqlite3ErrorMsg</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr>"not a writable directory"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <goto>goto <name>pragma_out</name>;</goto>
        }</block></then></if>
      }</block></then></if>
      <if>if<condition>( <expr><name>SQLITE_TEMP_STORE</name>==0
       || (<name>SQLITE_TEMP_STORE</name>==1 &amp;&amp; <name>db</name>-&gt;<name>temp_store</name>&lt;=1)
       || (<name>SQLITE_TEMP_STORE</name>==2 &amp;&amp; <name>db</name>-&gt;<name>temp_store</name>==1)</expr>
      )</condition><then><block>{
        <expr_stmt><expr><call><name>invalidateTempStorage</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>sqlite3_temp_directory</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if<condition>( <expr><name><name>zRight</name><index>[<expr>0</expr>]</index></name></expr> )</condition><then><block>{
        <expr_stmt><expr><name>sqlite3_temp_directory</name> = <call><name>sqlite3DbStrDup</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then><else>else<block>{
        <expr_stmt><expr><name>sqlite3_temp_directory</name> = 0</expr>;</expr_stmt>
      }</block></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_WSD */</comment>
    }</block></else></if>
  }</block></then><else>else

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_ENABLE_LOCKING_STYLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#  <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#    <cpp:directive>define</cpp:directive> <name>SQLITE_ENABLE_LOCKING_STYLE</name> 1</cpp:define>
<cpp:else>#  <cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#    <cpp:directive>define</cpp:directive> <name>SQLITE_ENABLE_LOCKING_STYLE</name> 0</cpp:define>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_ENABLE_LOCKING_STYLE</name></expr></cpp:if>
  <comment type="block">/*
   **   PRAGMA [database.]lock_proxy_file
   **   PRAGMA [database.]lock_proxy_file = ":auto:"|"lock_file_path"
   **
   ** Return or set the value of the lock_proxy_file flag.  Changing
   ** the value sets a specific file to be used for database access locks.
   **
   */</comment>
  <if>if<condition>( <expr><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>, <argument><expr>"lock_proxy_file"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
    <if>if<condition>( <expr>!<name>zRight</name></expr> )</condition><then><block>{
      <decl_stmt><decl><type><name>Pager</name> *</type><name>pPager</name> =<init> <expr><call><name>sqlite3BtreePager</name><argument_list>(<argument><expr><name>pDb</name>-&gt;<name>pBt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>char</name> *</type><name>proxy_file_path</name> =<init> <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>sqlite3_file</name> *</type><name>pFile</name> =<init> <expr><call><name>sqlite3PagerFile</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlite3OsFileControl</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>SQLITE_GET_LOCKPROXYFILE</name></expr></argument>, 
                           <argument><expr>&amp;<name>proxy_file_path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      
      <if>if<condition>( <expr><name>proxy_file_path</name></expr> )</condition><then><block>{
        <expr_stmt><expr><call><name>sqlite3VdbeSetNumCols</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeSetColName</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>COLNAME_NAME</name></expr></argument>, 
                              <argument><expr>"lock_proxy_file"</expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeAddOp4</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_String8</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>proxy_file_path</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_ResultRow</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then><else>else<block>{
      <decl_stmt><decl><type><name>Pager</name> *</type><name>pPager</name> =<init> <expr><call><name>sqlite3BtreePager</name><argument_list>(<argument><expr><name>pDb</name>-&gt;<name>pBt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>sqlite3_file</name> *</type><name>pFile</name> =<init> <expr><call><name>sqlite3PagerFile</name><argument_list>(<argument><expr><name>pPager</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
      <if>if<condition>( <expr><name><name>zRight</name><index>[<expr>0</expr>]</index></name></expr> )</condition><then><block>{
        <expr_stmt><expr><name>res</name>=<call><name>sqlite3OsFileControl</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>SQLITE_SET_LOCKPROXYFILE</name></expr></argument>, 
                                     <argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then> <else>else <block>{
        <expr_stmt><expr><name>res</name>=<call><name>sqlite3OsFileControl</name><argument_list>(<argument><expr><name>pFile</name></expr></argument>, <argument><expr><name>SQLITE_SET_LOCKPROXYFILE</name></expr></argument>, 
                                     <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
      <if>if<condition>( <expr><name>res</name>!=<name>SQLITE_OK</name></expr> )</condition><then><block>{
        <expr_stmt><expr><call><name>sqlite3ErrorMsg</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr>"failed to set lock proxy file"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <goto>goto <name>pragma_out</name>;</goto>
      }</block></then></if>
    }</block></else></if>
  }</block></then><else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_ENABLE_LOCKING_STYLE */</comment>      
    
  <comment type="block">/*
  **   PRAGMA [database.]synchronous
  **   PRAGMA [database.]synchronous=OFF|ON|NORMAL|FULL
  **
  ** Return or set the local value of the synchronous flag.  Changing
  ** the local value does not make changes to the disk file and the
  ** default value will be restored the next time the database is
  ** opened.
  */</comment>
  <if>if<condition>( <expr><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>,<argument><expr>"synchronous"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
    <if>if<condition>( <expr><call><name>sqlite3ReadSchema</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr> )</condition><then> <goto>goto <name>pragma_out</name>;</goto></then></if>
    <if>if<condition>( <expr>!<name>zRight</name></expr> )</condition><then><block>{
      <expr_stmt><expr><call><name>returnSingleInt</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr>"synchronous"</expr></argument>, <argument><expr><name>pDb</name>-&gt;<name>safety_level</name>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then><else>else<block>{
      <if>if<condition>( <expr>!<name>db</name>-&gt;<name>autoCommit</name></expr> )</condition><then><block>{
        <expr_stmt><expr><call><name>sqlite3ErrorMsg</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, 
            <argument><expr>"Safety level may not be changed inside a transaction"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then><else>else<block>{
        <expr_stmt><expr><name>pDb</name>-&gt;<name>safety_level</name> = <call><name>getSafetyLevel</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>)</argument_list></call>+1</expr>;</expr_stmt>
      }</block></else></if>
    }</block></else></if>
  }</block></then><else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_PAGER_PRAGMAS */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_FLAG_PRAGMAS</name></cpp:ifndef>
  <if>if<condition>( <expr><call><name>flagPragma</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>zLeft</name></expr></argument>, <argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
    <comment type="block">/* The flagPragma() subroutine also generates any necessary code
    ** there is nothing more to do here */</comment>
  }</block></then><else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_FLAG_PRAGMAS */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_SCHEMA_PRAGMAS</name></cpp:ifndef>
  <comment type="block">/*
  **   PRAGMA table_info(&lt;table&gt;)
  **
  ** Return a single row for each column of the named table. The columns of
  ** the returned data set are:
  **
  ** cid:        Column id (numbered from left to right, starting at 0)
  ** name:       Column name
  ** type:       Column declaration type.
  ** notnull:    True if 'NOT NULL' is part of column declaration
  ** dflt_value: The default value for the column, if any.
  */</comment>
  <if>if<condition>( <expr><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>, <argument><expr>"table_info"</expr></argument>)</argument_list></call>==0 &amp;&amp; <name>zRight</name></expr> )</condition><then><block>{
    <decl_stmt><decl><type><name>Table</name> *</type><name>pTab</name></decl>;</decl_stmt>
    <if>if<condition>( <expr><call><name>sqlite3ReadSchema</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr> )</condition><then> <goto>goto <name>pragma_out</name>;</goto></then></if>
    <expr_stmt><expr><name>pTab</name> = <call><name>sqlite3FindTable</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zRight</name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>( <expr><name>pTab</name></expr> )</condition><then><block>{
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>nHidden</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Column</name> *</type><name>pCol</name></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeSetNumCols</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>6</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pParse</name>-&gt;<name>nMem</name> = 6</expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeSetColName</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>COLNAME_NAME</name></expr></argument>, <argument><expr>"cid"</expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeSetColName</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>COLNAME_NAME</name></expr></argument>, <argument><expr>"name"</expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeSetColName</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>COLNAME_NAME</name></expr></argument>, <argument><expr>"type"</expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeSetColName</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><name>COLNAME_NAME</name></expr></argument>, <argument><expr>"notnull"</expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeSetColName</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><name>COLNAME_NAME</name></expr></argument>, <argument><expr>"dflt_value"</expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeSetColName</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><name>COLNAME_NAME</name></expr></argument>, <argument><expr>"pk"</expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3ViewGetColumnNames</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>pTab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for(<init><expr><name>i</name>=0</expr>, <expr><name>pCol</name>=<name>pTab</name>-&gt;<name>aCol</name></expr>;</init> <condition><expr><name>i</name>&lt;<name>pTab</name>-&gt;<name>nCol</name></expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>pCol</name>++</expr></incr>)<block>{
        <decl_stmt><decl><type><name>const</name> <name>Token</name> *</type><name>pDflt</name></decl>;</decl_stmt>
        <if>if<condition>( <expr><call><name>IsHiddenColumn</name><argument_list>(<argument><expr><name>pCol</name></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
          <expr_stmt><expr><name>nHidden</name>++</expr>;</expr_stmt>
          <continue>continue;</continue>
        }</block></then></if>
        <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Integer</name></expr></argument>, <argument><expr><name>i</name>-<name>nHidden</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeAddOp4</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_String8</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pCol</name>-&gt;<name>zName</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeAddOp4</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_String8</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>,
           <argument><expr><name>pCol</name>-&gt;<name>zType</name> ? <name>pCol</name>-&gt;<name>zType</name> : ""</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Integer</name></expr></argument>, <argument><expr>(<name>pCol</name>-&gt;<name>notNull</name> ? 1 : 0)</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>( <expr><name>pCol</name>-&gt;<name>pDflt</name></expr> )</condition><then><block>{
          <expr_stmt><expr><name>pDflt</name> = &amp;<name>pCol</name>-&gt;<name>pDflt</name>-&gt;<name>span</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pDflt</name>-&gt;<name>z</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeAddOp4</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_String8</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>(<name>char</name>*)<name>pDflt</name>-&gt;<name>z</name></expr></argument>, <argument><expr><name>pDflt</name>-&gt;<name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then><else>else<block>{
          <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Null</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Integer</name></expr></argument>, <argument><expr><name>pCol</name>-&gt;<name>isPrimKey</name></expr></argument>, <argument><expr>6</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_ResultRow</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>6</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></for>
    }</block></then></if>
  }</block></then><else>else

  <if>if<condition>( <expr><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>, <argument><expr>"index_info"</expr></argument>)</argument_list></call>==0 &amp;&amp; <name>zRight</name></expr> )</condition><then><block>{
    <decl_stmt><decl><type><name>Index</name> *</type><name>pIdx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Table</name> *</type><name>pTab</name></decl>;</decl_stmt>
    <if>if<condition>( <expr><call><name>sqlite3ReadSchema</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr> )</condition><then> <goto>goto <name>pragma_out</name>;</goto></then></if>
    <expr_stmt><expr><name>pIdx</name> = <call><name>sqlite3FindIndex</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zRight</name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>( <expr><name>pIdx</name></expr> )</condition><then><block>{
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>pTab</name> = <name>pIdx</name>-&gt;<name>pTable</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeSetNumCols</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pParse</name>-&gt;<name>nMem</name> = 3</expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeSetColName</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>COLNAME_NAME</name></expr></argument>, <argument><expr>"seqno"</expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeSetColName</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>COLNAME_NAME</name></expr></argument>, <argument><expr>"cid"</expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeSetColName</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>COLNAME_NAME</name></expr></argument>, <argument><expr>"name"</expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<name>pIdx</name>-&gt;<name>nColumn</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
        <decl_stmt><decl><type><name>int</name></type> <name>cnum</name> =<init> <expr><name>pIdx</name>-&gt;<name><name>aiColumn</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Integer</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Integer</name></expr></argument>, <argument><expr><name>cnum</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pTab</name>-&gt;<name>nCol</name>&gt;<name>cnum</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeAddOp4</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_String8</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pTab</name>-&gt;<name><name>aCol</name><index>[<expr><name>cnum</name></expr>]</index></name>.<name>zName</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_ResultRow</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></for>
    }</block></then></if>
  }</block></then><else>else

  <if>if<condition>( <expr><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>, <argument><expr>"index_list"</expr></argument>)</argument_list></call>==0 &amp;&amp; <name>zRight</name></expr> )</condition><then><block>{
    <decl_stmt><decl><type><name>Index</name> *</type><name>pIdx</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Table</name> *</type><name>pTab</name></decl>;</decl_stmt>
    <if>if<condition>( <expr><call><name>sqlite3ReadSchema</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr> )</condition><then> <goto>goto <name>pragma_out</name>;</goto></then></if>
    <expr_stmt><expr><name>pTab</name> = <call><name>sqlite3FindTable</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zRight</name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>( <expr><name>pTab</name></expr> )</condition><then><block>{
      <expr_stmt><expr><name>v</name> = <call><name>sqlite3GetVdbe</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pIdx</name> = <name>pTab</name>-&gt;<name>pIndex</name></expr>;</expr_stmt>
      <if>if<condition>( <expr><name>pIdx</name></expr> )</condition><then><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</decl_stmt> 
        <expr_stmt><expr><call><name>sqlite3VdbeSetNumCols</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pParse</name>-&gt;<name>nMem</name> = 3</expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeSetColName</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>COLNAME_NAME</name></expr></argument>, <argument><expr>"seq"</expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeSetColName</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>COLNAME_NAME</name></expr></argument>, <argument><expr>"name"</expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeSetColName</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>COLNAME_NAME</name></expr></argument>, <argument><expr>"unique"</expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while<condition>(<expr><name>pIdx</name></expr>)</condition><block>{
          <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Integer</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeAddOp4</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_String8</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pIdx</name>-&gt;<name>zName</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Integer</name></expr></argument>, <argument><expr><name>pIdx</name>-&gt;<name>onError</name>!=<name>OE_None</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_ResultRow</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr>++<name>i</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>pIdx</name> = <name>pIdx</name>-&gt;<name>pNext</name></expr>;</expr_stmt>
        }</block></while>
      }</block></then></if>
    }</block></then></if>
  }</block></then><else>else

  <if>if<condition>( <expr><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>, <argument><expr>"database_list"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <if>if<condition>( <expr><call><name>sqlite3ReadSchema</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr> )</condition><then> <goto>goto <name>pragma_out</name>;</goto></then></if>
    <expr_stmt><expr><call><name>sqlite3VdbeSetNumCols</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pParse</name>-&gt;<name>nMem</name> = 3</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeSetColName</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>COLNAME_NAME</name></expr></argument>, <argument><expr>"seq"</expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeSetColName</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>COLNAME_NAME</name></expr></argument>, <argument><expr>"name"</expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeSetColName</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>COLNAME_NAME</name></expr></argument>, <argument><expr>"file"</expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<name>db</name>-&gt;<name>nDb</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
      <if>if<condition>( <expr><name>db</name>-&gt;<name><name>aDb</name><index>[<expr><name>i</name></expr>]</index></name>.<name>pBt</name>==0</expr> )</condition><then> <continue>continue;</continue></then></if>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>db</name>-&gt;<name><name>aDb</name><index>[<expr><name>i</name></expr>]</index></name>.<name>zName</name>!=0</expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Integer</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp4</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_String8</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>db</name>-&gt;<name><name>aDb</name><index>[<expr><name>i</name></expr>]</index></name>.<name>zName</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp4</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_String8</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>,
           <argument><expr><call><name>sqlite3BtreeGetFilename</name><argument_list>(<argument><expr><name>db</name>-&gt;<name><name>aDb</name><index>[<expr><name>i</name></expr>]</index></name>.<name>pBt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_ResultRow</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
  }</block></then><else>else

  <if>if<condition>( <expr><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>, <argument><expr>"collation_list"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>HashElem</name> *</type><name>p</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeSetNumCols</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pParse</name>-&gt;<name>nMem</name> = 2</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeSetColName</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>COLNAME_NAME</name></expr></argument>, <argument><expr>"seq"</expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeSetColName</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>COLNAME_NAME</name></expr></argument>, <argument><expr>"name"</expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for(<init><expr><name>p</name>=<call><name>sqliteHashFirst</name><argument_list>(<argument><expr>&amp;<name>db</name>-&gt;<name>aCollSeq</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>p</name></expr>;</condition> <incr><expr><name>p</name>=<call><name>sqliteHashNext</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></incr>)<block>{
      <decl_stmt><decl><type><name>CollSeq</name> *</type><name>pColl</name> =<init> <expr>(<name>CollSeq</name> *)<call><name>sqliteHashData</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Integer</name></expr></argument>, <argument><expr><name>i</name>++</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp4</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_String8</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pColl</name>-&gt;<name>zName</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_ResultRow</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
  }</block></then><else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_SCHEMA_PRAGMAS */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_FOREIGN_KEY</name></cpp:ifndef>
  <if>if<condition>( <expr><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>, <argument><expr>"foreign_key_list"</expr></argument>)</argument_list></call>==0 &amp;&amp; <name>zRight</name></expr> )</condition><then><block>{
    <decl_stmt><decl><type><name>FKey</name> *</type><name>pFK</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>Table</name> *</type><name>pTab</name></decl>;</decl_stmt>
    <if>if<condition>( <expr><call><name>sqlite3ReadSchema</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr> )</condition><then> <goto>goto <name>pragma_out</name>;</goto></then></if>
    <expr_stmt><expr><name>pTab</name> = <call><name>sqlite3FindTable</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zRight</name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>( <expr><name>pTab</name></expr> )</condition><then><block>{
      <expr_stmt><expr><name>v</name> = <call><name>sqlite3GetVdbe</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pFK</name> = <name>pTab</name>-&gt;<name>pFKey</name></expr>;</expr_stmt>
      <if>if<condition>( <expr><name>pFK</name></expr> )</condition><then><block>{
        <decl_stmt><decl><type><name>int</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</decl_stmt> 
        <expr_stmt><expr><call><name>sqlite3VdbeSetNumCols</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pParse</name>-&gt;<name>nMem</name> = 8</expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeSetColName</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>COLNAME_NAME</name></expr></argument>, <argument><expr>"id"</expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeSetColName</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>COLNAME_NAME</name></expr></argument>, <argument><expr>"seq"</expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeSetColName</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>COLNAME_NAME</name></expr></argument>, <argument><expr>"table"</expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeSetColName</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>3</expr></argument>, <argument><expr><name>COLNAME_NAME</name></expr></argument>, <argument><expr>"from"</expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeSetColName</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><name>COLNAME_NAME</name></expr></argument>, <argument><expr>"to"</expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeSetColName</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>5</expr></argument>, <argument><expr><name>COLNAME_NAME</name></expr></argument>, <argument><expr>"on_update"</expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeSetColName</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr><name>COLNAME_NAME</name></expr></argument>, <argument><expr>"on_delete"</expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeSetColName</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>7</expr></argument>, <argument><expr><name>COLNAME_NAME</name></expr></argument>, <argument><expr>"match"</expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <while>while<condition>(<expr><name>pFK</name></expr>)</condition><block>{
          <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
          <for>for(<init><expr><name>j</name>=0</expr>;</init> <condition><expr><name>j</name>&lt;<name>pFK</name>-&gt;<name>nCol</name></expr>;</condition> <incr><expr><name>j</name>++</expr></incr>)<block>{
            <decl_stmt><decl><type><name>char</name> *</type><name>zCol</name> =<init> <expr><name>pFK</name>-&gt;<name><name>aCol</name><index>[<expr><name>j</name></expr>]</index></name>.<name>zCol</name></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>char</name> *</type><name>zOnUpdate</name> =<init> <expr>(<name>char</name> *)<call><name>actionName</name><argument_list>(<argument><expr><name>pFK</name>-&gt;<name>updateConf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>char</name> *</type><name>zOnDelete</name> =<init> <expr>(<name>char</name> *)<call><name>actionName</name><argument_list>(<argument><expr><name>pFK</name>-&gt;<name>deleteConf</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
            <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Integer</name></expr></argument>, <argument><expr><name>i</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Integer</name></expr></argument>, <argument><expr><name>j</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sqlite3VdbeAddOp4</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_String8</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pFK</name>-&gt;<name>zTo</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sqlite3VdbeAddOp4</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_String8</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>0</expr></argument>,
                              <argument><expr><name>pTab</name>-&gt;<name><name>aCol</name><index>[<expr><name>pFK</name>-&gt;<name><name>aCol</name><index>[<expr><name>j</name></expr>]</index></name>.<name>iFrom</name></expr>]</index></name>.<name>zName</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sqlite3VdbeAddOp4</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>zCol</name> ? <name>OP_String8</name> : <name>OP_Null</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>5</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>zCol</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sqlite3VdbeAddOp4</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_String8</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>6</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>zOnUpdate</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sqlite3VdbeAddOp4</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_String8</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>7</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>zOnDelete</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sqlite3VdbeAddOp4</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_String8</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>8</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>"NONE"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_ResultRow</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          }</block></for>
          <expr_stmt><expr>++<name>i</name></expr>;</expr_stmt>
          <expr_stmt><expr><name>pFK</name> = <name>pFK</name>-&gt;<name>pNextFrom</name></expr>;</expr_stmt>
        }</block></while>
      }</block></then></if>
    }</block></then></if>
  }</block></then><else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !defined(SQLITE_OMIT_FOREIGN_KEY) */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NDEBUG</name></cpp:ifndef>
  <if>if<condition>( <expr><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>, <argument><expr>"parser_trace"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
    <if>if<condition>( <expr><name>zRight</name></expr> )</condition><then><block>{
      <if>if<condition>( <expr><call><name>getBoolean</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
        <expr_stmt><expr><call><name>sqlite3ParserTrace</name><argument_list>(<argument><expr><name>stderr</name></expr></argument>, <argument><expr>"parser: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then><else>else<block>{
        <expr_stmt><expr><call><name>sqlite3ParserTrace</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></else></if>
    }</block></then></if>
  }</block></then><else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <comment type="block">/* Reinstall the LIKE and GLOB functions.  The variant of LIKE
  ** used will be case sensitive or not depending on the RHS.
  */</comment>
  <if>if<condition>( <expr><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>, <argument><expr>"case_sensitive_like"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
    <if>if<condition>( <expr><name>zRight</name></expr> )</condition><then><block>{
      <expr_stmt><expr><call><name>sqlite3RegisterLikeFunctions</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>getBoolean</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then><else>else

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_INTEGRITY_CHECK_ERROR_MAX</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <name>SQLITE_INTEGRITY_CHECK_ERROR_MAX</name> 100</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_INTEGRITY_CHECK</name></cpp:ifndef>
  <comment type="block">/* Pragma "quick_check" is an experimental reduced version of 
  ** integrity_check designed to detect most database corruption
  ** without most of the overhead of a full integrity-check.
  */</comment>
  <if>if<condition>( <expr><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>, <argument><expr>"integrity_check"</expr></argument>)</argument_list></call>==0
   || <call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>, <argument><expr>"quick_check"</expr></argument>)</argument_list></call>==0</expr> 
  )</condition><then><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name>, <name>j</name>, <name>addr</name>, <name>mxErr</name></decl>;</decl_stmt>

    <comment type="block">/* Code that appears at the end of the integrity check.  If no error
    ** messages have been generated, output OK.  Otherwise output the
    ** error message
    */</comment>
    <decl_stmt><decl><type><name>static</name> <name>const</name> <name>VdbeOpList</name></type> <name><name>endCode</name><index>[]</index></name> =<init> <expr><block>{
      <expr><block>{ <expr><name>OP_AddImm</name></expr>,      <expr>1</expr>, <expr>0</expr>,        <expr>0</expr>}</block></expr>,    <comment type="block">/* 0 */</comment>
      <expr><block>{ <expr><name>OP_IfNeg</name></expr>,       <expr>1</expr>, <expr>0</expr>,        <expr>0</expr>}</block></expr>,    <comment type="block">/* 1 */</comment>
      <expr><block>{ <expr><name>OP_String8</name></expr>,     <expr>0</expr>, <expr>3</expr>,        <expr>0</expr>}</block></expr>,    <comment type="block">/* 2 */</comment>
      <expr><block>{ <expr><name>OP_ResultRow</name></expr>,   <expr>3</expr>, <expr>1</expr>,        <expr>0</expr>}</block></expr>,
    }</block></expr></init></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>int</name></type> <name>isQuick</name> =<init> <expr>(<name><name>zLeft</name><index>[<expr>0</expr>]</index></name>=='q')</expr></init></decl>;</decl_stmt>

    <comment type="block">/* Initialize the VDBE program */</comment>
    <if>if<condition>( <expr><call><name>sqlite3ReadSchema</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr> )</condition><then> <goto>goto <name>pragma_out</name>;</goto></then></if>
    <expr_stmt><expr><name>pParse</name>-&gt;<name>nMem</name> = 6</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeSetNumCols</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeSetColName</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>COLNAME_NAME</name></expr></argument>, <argument><expr>"integrity_check"</expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <comment type="block">/* Set the maximum error count */</comment>
    <expr_stmt><expr><name>mxErr</name> = <name>SQLITE_INTEGRITY_CHECK_ERROR_MAX</name></expr>;</expr_stmt>
    <if>if<condition>( <expr><name>zRight</name></expr> )</condition><then><block>{
      <expr_stmt><expr><name>mxErr</name> = <call><name>atoi</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if<condition>( <expr><name>mxErr</name>&lt;=0</expr> )</condition><then><block>{
        <expr_stmt><expr><name>mxErr</name> = <name>SQLITE_INTEGRITY_CHECK_ERROR_MAX</name></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then></if>
    <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Integer</name></expr></argument>, <argument><expr><name>mxErr</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* reg[1] holds errors left */</comment>

    <comment type="block">/* Do an integrity check on each database file */</comment>
    <for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<name>db</name>-&gt;<name>nDb</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
      <decl_stmt><decl><type><name>HashElem</name> *</type><name>x</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Hash</name> *</type><name>pTbls</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>cnt</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

      <if>if<condition>( <expr><name>OMIT_TEMPDB</name> &amp;&amp; <name>i</name>==1</expr> )</condition><then> <continue>continue;</continue></then></if>

      <expr_stmt><expr><call><name>sqlite3CodeVerifySchema</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>addr</name> = <call><name>sqlite3VdbeAddOp1</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_IfPos</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="block">/* Halt if out of errors */</comment>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Halt</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeJumpHere</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Do an integrity check of the B-Tree
      **
      ** Begin by filling registers 2, 3, ... with the root pages numbers
      ** for all tables and indices in the database.
      */</comment>
      <expr_stmt><expr><name>pTbls</name> = &amp;<name>db</name>-&gt;<name><name>aDb</name><index>[<expr><name>i</name></expr>]</index></name>.<name>pSchema</name>-&gt;<name>tblHash</name></expr>;</expr_stmt>
      <for>for(<init><expr><name>x</name>=<call><name>sqliteHashFirst</name><argument_list>(<argument><expr><name>pTbls</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>x</name></expr>;</condition> <incr><expr><name>x</name>=<call><name>sqliteHashNext</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></incr>)<block>{
        <decl_stmt><decl><type><name>Table</name> *</type><name>pTab</name> =<init> <expr><call><name>sqliteHashData</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Index</name> *</type><name>pIdx</name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Integer</name></expr></argument>, <argument><expr><name>pTab</name>-&gt;<name>tnum</name></expr></argument>, <argument><expr>2+<name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>cnt</name>++</expr>;</expr_stmt>
        <for>for(<init><expr><name>pIdx</name>=<name>pTab</name>-&gt;<name>pIndex</name></expr>;</init> <condition><expr><name>pIdx</name></expr>;</condition> <incr><expr><name>pIdx</name>=<name>pIdx</name>-&gt;<name>pNext</name></expr></incr>)<block>{
          <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Integer</name></expr></argument>, <argument><expr><name>pIdx</name>-&gt;<name>tnum</name></expr></argument>, <argument><expr>2+<name>cnt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>cnt</name>++</expr>;</expr_stmt>
        }</block></for>
      }</block></for>
      <if>if<condition>( <expr><name>cnt</name>==0</expr> )</condition><then> <continue>continue;</continue></then></if>

      <comment type="block">/* Make sure sufficient number of registers have been allocated */</comment>
      <if>if<condition>( <expr><name>pParse</name>-&gt;<name>nMem</name> &lt; <name>cnt</name>+4</expr> )</condition><then><block>{
        <expr_stmt><expr><name>pParse</name>-&gt;<name>nMem</name> = <name>cnt</name>+4</expr>;</expr_stmt>
      }</block></then></if>

      <comment type="block">/* Do the b-tree integrity checks */</comment>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp3</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_IntegrityCk</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>cnt</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeChangeP5</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>(<name>u8</name>)<name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>addr</name> = <call><name>sqlite3VdbeAddOp1</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_IsNull</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp4</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_String8</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>0</expr></argument>,
         <argument><expr><call><name>sqlite3MPrintf</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr>"*** in database %s ***\n"</expr></argument>, <argument><expr><name>db</name>-&gt;<name><name>aDb</name><index>[<expr><name>i</name></expr>]</index></name>.<name>zName</name></expr></argument>)</argument_list></call></expr></argument>,
         <argument><expr><name>P4_DYNAMIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp3</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Move</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp3</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Concat</name></expr></argument>, <argument><expr>4</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_ResultRow</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeJumpHere</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Make sure all the indices are constructed correctly.
      */</comment>
      <for>for(<init><expr><name>x</name>=<call><name>sqliteHashFirst</name><argument_list>(<argument><expr><name>pTbls</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>x</name> &amp;&amp; !<name>isQuick</name></expr>;</condition> <incr><expr><name>x</name>=<call><name>sqliteHashNext</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></incr>)<block>{
        <decl_stmt><decl><type><name>Table</name> *</type><name>pTab</name> =<init> <expr><call><name>sqliteHashData</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>Index</name> *</type><name>pIdx</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>int</name></type> <name>loopTop</name></decl>;</decl_stmt>

        <if>if<condition>( <expr><name>pTab</name>-&gt;<name>pIndex</name>==0</expr> )</condition><then> <continue>continue;</continue></then></if>
        <expr_stmt><expr><name>addr</name> = <call><name>sqlite3VdbeAddOp1</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_IfPos</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* Stop if out of errors */</comment>
        <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Halt</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeJumpHere</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3OpenTableAndIndices</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>pTab</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>OP_OpenRead</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Integer</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* reg(2) will count entries */</comment>
        <expr_stmt><expr><name>loopTop</name> = <call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Rewind</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_AddImm</name></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* increment entry count */</comment>
        <for>for(<init><expr><name>j</name>=0</expr>, <expr><name>pIdx</name>=<name>pTab</name>-&gt;<name>pIndex</name></expr>;</init> <condition><expr><name>pIdx</name></expr>;</condition> <incr><expr><name>pIdx</name>=<name>pIdx</name>-&gt;<name>pNext</name></expr>, <expr><name>j</name>++</expr></incr>)<block>{
          <decl_stmt><decl><type><name>int</name></type> <name>jmp2</name></decl>;</decl_stmt>
          <decl_stmt><decl><type><name>static</name> <name>const</name> <name>VdbeOpList</name></type> <name><name>idxErr</name><index>[]</index></name> =<init> <expr><block>{
            <expr><block>{ <expr><name>OP_AddImm</name></expr>,      <expr>1</expr>, <expr>-1</expr>,  <expr>0</expr>}</block></expr>,
            <expr><block>{ <expr><name>OP_String8</name></expr>,     <expr>0</expr>,  <expr>3</expr>,  <expr>0</expr>}</block></expr>,    <comment type="block">/* 1 */</comment>
            <expr><block>{ <expr><name>OP_Rowid</name></expr>,       <expr>1</expr>,  <expr>4</expr>,  <expr>0</expr>}</block></expr>,
            <expr><block>{ <expr><name>OP_String8</name></expr>,     <expr>0</expr>,  <expr>5</expr>,  <expr>0</expr>}</block></expr>,    <comment type="block">/* 3 */</comment>
            <expr><block>{ <expr><name>OP_String8</name></expr>,     <expr>0</expr>,  <expr>6</expr>,  <expr>0</expr>}</block></expr>,    <comment type="block">/* 4 */</comment>
            <expr><block>{ <expr><name>OP_Concat</name></expr>,      <expr>4</expr>,  <expr>3</expr>,  <expr>3</expr>}</block></expr>,
            <expr><block>{ <expr><name>OP_Concat</name></expr>,      <expr>5</expr>,  <expr>3</expr>,  <expr>3</expr>}</block></expr>,
            <expr><block>{ <expr><name>OP_Concat</name></expr>,      <expr>6</expr>,  <expr>3</expr>,  <expr>3</expr>}</block></expr>,
            <expr><block>{ <expr><name>OP_ResultRow</name></expr>,   <expr>3</expr>,  <expr>1</expr>,  <expr>0</expr>}</block></expr>,
            <expr><block>{ <expr><name>OP_IfPos</name></expr>,       <expr>1</expr>,  <expr>0</expr>,  <expr>0</expr>}</block></expr>,    <comment type="block">/* 9 */</comment>
            <expr><block>{ <expr><name>OP_Halt</name></expr>,        <expr>0</expr>,  <expr>0</expr>,  <expr>0</expr>}</block></expr>,
          }</block></expr></init></decl>;</decl_stmt>
          <expr_stmt><expr><call><name>sqlite3GenerateIndexKey</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr><name>pIdx</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>3</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>jmp2</name> = <call><name>sqlite3VdbeAddOp3</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Found</name></expr></argument>, <argument><expr><name>j</name>+2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>3</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>addr</name> = <call><name>sqlite3VdbeAddOpList</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>ArraySize</name><argument_list>(<argument><expr><name>idxErr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>idxErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeChangeP4</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>addr</name>+1</expr></argument>, <argument><expr>"rowid "</expr></argument>, <argument><expr><name>P4_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeChangeP4</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>addr</name>+3</expr></argument>, <argument><expr>" missing from index "</expr></argument>, <argument><expr><name>P4_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeChangeP4</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>addr</name>+4</expr></argument>, <argument><expr><name>pIdx</name>-&gt;<name>zName</name></expr></argument>, <argument><expr><name>P4_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeJumpHere</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>addr</name>+9</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeJumpHere</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>jmp2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
        <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Next</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>loopTop</name>+1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>sqlite3VdbeJumpHere</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>loopTop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for(<init><expr><name>j</name>=0</expr>, <expr><name>pIdx</name>=<name>pTab</name>-&gt;<name>pIndex</name></expr>;</init> <condition><expr><name>pIdx</name></expr>;</condition> <incr><expr><name>pIdx</name>=<name>pIdx</name>-&gt;<name>pNext</name></expr>, <expr><name>j</name>++</expr></incr>)<block>{
          <decl_stmt><decl><type><name>static</name> <name>const</name> <name>VdbeOpList</name></type> <name><name>cntIdx</name><index>[]</index></name> =<init> <expr><block>{
             <expr><block>{ <expr><name>OP_Integer</name></expr>,      <expr>0</expr>,  <expr>3</expr>,  <expr>0</expr>}</block></expr>,
             <expr><block>{ <expr><name>OP_Rewind</name></expr>,       <expr>0</expr>,  <expr>0</expr>,  <expr>0</expr>}</block></expr>,  <comment type="block">/* 1 */</comment>
             <expr><block>{ <expr><name>OP_AddImm</name></expr>,       <expr>3</expr>,  <expr>1</expr>,  <expr>0</expr>}</block></expr>,
             <expr><block>{ <expr><name>OP_Next</name></expr>,         <expr>0</expr>,  <expr>0</expr>,  <expr>0</expr>}</block></expr>,  <comment type="block">/* 3 */</comment>
             <expr><block>{ <expr><name>OP_Eq</name></expr>,           <expr>2</expr>,  <expr>0</expr>,  <expr>3</expr>}</block></expr>,  <comment type="block">/* 4 */</comment>
             <expr><block>{ <expr><name>OP_AddImm</name></expr>,       <expr>1</expr>, <expr>-1</expr>,  <expr>0</expr>}</block></expr>,
             <expr><block>{ <expr><name>OP_String8</name></expr>,      <expr>0</expr>,  <expr>2</expr>,  <expr>0</expr>}</block></expr>,  <comment type="block">/* 6 */</comment>
             <expr><block>{ <expr><name>OP_String8</name></expr>,      <expr>0</expr>,  <expr>3</expr>,  <expr>0</expr>}</block></expr>,  <comment type="block">/* 7 */</comment>
             <expr><block>{ <expr><name>OP_Concat</name></expr>,       <expr>3</expr>,  <expr>2</expr>,  <expr>2</expr>}</block></expr>,
             <expr><block>{ <expr><name>OP_ResultRow</name></expr>,    <expr>2</expr>,  <expr>1</expr>,  <expr>0</expr>}</block></expr>,
          }</block></expr></init></decl>;</decl_stmt>
          <if>if<condition>( <expr><name>pIdx</name>-&gt;<name>tnum</name>==0</expr> )</condition><then> <continue>continue;</continue></then></if>
          <expr_stmt><expr><name>addr</name> = <call><name>sqlite3VdbeAddOp1</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_IfPos</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Halt</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeJumpHere</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>addr</name> = <call><name>sqlite3VdbeAddOpList</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>ArraySize</name><argument_list>(<argument><expr><name>cntIdx</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>cntIdx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeChangeP1</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>addr</name>+1</expr></argument>, <argument><expr><name>j</name>+2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeChangeP2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>addr</name>+1</expr></argument>, <argument><expr><name>addr</name>+4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeChangeP1</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>addr</name>+3</expr></argument>, <argument><expr><name>j</name>+2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeChangeP2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>addr</name>+3</expr></argument>, <argument><expr><name>addr</name>+2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeJumpHere</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>addr</name>+4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeChangeP4</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>addr</name>+6</expr></argument>, 
                     <argument><expr>"wrong # of entries in index "</expr></argument>, <argument><expr><name>P4_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3VdbeChangeP4</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>addr</name>+7</expr></argument>, <argument><expr><name>pIdx</name>-&gt;<name>zName</name></expr></argument>, <argument><expr><name>P4_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></for>
      }</block></for> 
    }</block></for>
    <expr_stmt><expr><name>addr</name> = <call><name>sqlite3VdbeAddOpList</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>ArraySize</name><argument_list>(<argument><expr><name>endCode</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>endCode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeChangeP2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr>-<name>mxErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeJumpHere</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>addr</name>+1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeChangeP4</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>addr</name>+2</expr></argument>, <argument><expr>"ok"</expr></argument>, <argument><expr><name>P4_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then><else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_INTEGRITY_CHECK */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_UTF16</name></cpp:ifndef>
  <comment type="block">/*
  **   PRAGMA encoding
  **   PRAGMA encoding = "utf-8"|"utf-16"|"utf-16le"|"utf-16be"
  **
  ** In its first form, this pragma returns the encoding of the main
  ** database. If the database is not initialized, it is initialized now.
  **
  ** The second form of this pragma is a no-op if the main database file
  ** has not already been initialized. In this case it sets the default
  ** encoding that will be used for the main database file if a new file
  ** is created. If an existing main database file is opened, then the
  ** default text encoding for the existing database is used.
  ** 
  ** In all cases new databases created using the ATTACH command are
  ** created to use the same default text encoding as the main database. If
  ** the main database has not been initialized and/or created when ATTACH
  ** is executed, this is done before the ATTACH operation.
  **
  ** In the second form this pragma sets the text encoding to be used in
  ** new database files created using this database handle. It is only
  ** useful if invoked immediately after the main database i
  */</comment>
  <if>if<condition>( <expr><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>, <argument><expr>"encoding"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
    <decl_stmt><decl><type><name>static</name> <name>const</name> struct</type> <name>EncName</name> <block>{
      <decl_stmt><decl><type><name>char</name> *</type><name>zName</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>u8</name></type> <name>enc</name></decl>;</decl_stmt>
    }</block></decl></decl_stmt> <expr_stmt><expr><name><name>encnames</name><index>[]</index></name> = <block>{
      <expr><block>{ <expr>"UTF8"</expr>,     <expr><name>SQLITE_UTF8</name></expr>        }</block></expr>,
      <expr><block>{ <expr>"UTF-8"</expr>,    <expr><name>SQLITE_UTF8</name></expr>        }</block></expr>,  <comment type="block">/* Must be element [1] */</comment>
      <expr><block>{ <expr>"UTF-16le"</expr>, <expr><name>SQLITE_UTF16LE</name></expr>     }</block></expr>,  <comment type="block">/* Must be element [2] */</comment>
      <expr><block>{ <expr>"UTF-16be"</expr>, <expr><name>SQLITE_UTF16BE</name></expr>     }</block></expr>,  <comment type="block">/* Must be element [3] */</comment>
      <expr><block>{ <expr>"UTF16le"</expr>,  <expr><name>SQLITE_UTF16LE</name></expr>     }</block></expr>,
      <expr><block>{ <expr>"UTF16be"</expr>,  <expr><name>SQLITE_UTF16BE</name></expr>     }</block></expr>,
      <expr><block>{ <expr>"UTF-16"</expr>,   <expr>0</expr>                  }</block></expr>, <comment type="block">/* SQLITE_UTF16NATIVE */</comment>
      <expr><block>{ <expr>"UTF16"</expr>,    <expr>0</expr>                  }</block></expr>, <comment type="block">/* SQLITE_UTF16NATIVE */</comment>
      <expr><block>{ <expr>0</expr>, <expr>0</expr> }</block></expr>
    }</block></expr>;</expr_stmt>
    <decl_stmt><decl><type><name>const</name> struct <name>EncName</name> *</type><name>pEnc</name></decl>;</decl_stmt>
    <if>if<condition>( <expr>!<name>zRight</name></expr> )</condition><then><block>{    <comment type="block">/* "PRAGMA encoding" */</comment>
      <if>if<condition>( <expr><call><name>sqlite3ReadSchema</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr> )</condition><then> <goto>goto <name>pragma_out</name>;</goto></then></if>
      <expr_stmt><expr><call><name>sqlite3VdbeSetNumCols</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeSetColName</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>COLNAME_NAME</name></expr></argument>, <argument><expr>"encoding"</expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_String8</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>encnames</name><index>[<expr><name>SQLITE_UTF8</name></expr>]</index></name>.<name>enc</name>==<name>SQLITE_UTF8</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>encnames</name><index>[<expr><name>SQLITE_UTF16LE</name></expr>]</index></name>.<name>enc</name>==<name>SQLITE_UTF16LE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>encnames</name><index>[<expr><name>SQLITE_UTF16BE</name></expr>]</index></name>.<name>enc</name>==<name>SQLITE_UTF16BE</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeChangeP4</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name><name>encnames</name><index>[<expr><call><name>ENC</name><argument_list>(<argument><expr><name>pParse</name>-&gt;<name>db</name></expr></argument>)</argument_list></call></expr>]</index></name>.<name>zName</name></expr></argument>, <argument><expr><name>P4_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_ResultRow</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then><else>else<block>{                        <comment type="block">/* "PRAGMA encoding = XXX" */</comment>
      <comment type="block">/* Only change the value of sqlite.enc if the database handle is not
      ** initialized. If the main database exists, the new sqlite.enc value
      ** will be overwritten when the schema is next loaded. If it does not
      ** already exists, it will be created to use the new encoding value.
      */</comment>
      <if>if<condition>( 
        <expr>!(<call><name>DbHasProperty</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>DB_SchemaLoaded</name></expr></argument>)</argument_list></call>) || 
        <call><name>DbHasProperty</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>DB_Empty</name></expr></argument>)</argument_list></call></expr> 
      )</condition><then><block>{
        <for>for(<init><expr><name>pEnc</name>=&amp;<name><name>encnames</name><index>[<expr>0</expr>]</index></name></expr>;</init> <condition><expr><name>pEnc</name>-&gt;<name>zName</name></expr>;</condition> <incr><expr><name>pEnc</name>++</expr></incr>)<block>{
          <if>if<condition>( <expr>0==<call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr><name>pEnc</name>-&gt;<name>zName</name></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
            <expr_stmt><expr><call><name>ENC</name><argument_list>(<argument><expr><name>pParse</name>-&gt;<name>db</name></expr></argument>)</argument_list></call> = <name>pEnc</name>-&gt;<name>enc</name> ? <name>pEnc</name>-&gt;<name>enc</name> : <name>SQLITE_UTF16NATIVE</name></expr>;</expr_stmt>
            <break>break;</break>
          }</block></then></if>
        }</block></for>
        <if>if<condition>( <expr>!<name>pEnc</name>-&gt;<name>zName</name></expr> )</condition><then><block>{
          <expr_stmt><expr><call><name>sqlite3ErrorMsg</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>, <argument><expr>"unsupported encoding: %s"</expr></argument>, <argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
      }</block></then></if>
    }</block></else></if>
  }</block></then><else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_UTF16 */</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_SCHEMA_VERSION_PRAGMAS</name></cpp:ifndef>
  <comment type="block">/*
  **   PRAGMA [database.]schema_version
  **   PRAGMA [database.]schema_version = &lt;integer&gt;
  **
  **   PRAGMA [database.]user_version
  **   PRAGMA [database.]user_version = &lt;integer&gt;
  **
  ** The pragma's schema_version and user_version are used to set or get
  ** the value of the schema-version and user-version, respectively. Both
  ** the schema-version and the user-version are 32-bit signed integers
  ** stored in the database header.
  **
  ** The schema-cookie is usually only manipulated internally by SQLite. It
  ** is incremented by SQLite whenever the database schema is modified (by
  ** creating or dropping a table or index). The schema version is used by
  ** SQLite each time a query is executed to ensure that the internal cache
  ** of the schema used when compiling the SQL query matches the schema of
  ** the database against which the compiled query is actually executed.
  ** Subverting this mechanism by using "PRAGMA schema_version" to modify
  ** the schema-version is potentially dangerous and may lead to program
  ** crashes or database corruption. Use with caution!
  **
  ** The user-version is not used internally by SQLite. It may be used by
  ** applications for any purpose.
  */</comment>
  <if>if<condition>( <expr><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>, <argument><expr>"schema_version"</expr></argument>)</argument_list></call>==0 
   || <call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>, <argument><expr>"user_version"</expr></argument>)</argument_list></call>==0 
   || <call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>, <argument><expr>"freelist_count"</expr></argument>)</argument_list></call>==0</expr> 
  )</condition><then><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>iCookie</name></decl>;</decl_stmt>   <comment type="block">/* Cookie index. 0 for schema-cookie, 6 for user-cookie. */</comment>
    <expr_stmt><expr><call><name>sqlite3VdbeUsesBtree</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <switch>switch<condition>( <expr><name><name>zLeft</name><index>[<expr>0</expr>]</index></name></expr> )</condition><block>{
      <case>case <expr>'s'</expr>: </case><case>case <expr>'S'</expr>:
        <expr_stmt><expr><name>iCookie</name> = 0</expr>;</expr_stmt>
        <break>break;</break>
      </case><case>case <expr>'f'</expr>: </case><case>case <expr>'F'</expr>:
        <expr_stmt><expr><name>iCookie</name> = 1</expr>;</expr_stmt>
        <expr_stmt><expr><name>iDb</name> = (-1*(<name>iDb</name>+1))</expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>iDb</name>&lt;=0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <break>break;</break>
      </case><default>default:
        <expr_stmt><expr><name>iCookie</name> = 5</expr>;</expr_stmt>
        <break>break;</break>
    </default>}</block></switch>

    <if>if<condition>( <expr><name>zRight</name> &amp;&amp; <name>iDb</name>&gt;=0</expr> )</condition><then><block>{
      <comment type="block">/* Write the specified cookie value */</comment>
      <decl_stmt><decl><type><name>static</name> <name>const</name> <name>VdbeOpList</name></type> <name><name>setCookie</name><index>[]</index></name> =<init> <expr><block>{
        <expr><block>{ <expr><name>OP_Transaction</name></expr>,    <expr>0</expr>,  <expr>1</expr>,  <expr>0</expr>}</block></expr>,    <comment type="block">/* 0 */</comment>
        <expr><block>{ <expr><name>OP_Integer</name></expr>,        <expr>0</expr>,  <expr>1</expr>,  <expr>0</expr>}</block></expr>,    <comment type="block">/* 1 */</comment>
        <expr><block>{ <expr><name>OP_SetCookie</name></expr>,      <expr>0</expr>,  <expr>0</expr>,  <expr>1</expr>}</block></expr>,    <comment type="block">/* 2 */</comment>
      }</block></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>addr</name> =<init> <expr><call><name>sqlite3VdbeAddOpList</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>ArraySize</name><argument_list>(<argument><expr><name>setCookie</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>setCookie</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeChangeP1</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeChangeP1</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>addr</name>+1</expr></argument>, <argument><expr><call><name>atoi</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeChangeP1</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>addr</name>+2</expr></argument>, <argument><expr><name>iDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeChangeP2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>addr</name>+2</expr></argument>, <argument><expr><name>iCookie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then><else>else<block>{
      <comment type="block">/* Read the specified cookie value */</comment>
      <decl_stmt><decl><type><name>static</name> <name>const</name> <name>VdbeOpList</name></type> <name><name>readCookie</name><index>[]</index></name> =<init> <expr><block>{
        <expr><block>{ <expr><name>OP_ReadCookie</name></expr>,      <expr>0</expr>,  <expr>1</expr>,  <expr>0</expr>}</block></expr>,    <comment type="block">/* 0 */</comment>
        <expr><block>{ <expr><name>OP_ResultRow</name></expr>,       <expr>1</expr>,  <expr>1</expr>,  <expr>0</expr>}</block></expr>
      }</block></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>addr</name> =<init> <expr><call><name>sqlite3VdbeAddOpList</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><call><name>ArraySize</name><argument_list>(<argument><expr><name>readCookie</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>readCookie</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeChangeP1</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>iDb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeChangeP3</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>iCookie</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeSetNumCols</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeSetColName</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>COLNAME_NAME</name></expr></argument>, <argument><expr><name>zLeft</name></expr></argument>, <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></then><else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_SCHEMA_VERSION_PRAGMAS */</comment>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_DEBUG</name></expr></argument>)</argument_list></call> || <call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <comment type="block">/*
  ** Report the current state of file logs for all databases
  */</comment>
  <if>if<condition>( <expr><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>, <argument><expr>"lock_status"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
    <decl_stmt><decl><type><name>static</name> <name>const</name> <name>char</name> *<name>const</name></type> <name><name>azLockName</name><index>[]</index></name> =<init> <expr><block>{
      <expr>"unlocked"</expr>, <expr>"shared"</expr>, <expr>"reserved"</expr>, <expr>"pending"</expr>, <expr>"exclusive"</expr>
    }</block></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeSetNumCols</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pParse</name>-&gt;<name>nMem</name> = 2</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeSetColName</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>COLNAME_NAME</name></expr></argument>, <argument><expr>"database"</expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3VdbeSetColName</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>COLNAME_NAME</name></expr></argument>, <argument><expr>"status"</expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<name>db</name>-&gt;<name>nDb</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
      <decl_stmt><decl><type><name>Btree</name> *</type><name>pBt</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>Pager</name> *</type><name>pPager</name></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>zState</name> =<init> <expr>"unknown"</expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>int</name></type> <name>j</name></decl>;</decl_stmt>
      <if>if<condition>( <expr><name>db</name>-&gt;<name><name>aDb</name><index>[<expr><name>i</name></expr>]</index></name>.<name>zName</name>==0</expr> )</condition><then> <continue>continue;</continue></then></if>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp4</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_String8</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>db</name>-&gt;<name><name>aDb</name><index>[<expr><name>i</name></expr>]</index></name>.<name>zName</name></expr></argument>, <argument><expr><name>P4_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>pBt</name> = <name>db</name>-&gt;<name><name>aDb</name><index>[<expr><name>i</name></expr>]</index></name>.<name>pBt</name></expr>;</expr_stmt>
      <if>if<condition>( <expr><name>pBt</name>==0 || (<name>pPager</name> = <call><name>sqlite3BtreePager</name><argument_list>(<argument><expr><name>pBt</name></expr></argument>)</argument_list></call>)==0</expr> )</condition><then><block>{
        <expr_stmt><expr><name>zState</name> = "closed"</expr>;</expr_stmt>
      }</block></then><else>else <if>if<condition>( <expr><call><name>sqlite3_file_control</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>i</name> ? <name>db</name>-&gt;<name><name>aDb</name><index>[<expr><name>i</name></expr>]</index></name>.<name>zName</name> : 0</expr></argument>, 
                                     <argument><expr><name>SQLITE_FCNTL_LOCKSTATE</name></expr></argument>, <argument><expr>&amp;<name>j</name></expr></argument>)</argument_list></call>==<name>SQLITE_OK</name></expr> )</condition><then><block>{
         <expr_stmt><expr><name>zState</name> = <name><name>azLockName</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
      }</block></then></if></else></if>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp4</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_String8</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>2</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>zState</name></expr></argument>, <argument><expr><name>P4_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_ResultRow</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>

  }</block></then><else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_SSE</name></cpp:ifdef>
  <comment type="block">/*
  ** Check to see if the sqlite_statements table exists.  Create it
  ** if it does not.
  */</comment>
  <if>if<condition>( <expr><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>, <argument><expr>"create_sqlite_statement_table"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
    <function_decl><type><name>extern</name> <name>int</name></type> <name>sqlite3CreateStatementsTable</name><parameter_list>(<param><decl><type><name>Parse</name>*</type></decl></param>)</parameter_list>;</function_decl>
    <expr_stmt><expr><call><name>sqlite3CreateStatementsTable</name><argument_list>(<argument><expr><name>pParse</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then><else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_HAS_CODEC</name></expr></cpp:if>
  <if>if<condition>( <expr><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>, <argument><expr>"key"</expr></argument>)</argument_list></call>==0 &amp;&amp; <name>zRight</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>sqlite3_key</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zRight</name></expr></argument>, <argument><expr><call><name>sqlite3Strlen30</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then><else>else
  <if>if<condition>( <expr><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>, <argument><expr>"rekey"</expr></argument>)</argument_list></call>==0 &amp;&amp; <name>zRight</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>sqlite3_rekey</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zRight</name></expr></argument>, <argument><expr><call><name>sqlite3Strlen30</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then><else>else
  <if>if<condition>( <expr><name>zRight</name> &amp;&amp; (<call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>, <argument><expr>"hexkey"</expr></argument>)</argument_list></call>==0 ||
                 <call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>, <argument><expr>"hexrekey"</expr></argument>)</argument_list></call>==0)</expr> )</condition><then><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name>, <name>h1</name>, <name>h2</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name></type> <name><name>zKey</name><index>[<expr>40</expr>]</index></name></decl>;</decl_stmt>
    <for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr>(<name>h1</name> = <name><name>zRight</name><index>[<expr><name>i</name></expr>]</index></name>)!=0 &amp;&amp; (<name>h2</name> = <name><name>zRight</name><index>[<expr><name>i</name>+1</expr>]</index></name>)!=0</expr>;</condition> <incr><expr><name>i</name>+=2</expr></incr>)<block>{
      <expr_stmt><expr><name>h1</name> += 9*(1&amp;(<name>h1</name>&gt;&gt;6))</expr>;</expr_stmt>
      <expr_stmt><expr><name>h2</name> += 9*(1&amp;(<name>h2</name>&gt;&gt;6))</expr>;</expr_stmt>
      <expr_stmt><expr><name><name>zKey</name><index>[<expr><name>i</name>/2</expr>]</index></name> = (<name>h2</name> &amp; 0x0f) | ((<name>h1</name> &amp; 0xf)&lt;&lt;4)</expr>;</expr_stmt>
    }</block></for>
    <if>if<condition>( <expr>(<name><name>zLeft</name><index>[<expr>3</expr>]</index></name> &amp; 0xf)==0xb</expr> )</condition><then><block>{
      <expr_stmt><expr><call><name>sqlite3_key</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zKey</name></expr></argument>, <argument><expr><name>i</name>/2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then><else>else<block>{
      <expr_stmt><expr><call><name>sqlite3_rekey</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zKey</name></expr></argument>, <argument><expr><name>i</name>/2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></then><else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_HAS_CODEC</name> || <call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_ENABLE_CEROD</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if>if<condition>( <expr><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>zLeft</name></expr></argument>, <argument><expr>"activate_extensions"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_HAS_CODEC</name></expr></cpp:if>
    <if>if<condition>( <expr><call><name>sqlite3StrNICmp</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr>"see-"</expr></argument>, <argument><expr>4</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
      <function_decl><type><name>extern</name> <name>void</name></type> <name>sqlite3_activate_see</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name>*</type></decl></param>)</parameter_list>;</function_decl>
      <expr_stmt><expr><call><name>sqlite3_activate_see</name><argument_list>(<argument><expr>&amp;<name><name>zRight</name><index>[<expr>4</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_CEROD</name></cpp:ifdef>
    <if>if<condition>( <expr><call><name>sqlite3StrNICmp</name><argument_list>(<argument><expr><name>zRight</name></expr></argument>, <argument><expr>"cerod-"</expr></argument>, <argument><expr>6</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
      <function_decl><type><name>extern</name> <name>void</name></type> <name>sqlite3_activate_cerod</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name>*</type></decl></param>)</parameter_list>;</function_decl>
      <expr_stmt><expr><call><name>sqlite3_activate_cerod</name><argument_list>(<argument><expr>&amp;<name><name>zRight</name><index>[<expr>6</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  }</block></then><else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

 
  <block>{<comment type="block">/* Empty ELSE clause */</comment>}</block></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if></else></if>

  <comment type="block">/* Code an OP_Expire at the end of each PRAGMA program to cause
  ** the VDBE implementing the pragma to expire. Most (all?) pragmas
  ** are only valid for a single execution.
  */</comment>
  <expr_stmt><expr><call><name>sqlite3VdbeAddOp2</name><argument_list>(<argument><expr><name>v</name></expr></argument>, <argument><expr><name>OP_Expire</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/*
  ** Reset the safety level, in case the fullfsync flag or synchronous
  ** setting changed.
  */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_PAGER_PRAGMAS</name></cpp:ifndef>
  <if>if<condition>( <expr><name>db</name>-&gt;<name>autoCommit</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>sqlite3BtreeSetSafetyLevel</name><argument_list>(<argument><expr><name>pDb</name>-&gt;<name>pBt</name></expr></argument>, <argument><expr><name>pDb</name>-&gt;<name>safety_level</name></expr></argument>,
               <argument><expr>(<name>db</name>-&gt;<name>flags</name>&amp;<name>SQLITE_FullFSync</name>)!=0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<label><name>pragma_out</name>:</label>
  <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zLeft</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zRight</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_PRAGMA || SQLITE_OMIT_PARSER */</comment>
</unit>
