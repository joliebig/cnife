<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="test4.c" filename=""><comment type="block">/*
** 2003 December 18
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** Code for testing the the SQLite library in a multithreaded environment.
**
** $Id: test4.c,v 1.24 2008/10/12 00:27:54 shane Exp $
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcl.h"</cpp:file></cpp:include>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_OS_UNIX</name></expr></argument>)</argument_list></call> &amp;&amp; <name>OS_UNIX</name>==1 &amp;&amp; <name>SQLITE_THREADSAFE</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;pthread.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sched.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<comment type="block">/*
** Each thread is controlled by an instance of the following
** structure.
*/</comment>
<typedef>typedef <type><struct>struct <name>Thread</name> Thread;</struct></type></typedef>
<struct>struct <name>Thread</name> <block>{<public type="default">
  <comment type="block">/* The first group of fields are writable by the master and read-only
  ** to the thread. */</comment>
  <decl_stmt><decl><type><name>char</name> *</type><name>zFilename</name></decl>;</decl_stmt>       <comment type="block">/* Name of database file */</comment>
  <function_decl><type><name>void</name></type> (*<name>xOp</name>)<parameter_list>(<param><decl><type><name>Thread</name>*</type></decl></param>)</parameter_list>;</function_decl>  <comment type="block">/* next operation to do */</comment>
  <decl_stmt><decl><type><name>char</name> *</type><name>zArg</name></decl>;</decl_stmt>            <comment type="block">/* argument usable by xOp */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>opnum</name></decl>;</decl_stmt>             <comment type="block">/* Operation number */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>busy</name></decl>;</decl_stmt>              <comment type="block">/* True if this thread is in use */</comment>

  <comment type="block">/* The next group of fields are writable by the thread but read-only to the
  ** master. */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>completed</name></decl>;</decl_stmt>        <comment type="block">/* Number of operations completed */</comment>
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>           <comment type="block">/* Open database */</comment>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> *</type><name>pStmt</name></decl>;</decl_stmt>     <comment type="block">/* Pending operation */</comment>
  <decl_stmt><decl><type><name>char</name> *</type><name>zErr</name></decl>;</decl_stmt>           <comment type="block">/* operation error */</comment>
  <decl_stmt><decl><type><name>char</name> *</type><name>zStaticErr</name></decl>;</decl_stmt>     <comment type="block">/* Static error message */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>               <comment type="block">/* operation return code */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>argc</name></decl>;</decl_stmt>             <comment type="block">/* number of columns in result */</comment>
  <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name><name>argv</name><index>[<expr>100</expr>]</index></name></decl>;</decl_stmt>    <comment type="block">/* result columns */</comment>
  <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name><name>colv</name><index>[<expr>100</expr>]</index></name></decl>;</decl_stmt>    <comment type="block">/* result column names */</comment>
</public>}</block>;</struct>

<comment type="block">/*
** There can be as many as 26 threads running at once.  Each is named
** by a capital letter: A, B, C, ..., Y, Z.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>N_THREAD</name> 26</cpp:define>
<decl_stmt><decl><type><name>static</name> <name>Thread</name></type> <name><name>threadset</name><index>[<expr><name>N_THREAD</name></expr>]</index></name></decl>;</decl_stmt>


<comment type="block">/*
** The main loop for a thread.  Threads use busy waiting. 
*/</comment>
<function><type><name>static</name> <name>void</name> *</type><name>thread_main</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>pArg</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>Thread</name> *</type><name>p</name> =<init> <expr>(<name>Thread</name>*)<name>pArg</name></expr></init></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>p</name>-&gt;<name>db</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <expr_stmt><expr><call><name>sqlite3_open</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>zFilename</name></expr></argument>, <argument><expr>&amp;<name>p</name>-&gt;<name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>SQLITE_OK</name>!=<call><name>sqlite3_errcode</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>db</name></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
    <expr_stmt><expr><name>p</name>-&gt;<name>zErr</name> = <call><name>strdup</name><argument_list>(<argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name>-&gt;<name>db</name> = 0</expr>;</expr_stmt>
  }</block></then></if>
  <expr_stmt><expr><name>p</name>-&gt;<name>pStmt</name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name>-&gt;<name>completed</name> = 1</expr>;</expr_stmt>
  <while>while<condition>( <expr><name>p</name>-&gt;<name>opnum</name>&lt;=<name>p</name>-&gt;<name>completed</name></expr> )</condition> <expr_stmt><expr><call><name>sched_yield</name><argument_list>()</argument_list></call></expr>;</expr_stmt></while>
  <while>while<condition>( <expr><name>p</name>-&gt;<name>xOp</name></expr> )</condition><block>{
    <if>if<condition>( <expr><name>p</name>-&gt;<name>zErr</name> &amp;&amp; <name>p</name>-&gt;<name>zErr</name>!=<name>p</name>-&gt;<name>zStaticErr</name></expr> )</condition><then><block>{
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>p</name>-&gt;<name>zErr</name> = 0</expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr>(*<name>p</name>-&gt;<name>xOp</name>)(<name>p</name>)</expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name>-&gt;<name>completed</name>++</expr>;</expr_stmt>
    <while>while<condition>( <expr><name>p</name>-&gt;<name>opnum</name>&lt;=<name>p</name>-&gt;<name>completed</name></expr> )</condition> <expr_stmt><expr><call><name>sched_yield</name><argument_list>()</argument_list></call></expr>;</expr_stmt></while>
  }</block></while>
  <if>if<condition>( <expr><name>p</name>-&gt;<name>pStmt</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name>-&gt;<name>pStmt</name> = 0</expr>;</expr_stmt>
  }</block></then></if>
  <if>if<condition>( <expr><name>p</name>-&gt;<name>db</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name>-&gt;<name>db</name> = 0</expr>;</expr_stmt>
  }</block></then></if>
  <if>if<condition>( <expr><name>p</name>-&gt;<name>zErr</name> &amp;&amp; <name>p</name>-&gt;<name>zErr</name>!=<name>p</name>-&gt;<name>zStaticErr</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name>-&gt;<name>zErr</name> = 0</expr>;</expr_stmt>
  }</block></then></if>
  <expr_stmt><expr><name>p</name>-&gt;<name>completed</name>++</expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_DEPRECATED</name></cpp:ifndef>
  <expr_stmt><expr><call><name>sqlite3_thread_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr>0</expr>;</return>
}</block></function>

<comment type="block">/*
** Get a thread ID which is an upper case letter.  Return the index.
** If the argument is not a valid thread ID put an error message in
** the interpreter and return -1.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>parse_thread_id</name><parameter_list>(<param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>zArg</name></decl></param>)</parameter_list><block>{
  <if>if<condition>( <expr><name>zArg</name>==0 || <name><name>zArg</name><index>[<expr>0</expr>]</index></name>==0 || <name><name>zArg</name><index>[<expr>1</expr>]</index></name>!=0 || !<call><name>isupper</name><argument_list>(<argument><expr>(<name>unsigned</name> <name>char</name>)<name><name>zArg</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"thread ID must be an upper case letter"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>-1</expr>;</return>
  }</block></then></if>
  <return>return <expr><name><name>zArg</name><index>[<expr>0</expr>]</index></name> - 'A'</expr>;</return>
}</block></function>

<comment type="block">/*
** Usage:    thread_create NAME  FILENAME
**
** NAME should be an upper case letter.  Start the thread running with
** an open connection to the given database.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>tcl_thread_create</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>NotUsed</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>const</name> <name>char</name> **</type><name>argv</name></decl></param>      <comment type="block">/* Text of each argument */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>pthread_t</name></type> <name>x</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>argc</name>!=3</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>,
       <argument><expr>" ID FILENAME"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><name>i</name> = <call><name>parse_thread_id</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>i</name>&lt;0</expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr><name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name>.<name>busy</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"thread "</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>" is already running"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name>.<name>busy</name> = 1</expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name>.<name>zFilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name>.<name>zFilename</name> = <call><name>sqlite3DbStrDup</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name>.<name>opnum</name> = 1</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name>.<name>completed</name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> = <call><name>pthread_create</name><argument_list>(<argument><expr>&amp;<name>x</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>thread_main</name></expr></argument>, <argument><expr>&amp;<name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>rc</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"failed to create the thread"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name>.<name>zFilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name>.<name>busy</name> = 0</expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><call><name>pthread_detach</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Wait for a thread to reach its idle state.
*/</comment>
<function><type><name>static</name> <name>void</name></type> <name>thread_wait</name><parameter_list>(<param><decl><type><name>Thread</name> *</type><name>p</name></decl></param>)</parameter_list><block>{
  <while>while<condition>( <expr><name>p</name>-&gt;<name>opnum</name>&gt;<name>p</name>-&gt;<name>completed</name></expr> )</condition> <expr_stmt><expr><call><name>sched_yield</name><argument_list>()</argument_list></call></expr>;</expr_stmt></while>
}</block></function>

<comment type="block">/*
** Usage:  thread_wait ID
**
** Wait on thread ID to reach its idle state.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>tcl_thread_wait</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>NotUsed</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>const</name> <name>char</name> **</type><name>argv</name></decl></param>      <comment type="block">/* Text of each argument */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>argc</name>!=2</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>,
       <argument><expr>" ID"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><name>i</name> = <call><name>parse_thread_id</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>i</name>&lt;0</expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr>!<name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name>.<name>busy</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"no such thread"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><call><name>thread_wait</name><argument_list>(<argument><expr>&amp;<name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Stop a thread.
*/</comment>
<function><type><name>static</name> <name>void</name></type> <name>stop_thread</name><parameter_list>(<param><decl><type><name>Thread</name> *</type><name>p</name></decl></param>)</parameter_list><block>{
  <expr_stmt><expr><call><name>thread_wait</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name>-&gt;<name>xOp</name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name>-&gt;<name>opnum</name>++</expr>;</expr_stmt>
  <expr_stmt><expr><call><name>thread_wait</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>zArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name>-&gt;<name>zArg</name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>zFilename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name>-&gt;<name>zFilename</name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name>-&gt;<name>busy</name> = 0</expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
** Usage:  thread_halt ID
**
** Cause a thread to shut itself down.  Wait for the shutdown to be
** completed.  If ID is "*" then stop all threads.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>tcl_thread_halt</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>NotUsed</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>const</name> <name>char</name> **</type><name>argv</name></decl></param>      <comment type="block">/* Text of each argument */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>argc</name>!=2</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>,
       <argument><expr>" ID"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><name><name>argv</name><index>[<expr>1</expr>]</index><index>[<expr>0</expr>]</index></name>=='*' &amp;&amp; <name><name>argv</name><index>[<expr>1</expr>]</index><index>[<expr>1</expr>]</index></name>==0</expr> )</condition><then><block>{
    <for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<name>N_THREAD</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
      <if>if<condition>( <expr><name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name>.<name>busy</name></expr> )</condition><then> <expr_stmt><expr><call><name>stop_thread</name><argument_list>(<argument><expr>&amp;<name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
    }</block></for>
  }</block></then><else>else<block>{
    <expr_stmt><expr><name>i</name> = <call><name>parse_thread_id</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>( <expr><name>i</name>&lt;0</expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
    <if>if<condition>( <expr>!<name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name>.<name>busy</name></expr> )</condition><then><block>{
      <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"no such thread"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><call><name>stop_thread</name><argument_list>(<argument><expr>&amp;<name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage: thread_argc  ID
**
** Wait on the most recent thread_step to complete, then return the
** number of columns in the result set.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>tcl_thread_argc</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>NotUsed</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>const</name> <name>char</name> **</type><name>argv</name></decl></param>      <comment type="block">/* Text of each argument */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr>100</expr>]</index></name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>argc</name>!=2</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>,
       <argument><expr>" ID"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><name>i</name> = <call><name>parse_thread_id</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>i</name>&lt;0</expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr>!<name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name>.<name>busy</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"no such thread"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><call><name>thread_wait</name><argument_list>(<argument><expr>&amp;<name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>, <argument><expr>"%d"</expr></argument>, <argument><expr><name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name>.<name>argc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage: thread_argv  ID   N
**
** Wait on the most recent thread_step to complete, then return the
** value of the N-th columns in the result set.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>tcl_thread_argv</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>NotUsed</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>const</name> <name>char</name> **</type><name>argv</name></decl></param>      <comment type="block">/* Text of each argument */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>argc</name>!=3</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>,
       <argument><expr>" ID N"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><name>i</name> = <call><name>parse_thread_id</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>i</name>&lt;0</expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr>!<name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name>.<name>busy</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"no such thread"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>Tcl_GetInt</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><call><name>thread_wait</name><argument_list>(<argument><expr>&amp;<name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>n</name>&lt;0 || <name>n</name>&gt;=<name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name>.<name>argc</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"column number out of range"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name>.<name><name>argv</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage: thread_colname  ID   N
**
** Wait on the most recent thread_step to complete, then return the
** name of the N-th columns in the result set.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>tcl_thread_colname</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>NotUsed</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>const</name> <name>char</name> **</type><name>argv</name></decl></param>      <comment type="block">/* Text of each argument */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>argc</name>!=3</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>,
       <argument><expr>" ID N"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><name>i</name> = <call><name>parse_thread_id</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>i</name>&lt;0</expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr>!<name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name>.<name>busy</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"no such thread"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>Tcl_GetInt</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><call><name>thread_wait</name><argument_list>(<argument><expr>&amp;<name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>n</name>&lt;0 || <name>n</name>&gt;=<name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name>.<name>argc</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"column number out of range"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name>.<name><name>colv</name><index>[<expr><name>n</name></expr>]</index></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage: thread_result  ID
**
** Wait on the most recent operation to complete, then return the
** result code from that operation.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>tcl_thread_result</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>NotUsed</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>const</name> <name>char</name> **</type><name>argv</name></decl></param>      <comment type="block">/* Text of each argument */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>zName</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>argc</name>!=2</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>,
       <argument><expr>" ID"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><name>i</name> = <call><name>parse_thread_id</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>i</name>&lt;0</expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr>!<name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name>.<name>busy</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"no such thread"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><call><name>thread_wait</name><argument_list>(<argument><expr>&amp;<name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <switch>switch<condition>( <expr><name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name>.<name>rc</name></expr> )</condition><block>{
    <case>case <expr><name>SQLITE_OK</name></expr>:         <expr_stmt><expr><name>zName</name> = "SQLITE_OK"</expr>;</expr_stmt>          <break>break;</break>
    </case><case>case <expr><name>SQLITE_ERROR</name></expr>:      <expr_stmt><expr><name>zName</name> = "SQLITE_ERROR"</expr>;</expr_stmt>       <break>break;</break>
    </case><case>case <expr><name>SQLITE_PERM</name></expr>:       <expr_stmt><expr><name>zName</name> = "SQLITE_PERM"</expr>;</expr_stmt>        <break>break;</break>
    </case><case>case <expr><name>SQLITE_ABORT</name></expr>:      <expr_stmt><expr><name>zName</name> = "SQLITE_ABORT"</expr>;</expr_stmt>       <break>break;</break>
    </case><case>case <expr><name>SQLITE_BUSY</name></expr>:       <expr_stmt><expr><name>zName</name> = "SQLITE_BUSY"</expr>;</expr_stmt>        <break>break;</break>
    </case><case>case <expr><name>SQLITE_LOCKED</name></expr>:     <expr_stmt><expr><name>zName</name> = "SQLITE_LOCKED"</expr>;</expr_stmt>      <break>break;</break>
    </case><case>case <expr><name>SQLITE_NOMEM</name></expr>:      <expr_stmt><expr><name>zName</name> = "SQLITE_NOMEM"</expr>;</expr_stmt>       <break>break;</break>
    </case><case>case <expr><name>SQLITE_READONLY</name></expr>:   <expr_stmt><expr><name>zName</name> = "SQLITE_READONLY"</expr>;</expr_stmt>    <break>break;</break>
    </case><case>case <expr><name>SQLITE_INTERRUPT</name></expr>:  <expr_stmt><expr><name>zName</name> = "SQLITE_INTERRUPT"</expr>;</expr_stmt>   <break>break;</break>
    </case><case>case <expr><name>SQLITE_IOERR</name></expr>:      <expr_stmt><expr><name>zName</name> = "SQLITE_IOERR"</expr>;</expr_stmt>       <break>break;</break>
    </case><case>case <expr><name>SQLITE_CORRUPT</name></expr>:    <expr_stmt><expr><name>zName</name> = "SQLITE_CORRUPT"</expr>;</expr_stmt>     <break>break;</break>
    </case><case>case <expr><name>SQLITE_FULL</name></expr>:       <expr_stmt><expr><name>zName</name> = "SQLITE_FULL"</expr>;</expr_stmt>        <break>break;</break>
    </case><case>case <expr><name>SQLITE_CANTOPEN</name></expr>:   <expr_stmt><expr><name>zName</name> = "SQLITE_CANTOPEN"</expr>;</expr_stmt>    <break>break;</break>
    </case><case>case <expr><name>SQLITE_PROTOCOL</name></expr>:   <expr_stmt><expr><name>zName</name> = "SQLITE_PROTOCOL"</expr>;</expr_stmt>    <break>break;</break>
    </case><case>case <expr><name>SQLITE_EMPTY</name></expr>:      <expr_stmt><expr><name>zName</name> = "SQLITE_EMPTY"</expr>;</expr_stmt>       <break>break;</break>
    </case><case>case <expr><name>SQLITE_SCHEMA</name></expr>:     <expr_stmt><expr><name>zName</name> = "SQLITE_SCHEMA"</expr>;</expr_stmt>      <break>break;</break>
    </case><case>case <expr><name>SQLITE_CONSTRAINT</name></expr>: <expr_stmt><expr><name>zName</name> = "SQLITE_CONSTRAINT"</expr>;</expr_stmt>  <break>break;</break>
    </case><case>case <expr><name>SQLITE_MISMATCH</name></expr>:   <expr_stmt><expr><name>zName</name> = "SQLITE_MISMATCH"</expr>;</expr_stmt>    <break>break;</break>
    </case><case>case <expr><name>SQLITE_MISUSE</name></expr>:     <expr_stmt><expr><name>zName</name> = "SQLITE_MISUSE"</expr>;</expr_stmt>      <break>break;</break>
    </case><case>case <expr><name>SQLITE_NOLFS</name></expr>:      <expr_stmt><expr><name>zName</name> = "SQLITE_NOLFS"</expr>;</expr_stmt>       <break>break;</break>
    </case><case>case <expr><name>SQLITE_AUTH</name></expr>:       <expr_stmt><expr><name>zName</name> = "SQLITE_AUTH"</expr>;</expr_stmt>        <break>break;</break>
    </case><case>case <expr><name>SQLITE_FORMAT</name></expr>:     <expr_stmt><expr><name>zName</name> = "SQLITE_FORMAT"</expr>;</expr_stmt>      <break>break;</break>
    </case><case>case <expr><name>SQLITE_RANGE</name></expr>:      <expr_stmt><expr><name>zName</name> = "SQLITE_RANGE"</expr>;</expr_stmt>       <break>break;</break>
    </case><case>case <expr><name>SQLITE_ROW</name></expr>:        <expr_stmt><expr><name>zName</name> = "SQLITE_ROW"</expr>;</expr_stmt>         <break>break;</break>
    </case><case>case <expr><name>SQLITE_DONE</name></expr>:       <expr_stmt><expr><name>zName</name> = "SQLITE_DONE"</expr>;</expr_stmt>        <break>break;</break>
    </case><default>default:                <expr_stmt><expr><name>zName</name> = "SQLITE_Unknown"</expr>;</expr_stmt>     <break>break;</break>
  </default>}</block></switch>
  <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zName</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage: thread_error  ID
**
** Wait on the most recent operation to complete, then return the
** error string.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>tcl_thread_error</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>NotUsed</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>const</name> <name>char</name> **</type><name>argv</name></decl></param>      <comment type="block">/* Text of each argument */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>argc</name>!=2</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>,
       <argument><expr>" ID"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><name>i</name> = <call><name>parse_thread_id</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>i</name>&lt;0</expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr>!<name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name>.<name>busy</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"no such thread"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><call><name>thread_wait</name><argument_list>(<argument><expr>&amp;<name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name>.<name>zErr</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** This procedure runs in the thread to compile an SQL statement.
*/</comment>
<function><type><name>static</name> <name>void</name></type> <name>do_compile</name><parameter_list>(<param><decl><type><name>Thread</name> *</type><name>p</name></decl></param>)</parameter_list><block>{
  <if>if<condition>( <expr><name>p</name>-&gt;<name>db</name>==0</expr> )</condition><then><block>{
    <expr_stmt><expr><name>p</name>-&gt;<name>zErr</name> = <name>p</name>-&gt;<name>zStaticErr</name> = "no database is open"</expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name>-&gt;<name>rc</name> = <name>SQLITE_ERROR</name></expr>;</expr_stmt>
    <return>return;</return>
  }</block></then></if>
  <if>if<condition>( <expr><name>p</name>-&gt;<name>pStmt</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name>-&gt;<name>pStmt</name> = 0</expr>;</expr_stmt>
  }</block></then></if>
  <expr_stmt><expr><name>p</name>-&gt;<name>rc</name> = <call><name>sqlite3_prepare</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>db</name></expr></argument>, <argument><expr><name>p</name>-&gt;<name>zArg</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr>&amp;<name>p</name>-&gt;<name>pStmt</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
** Usage: thread_compile ID SQL
**
** Compile a new virtual machine.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>tcl_thread_compile</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>NotUsed</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>const</name> <name>char</name> **</type><name>argv</name></decl></param>      <comment type="block">/* Text of each argument */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>argc</name>!=3</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>,
       <argument><expr>" ID SQL"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><name>i</name> = <call><name>parse_thread_id</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>i</name>&lt;0</expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr>!<name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name>.<name>busy</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"no such thread"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><call><name>thread_wait</name><argument_list>(<argument><expr>&amp;<name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name>.<name>xOp</name> = <name>do_compile</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name>.<name>zArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name>.<name>zArg</name> = <call><name>sqlite3DbStrDup</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name>.<name>opnum</name>++</expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** This procedure runs in the thread to step the virtual machine.
*/</comment>
<function><type><name>static</name> <name>void</name></type> <name>do_step</name><parameter_list>(<param><decl><type><name>Thread</name> *</type><name>p</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>p</name>-&gt;<name>pStmt</name>==0</expr> )</condition><then><block>{
    <expr_stmt><expr><name>p</name>-&gt;<name>zErr</name> = <name>p</name>-&gt;<name>zStaticErr</name> = "no virtual machine available"</expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name>-&gt;<name>rc</name> = <name>SQLITE_ERROR</name></expr>;</expr_stmt>
    <return>return;</return>
  }</block></then></if>
  <expr_stmt><expr><name>p</name>-&gt;<name>rc</name> = <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>p</name>-&gt;<name>rc</name>==<name>SQLITE_ROW</name></expr> )</condition><then><block>{
    <expr_stmt><expr><name>p</name>-&gt;<name>argc</name> = <call><name>sqlite3_column_count</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<call><name>sqlite3_data_count</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>pStmt</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
      <expr_stmt><expr><name>p</name>-&gt;<name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>char</name>*)<call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>pStmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
    <for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<name>p</name>-&gt;<name>argc</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
      <expr_stmt><expr><name>p</name>-&gt;<name><name>colv</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name>sqlite3_column_name</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>pStmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
  }</block></then></if>
}</block></function>

<comment type="block">/*
** Usage: thread_step ID
**
** Advance the virtual machine by one step
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>tcl_thread_step</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>NotUsed</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>const</name> <name>char</name> **</type><name>argv</name></decl></param>      <comment type="block">/* Text of each argument */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>argc</name>!=2</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>,
       <argument><expr>" IDL"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><name>i</name> = <call><name>parse_thread_id</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>i</name>&lt;0</expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr>!<name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name>.<name>busy</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"no such thread"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><call><name>thread_wait</name><argument_list>(<argument><expr>&amp;<name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name>.<name>xOp</name> = <name>do_step</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name>.<name>opnum</name>++</expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** This procedure runs in the thread to finalize a virtual machine.
*/</comment>
<function><type><name>static</name> <name>void</name></type> <name>do_finalize</name><parameter_list>(<param><decl><type><name>Thread</name> *</type><name>p</name></decl></param>)</parameter_list><block>{
  <if>if<condition>( <expr><name>p</name>-&gt;<name>pStmt</name>==0</expr> )</condition><then><block>{
    <expr_stmt><expr><name>p</name>-&gt;<name>zErr</name> = <name>p</name>-&gt;<name>zStaticErr</name> = "no virtual machine available"</expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name>-&gt;<name>rc</name> = <name>SQLITE_ERROR</name></expr>;</expr_stmt>
    <return>return;</return>
  }</block></then></if>
  <expr_stmt><expr><name>p</name>-&gt;<name>rc</name> = <call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name>-&gt;<name>pStmt</name> = 0</expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
** Usage: thread_finalize ID
**
** Finalize the virtual machine.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>tcl_thread_finalize</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>NotUsed</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>const</name> <name>char</name> **</type><name>argv</name></decl></param>      <comment type="block">/* Text of each argument */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>argc</name>!=2</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>,
       <argument><expr>" IDL"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><name>i</name> = <call><name>parse_thread_id</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>i</name>&lt;0</expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr>!<name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name>.<name>busy</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"no such thread"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><call><name>thread_wait</name><argument_list>(<argument><expr>&amp;<name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name>.<name>xOp</name> = <name>do_finalize</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name>.<name>zArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name>.<name>zArg</name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name>.<name>opnum</name>++</expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage: thread_swap ID ID
**
** Interchange the sqlite* pointer between two threads.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>tcl_thread_swap</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>NotUsed</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>const</name> <name>char</name> **</type><name>argv</name></decl></param>      <comment type="block">/* Text of each argument */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name>, <name>j</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>temp</name></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>argc</name>!=3</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>,
       <argument><expr>" ID1 ID2"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><name>i</name> = <call><name>parse_thread_id</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>i</name>&lt;0</expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr>!<name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name>.<name>busy</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"no such thread"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><call><name>thread_wait</name><argument_list>(<argument><expr>&amp;<name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>j</name> = <call><name>parse_thread_id</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>j</name>&lt;0</expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr>!<name><name>threadset</name><index>[<expr><name>j</name></expr>]</index></name>.<name>busy</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"no such thread"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><call><name>thread_wait</name><argument_list>(<argument><expr>&amp;<name><name>threadset</name><index>[<expr><name>j</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>temp</name> = <name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name>.<name>db</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name>.<name>db</name> = <name><name>threadset</name><index>[<expr><name>j</name></expr>]</index></name>.<name>db</name></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>threadset</name><index>[<expr><name>j</name></expr>]</index></name>.<name>db</name> = <name>temp</name></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage: thread_db_get ID
**
** Return the database connection pointer for the given thread.  Then
** remove the pointer from the thread itself.  Afterwards, the thread
** can be stopped and the connection can be used by the main thread.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>tcl_thread_db_get</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>NotUsed</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>const</name> <name>char</name> **</type><name>argv</name></decl></param>      <comment type="block">/* Text of each argument */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr>100</expr>]</index></name></decl>;</decl_stmt>
  <function_decl><type><name>extern</name> <name>int</name></type> <name>sqlite3TestMakePointerStr</name><parameter_list>(<param><decl><type><name>Tcl_Interp</name>*</type></decl></param>, <param><decl><type><name>char</name>*</type></decl></param>, <param><decl><type><name>void</name>*</type></decl></param>)</parameter_list>;</function_decl>
  <if>if<condition>( <expr><name>argc</name>!=2</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>,
       <argument><expr>" ID"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><name>i</name> = <call><name>parse_thread_id</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>i</name>&lt;0</expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr>!<name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name>.<name>busy</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"no such thread"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><call><name>thread_wait</name><argument_list>(<argument><expr>&amp;<name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3TestMakePointerStr</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name>.<name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name>.<name>db</name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr>(<name>char</name>*)0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage: thread_stmt_get ID
**
** Return the database stmt pointer for the given thread.  Then
** remove the pointer from the thread itself. 
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>tcl_thread_stmt_get</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>NotUsed</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>const</name> <name>char</name> **</type><name>argv</name></decl></param>      <comment type="block">/* Text of each argument */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr>100</expr>]</index></name></decl>;</decl_stmt>
  <function_decl><type><name>extern</name> <name>int</name></type> <name>sqlite3TestMakePointerStr</name><parameter_list>(<param><decl><type><name>Tcl_Interp</name>*</type></decl></param>, <param><decl><type><name>char</name>*</type></decl></param>, <param><decl><type><name>void</name>*</type></decl></param>)</parameter_list>;</function_decl>
  <if>if<condition>( <expr><name>argc</name>!=2</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>,
       <argument><expr>" ID"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><name>i</name> = <call><name>parse_thread_id</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>i</name>&lt;0</expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr>!<name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name>.<name>busy</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"no such thread"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><call><name>thread_wait</name><argument_list>(<argument><expr>&amp;<name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3TestMakePointerStr</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name>.<name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>threadset</name><index>[<expr><name>i</name></expr>]</index></name>.<name>pStmt</name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr>(<name>char</name>*)0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Register commands with the TCL interpreter.
*/</comment>
<function><type><name>int</name></type> <name>Sqlitetest4_Init</name><parameter_list>(<param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>static</name> <struct>struct <block>{<public type="default"/>
     <decl_stmt><decl><type><name>char</name> *</type><name>zName</name></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>Tcl_CmdProc</name> *</type><name>xProc</name></decl>;</decl_stmt>
  }</block> <decl><name><name>aCmd</name><index>[]</index></name> =<init> <expr><block>{
     <expr><block>{ <expr>"thread_create"</expr>,     <expr>(<name>Tcl_CmdProc</name>*)<name>tcl_thread_create</name></expr>     }</block></expr>,
     <expr><block>{ <expr>"thread_wait"</expr>,       <expr>(<name>Tcl_CmdProc</name>*)<name>tcl_thread_wait</name></expr>       }</block></expr>,
     <expr><block>{ <expr>"thread_halt"</expr>,       <expr>(<name>Tcl_CmdProc</name>*)<name>tcl_thread_halt</name></expr>       }</block></expr>,
     <expr><block>{ <expr>"thread_argc"</expr>,       <expr>(<name>Tcl_CmdProc</name>*)<name>tcl_thread_argc</name></expr>       }</block></expr>,
     <expr><block>{ <expr>"thread_argv"</expr>,       <expr>(<name>Tcl_CmdProc</name>*)<name>tcl_thread_argv</name></expr>       }</block></expr>,
     <expr><block>{ <expr>"thread_colname"</expr>,    <expr>(<name>Tcl_CmdProc</name>*)<name>tcl_thread_colname</name></expr>    }</block></expr>,
     <expr><block>{ <expr>"thread_result"</expr>,     <expr>(<name>Tcl_CmdProc</name>*)<name>tcl_thread_result</name></expr>     }</block></expr>,
     <expr><block>{ <expr>"thread_error"</expr>,      <expr>(<name>Tcl_CmdProc</name>*)<name>tcl_thread_error</name></expr>      }</block></expr>,
     <expr><block>{ <expr>"thread_compile"</expr>,    <expr>(<name>Tcl_CmdProc</name>*)<name>tcl_thread_compile</name></expr>    }</block></expr>,
     <expr><block>{ <expr>"thread_step"</expr>,       <expr>(<name>Tcl_CmdProc</name>*)<name>tcl_thread_step</name></expr>       }</block></expr>,
     <expr><block>{ <expr>"thread_finalize"</expr>,   <expr>(<name>Tcl_CmdProc</name>*)<name>tcl_thread_finalize</name></expr>   }</block></expr>,
     <expr><block>{ <expr>"thread_swap"</expr>,       <expr>(<name>Tcl_CmdProc</name>*)<name>tcl_thread_swap</name></expr>       }</block></expr>,
     <expr><block>{ <expr>"thread_db_get"</expr>,     <expr>(<name>Tcl_CmdProc</name>*)<name>tcl_thread_db_get</name></expr>     }</block></expr>,
     <expr><block>{ <expr>"thread_stmt_get"</expr>,   <expr>(<name>Tcl_CmdProc</name>*)<name>tcl_thread_stmt_get</name></expr>   }</block></expr>,
  }</block></expr></init></decl>;</struct></type></decl></decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<call><name>sizeof</name><argument_list>(<argument><expr><name>aCmd</name></expr></argument>)</argument_list></call>/<call><name>sizeof</name><argument_list>(<argument><expr><name><name>aCmd</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
    <expr_stmt><expr><call><name>Tcl_CreateCommand</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>aCmd</name><index>[<expr><name>i</name></expr>]</index></name>.<name>zName</name></expr></argument>, <argument><expr><name><name>aCmd</name><index>[<expr><name>i</name></expr>]</index></name>.<name>xProc</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<function><type><name>int</name></type> <name>Sqlitetest4_Init</name><parameter_list>(<param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>)</parameter_list><block>{ <return>return <expr><name>TCL_OK</name></expr>;</return> }</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OS_UNIX */</comment>
</unit>
