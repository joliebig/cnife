<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="mem1.c" filename=""><comment type="block">/*
** 2007 August 14
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
**
** This file contains low-level memory allocation drivers for when
** SQLite will use the standard C-library malloc/realloc/free interface
** to obtain the memory it needs.
**
** This file contains implementations of the low-level memory allocation
** routines specified in the sqlite3_mem_methods object.
**
** $Id: mem1.c,v 1.29 2008/12/10 21:19:57 drh Exp $
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>

<comment type="block">/*
** This version of the memory allocator is the default.  It is
** used when no other memory allocator is specified using compile-time
** macros.
*/</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_SYSTEM_MALLOC</name></cpp:ifdef>

<comment type="block">/*
** Like malloc(), but remember the size of the allocation
** so that we can find it later using sqlite3MemSize().
**
** For this low-level routine, we are guaranteed that nByte&gt;0 because
** cases of nByte&lt;=0 will be intercepted and dealt with by higher level
** routines.
*/</comment>
<function><type><name>static</name> <name>void</name> *</type><name>sqlite3MemMalloc</name><parameter_list>(<param><decl><type><name>int</name></type> <name>nByte</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3_int64</name> *</type><name>p</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>nByte</name>&gt;0</expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>nByte</name> = (<name>nByte</name>+7)&amp;~7</expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name> = <call><name>malloc</name><argument_list>( <argument><expr><name>nByte</name>+8</expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>p</name></expr> )</condition><then><block>{
    <expr_stmt><expr><name><name>p</name><index>[<expr>0</expr>]</index></name> = <name>nByte</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name>++</expr>;</expr_stmt>
  }</block></then></if>
  <return>return <expr>(<name>void</name> *)<name>p</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Like free() but works for allocations obtained from sqlite3MemMalloc()
** or sqlite3MemRealloc().
**
** For this low-level routine, we already know that pPrior!=0 since
** cases where pPrior==0 will have been intecepted and dealt with
** by higher-level routines.
*/</comment>
<function><type><name>static</name> <name>void</name></type> <name>sqlite3MemFree</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>pPrior</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3_int64</name> *</type><name>p</name> =<init> <expr>(<name>sqlite3_int64</name>*)<name>pPrior</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pPrior</name>!=0</expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name>--</expr>;</expr_stmt>
  <expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
** Like realloc().  Resize an allocation previously obtained from
** sqlite3MemMalloc().
**
** For this low-level interface, we know that pPrior!=0.  Cases where
** pPrior==0 while have been intercepted by higher-level routine and
** redirected to xMalloc.  Similarly, we know that nByte&gt;0 becauses
** cases where nByte&lt;=0 will have been intercepted by higher-level
** routines and redirected to xFree.
*/</comment>
<function><type><name>static</name> <name>void</name> *</type><name>sqlite3MemRealloc</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>pPrior</name></decl></param>, <param><decl><type><name>int</name></type> <name>nByte</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3_int64</name> *</type><name>p</name> =<init> <expr>(<name>sqlite3_int64</name>*)<name>pPrior</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pPrior</name>!=0 &amp;&amp; <name>nByte</name>&gt;0</expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>nByte</name> = (<name>nByte</name>+7)&amp;~7</expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name> = (<name>sqlite3_int64</name>*)<name>pPrior</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name>--</expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name> = <call><name>realloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>nByte</name>+8</expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>p</name></expr> )</condition><then><block>{
    <expr_stmt><expr><name><name>p</name><index>[<expr>0</expr>]</index></name> = <name>nByte</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>p</name>++</expr>;</expr_stmt>
  }</block></then></if>
  <return>return <expr>(<name>void</name>*)<name>p</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Report the allocated size of a prior return from xMalloc()
** or xRealloc().
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>sqlite3MemSize</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>pPrior</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3_int64</name> *</type><name>p</name></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>pPrior</name>==0</expr> )</condition><then> <return>return <expr>0</expr>;</return></then></if>
  <expr_stmt><expr><name>p</name> = (<name>sqlite3_int64</name>*)<name>pPrior</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name>--</expr>;</expr_stmt>
  <return>return <expr>(<name>int</name>)<name><name>p</name><index>[<expr>0</expr>]</index></name></expr>;</return>
}</block></function>

<comment type="block">/*
** Round up a request size to the next valid allocation size.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>sqlite3MemRoundup</name><parameter_list>(<param><decl><type><name>int</name></type> <name>n</name></decl></param>)</parameter_list><block>{
  <return>return <expr>(<name>n</name>+7) &amp; ~7</expr>;</return>
}</block></function>

<comment type="block">/*
** Initialize this module.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>sqlite3MemInit</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>NotUsed</name></decl></param>)</parameter_list><block>{
  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>NotUsed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Deinitialize this module.
*/</comment>
<function><type><name>static</name> <name>void</name></type> <name>sqlite3MemShutdown</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>NotUsed</name></decl></param>)</parameter_list><block>{
  <expr_stmt><expr><call><name>UNUSED_PARAMETER</name><argument_list>(<argument><expr><name>NotUsed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return;</return>
}</block></function>

<comment type="block">/*
** This routine is the only routine in this file with external linkage.
**
** Populate the low-level memory allocation function pointers in
** sqlite3GlobalConfig.m with pointers to the routines in this file.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3MemSetDefault</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>static</name> <name>const</name> <name>sqlite3_mem_methods</name></type> <name>defaultMethods</name> =<init> <expr><block>{
     <expr><name>sqlite3MemMalloc</name></expr>,
     <expr><name>sqlite3MemFree</name></expr>,
     <expr><name>sqlite3MemRealloc</name></expr>,
     <expr><name>sqlite3MemSize</name></expr>,
     <expr><name>sqlite3MemRoundup</name></expr>,
     <expr><name>sqlite3MemInit</name></expr>,
     <expr><name>sqlite3MemShutdown</name></expr>,
     <expr>0</expr>
  }</block></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sqlite3_config</name><argument_list>(<argument><expr><name>SQLITE_CONFIG_MALLOC</name></expr></argument>, <argument><expr>&amp;<name>defaultMethods</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_SYSTEM_MALLOC */</comment>
</unit>
