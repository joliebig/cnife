<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="test_md5.c" filename=""><comment type="block">/*
** SQLite uses this code for testing only.  It is not a part of
** the SQLite library.  This file implements two new TCL commands
** "md5" and "md5file" that compute md5 checksums on arbitrary text
** and on complete files.  These commands are used by the "testfixture"
** program to help verify the correct operation of the SQLite library.
**
** The original use of these TCL commands was to test the ROLLBACK
** feature of SQLite.  First compute the MD5-checksum of the database.
** Then make some changes but rollback the changes rather than commit
** them.  Compute a second MD5-checksum of the file and verify that the
** two checksums are the same.  Such is the original use of this code.
** New uses may have been added since this comment was written.
**
** $Id: test_md5.c,v 1.9 2009/01/14 23:38:03 drh Exp $
*/</comment>
<comment type="block">/*
 * This code implements the MD5 message-digest algorithm.
 * The algorithm is due to Ron Rivest.  This code was
 * written by Colin Plumb in 1993, no copyright is claimed.
 * This code is in the public domain; do with it what you wish.
 *
 * Equivalent code is available from RSA Data Security, Inc.
 * This code has been tested against that, and is equivalent,
 * except that you don't need to include two pages of legalese
 * with every copy.
 *
 * To compute the message digest of a chunk of bytes, declare an
 * MD5Context structure, pass it to MD5Init, call MD5Update as
 * needed on buffers full of bytes, and then call MD5Final, which
 * will fill a supplied 16-byte array with the digest.
 */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;tcl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3.h"</cpp:file></cpp:include>

<comment type="block">/*
 * If compiled on a machine that doesn't have a 32-bit integer,
 * you just set "uint32" to the appropriate datatype for an
 * unsigned 32-bit integer.  For example:
 *
 *       cc -Duint32='unsigned long' md5.c
 *
 */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>uint32</name></cpp:ifndef>
<cpp:define>#  <cpp:directive>define</cpp:directive> <name>uint32</name> <name>unsigned</name> <name>int</name></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<struct>struct <name>Context</name> <block>{<public type="default">
  <decl_stmt><decl><type><name>int</name></type> <name>isInit</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32</name></type> <name><name>buf</name><index>[<expr>4</expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>uint32</name></type> <name><name>bits</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>in</name><index>[<expr>64</expr>]</index></name></decl>;</decl_stmt>
</public>}</block>;</struct>
<typedef>typedef <type><struct>struct <name>Context</name> MD5Context;</struct></type></typedef>

<comment type="block">/*
 * Note: this code is harmless on little-endian machines.
 */</comment>
<function><type><name>static</name> <name>void</name></type> <name>byteReverse</name> <parameter_list>(<param><decl><type><name>unsigned</name> <name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>unsigned</name></type> <name>longs</name></decl></param>)</parameter_list><block>{
        <decl_stmt><decl><type><name>uint32</name></type> <name>t</name></decl>;</decl_stmt>
        <do>do <block>{
                <expr_stmt><expr><name>t</name> = (<name>uint32</name>)((<name>unsigned</name>)<name><name>buf</name><index>[<expr>3</expr>]</index></name>&lt;&lt;8 | <name><name>buf</name><index>[<expr>2</expr>]</index></name>) &lt;&lt; 16 |
                            ((<name>unsigned</name>)<name><name>buf</name><index>[<expr>1</expr>]</index></name>&lt;&lt;8 | <name><name>buf</name><index>[<expr>0</expr>]</index></name>)</expr>;</expr_stmt>
                <expr_stmt><expr>*(<name>uint32</name> *)<name>buf</name> = <name>t</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>buf</name> += 4</expr>;</expr_stmt>
        }</block> while <condition>(<expr>--<name>longs</name></expr>)</condition>;</do>
}</block></function>
<comment type="block">/* The four core functions - F1 is optimized somewhat */</comment>

<comment type="block">/* #define F1(x, y, z) (x &amp; y | ~x &amp; z) */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>F1</name>(x, y, z) (z ^ (x &amp; (y ^ z)))</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>F2</name>(x, y, z) F1(z, x, y)</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>F3</name>(x, y, z) (x ^ y ^ z)</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>F4</name>(x, y, z) (y ^ (x | ~z))</cpp:define>

<comment type="block">/* This is the central step in the MD5 algorithm. */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>MD5STEP</name>(f, w, x, y, z, data, s) \
        ( w += f(x, y, z) + data,  w = w&lt;&lt;s | w&gt;&gt;(32-s),  w += x )</cpp:define>

<comment type="block">/*
 * The core of the MD5 algorithm, this alters an existing MD5 hash to
 * reflect the addition of 16 longwords of new data.  MD5Update blocks
 * the data and converts bytes into longwords for this routine.
 */</comment>
<function><type><name>static</name> <name>void</name></type> <name>MD5Transform</name><parameter_list>(<param><decl><type><name>uint32</name></type> <name><name>buf</name><index>[<expr>4</expr>]</index></name></decl></param>, <param><decl><type><name>const</name> <name>uint32</name></type> <name><name>in</name><index>[<expr>16</expr>]</index></name></decl></param>)</parameter_list><block>{
        <decl_stmt><decl><type><name>register</name> <name>uint32</name></type> <name>a</name>, <name>b</name>, <name>c</name>, <name>d</name></decl>;</decl_stmt>

        <expr_stmt><expr><name>a</name> = <name><name>buf</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>b</name> = <name><name>buf</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>c</name> = <name><name>buf</name><index>[<expr>2</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr><name>d</name> = <name><name>buf</name><index>[<expr>3</expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr>0</expr>]</index></name>+0xd76aa478</expr></argument>,  <argument><expr>7</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr>1</expr>]</index></name>+0xe8c7b756</expr></argument>, <argument><expr>12</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr>2</expr>]</index></name>+0x242070db</expr></argument>, <argument><expr>17</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr>3</expr>]</index></name>+0xc1bdceee</expr></argument>, <argument><expr>22</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr>4</expr>]</index></name>+0xf57c0faf</expr></argument>,  <argument><expr>7</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr>5</expr>]</index></name>+0x4787c62a</expr></argument>, <argument><expr>12</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr>6</expr>]</index></name>+0xa8304613</expr></argument>, <argument><expr>17</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr>7</expr>]</index></name>+0xfd469501</expr></argument>, <argument><expr>22</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr>8</expr>]</index></name>+0x698098d8</expr></argument>,  <argument><expr>7</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr>9</expr>]</index></name>+0x8b44f7af</expr></argument>, <argument><expr>12</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr>10</expr>]</index></name>+0xffff5bb1</expr></argument>, <argument><expr>17</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr>11</expr>]</index></name>+0x895cd7be</expr></argument>, <argument><expr>22</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr>12</expr>]</index></name>+0x6b901122</expr></argument>,  <argument><expr>7</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr>13</expr>]</index></name>+0xfd987193</expr></argument>, <argument><expr>12</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr>14</expr>]</index></name>+0xa679438e</expr></argument>, <argument><expr>17</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F1</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr>15</expr>]</index></name>+0x49b40821</expr></argument>, <argument><expr>22</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr>1</expr>]</index></name>+0xf61e2562</expr></argument>,  <argument><expr>5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr>6</expr>]</index></name>+0xc040b340</expr></argument>,  <argument><expr>9</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr>11</expr>]</index></name>+0x265e5a51</expr></argument>, <argument><expr>14</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr>0</expr>]</index></name>+0xe9b6c7aa</expr></argument>, <argument><expr>20</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr>5</expr>]</index></name>+0xd62f105d</expr></argument>,  <argument><expr>5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr>10</expr>]</index></name>+0x02441453</expr></argument>,  <argument><expr>9</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr>15</expr>]</index></name>+0xd8a1e681</expr></argument>, <argument><expr>14</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr>4</expr>]</index></name>+0xe7d3fbc8</expr></argument>, <argument><expr>20</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr>9</expr>]</index></name>+0x21e1cde6</expr></argument>,  <argument><expr>5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr>14</expr>]</index></name>+0xc33707d6</expr></argument>,  <argument><expr>9</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr>3</expr>]</index></name>+0xf4d50d87</expr></argument>, <argument><expr>14</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr>8</expr>]</index></name>+0x455a14ed</expr></argument>, <argument><expr>20</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr>13</expr>]</index></name>+0xa9e3e905</expr></argument>,  <argument><expr>5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr>2</expr>]</index></name>+0xfcefa3f8</expr></argument>,  <argument><expr>9</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr>7</expr>]</index></name>+0x676f02d9</expr></argument>, <argument><expr>14</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F2</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr>12</expr>]</index></name>+0x8d2a4c8a</expr></argument>, <argument><expr>20</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr>5</expr>]</index></name>+0xfffa3942</expr></argument>,  <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr>8</expr>]</index></name>+0x8771f681</expr></argument>, <argument><expr>11</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr>11</expr>]</index></name>+0x6d9d6122</expr></argument>, <argument><expr>16</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr>14</expr>]</index></name>+0xfde5380c</expr></argument>, <argument><expr>23</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr>1</expr>]</index></name>+0xa4beea44</expr></argument>,  <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr>4</expr>]</index></name>+0x4bdecfa9</expr></argument>, <argument><expr>11</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr>7</expr>]</index></name>+0xf6bb4b60</expr></argument>, <argument><expr>16</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr>10</expr>]</index></name>+0xbebfbc70</expr></argument>, <argument><expr>23</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr>13</expr>]</index></name>+0x289b7ec6</expr></argument>,  <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr>0</expr>]</index></name>+0xeaa127fa</expr></argument>, <argument><expr>11</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr>3</expr>]</index></name>+0xd4ef3085</expr></argument>, <argument><expr>16</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr>6</expr>]</index></name>+0x04881d05</expr></argument>, <argument><expr>23</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr>9</expr>]</index></name>+0xd9d4d039</expr></argument>,  <argument><expr>4</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr>12</expr>]</index></name>+0xe6db99e5</expr></argument>, <argument><expr>11</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr>15</expr>]</index></name>+0x1fa27cf8</expr></argument>, <argument><expr>16</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F3</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr>2</expr>]</index></name>+0xc4ac5665</expr></argument>, <argument><expr>23</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr>0</expr>]</index></name>+0xf4292244</expr></argument>,  <argument><expr>6</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr>7</expr>]</index></name>+0x432aff97</expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr>14</expr>]</index></name>+0xab9423a7</expr></argument>, <argument><expr>15</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr>5</expr>]</index></name>+0xfc93a039</expr></argument>, <argument><expr>21</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr>12</expr>]</index></name>+0x655b59c3</expr></argument>,  <argument><expr>6</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr>3</expr>]</index></name>+0x8f0ccc92</expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr>10</expr>]</index></name>+0xffeff47d</expr></argument>, <argument><expr>15</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr>1</expr>]</index></name>+0x85845dd1</expr></argument>, <argument><expr>21</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr>8</expr>]</index></name>+0x6fa87e4f</expr></argument>,  <argument><expr>6</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr>15</expr>]</index></name>+0xfe2ce6e0</expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr>6</expr>]</index></name>+0xa3014314</expr></argument>, <argument><expr>15</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr>13</expr>]</index></name>+0x4e0811a1</expr></argument>, <argument><expr>21</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr>4</expr>]</index></name>+0xf7537e82</expr></argument>,  <argument><expr>6</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name><name>in</name><index>[<expr>11</expr>]</index></name>+0xbd3af235</expr></argument>, <argument><expr>10</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr>2</expr>]</index></name>+0x2ad7d2bb</expr></argument>, <argument><expr>15</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>MD5STEP</name><argument_list>(<argument><expr><name>F4</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>d</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name><name>in</name><index>[ <expr>9</expr>]</index></name>+0xeb86d391</expr></argument>, <argument><expr>21</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <expr_stmt><expr><name><name>buf</name><index>[<expr>0</expr>]</index></name> += <name>a</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>buf</name><index>[<expr>1</expr>]</index></name> += <name>b</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>buf</name><index>[<expr>2</expr>]</index></name> += <name>c</name></expr>;</expr_stmt>
        <expr_stmt><expr><name><name>buf</name><index>[<expr>3</expr>]</index></name> += <name>d</name></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
 * Start MD5 accumulation.  Set bit count to 0 and buffer to mysterious
 * initialization constants.
 */</comment>
<function><type><name>static</name> <name>void</name></type> <name>MD5Init</name><parameter_list>(<param><decl><type><name>MD5Context</name> *</type><name>ctx</name></decl></param>)</parameter_list><block>{
        <expr_stmt><expr><name>ctx</name>-&gt;<name>isInit</name> = 1</expr>;</expr_stmt>
        <expr_stmt><expr><name>ctx</name>-&gt;<name><name>buf</name><index>[<expr>0</expr>]</index></name> = 0x67452301</expr>;</expr_stmt>
        <expr_stmt><expr><name>ctx</name>-&gt;<name><name>buf</name><index>[<expr>1</expr>]</index></name> = 0xefcdab89</expr>;</expr_stmt>
        <expr_stmt><expr><name>ctx</name>-&gt;<name><name>buf</name><index>[<expr>2</expr>]</index></name> = 0x98badcfe</expr>;</expr_stmt>
        <expr_stmt><expr><name>ctx</name>-&gt;<name><name>buf</name><index>[<expr>3</expr>]</index></name> = 0x10325476</expr>;</expr_stmt>
        <expr_stmt><expr><name>ctx</name>-&gt;<name><name>bits</name><index>[<expr>0</expr>]</index></name> = 0</expr>;</expr_stmt>
        <expr_stmt><expr><name>ctx</name>-&gt;<name><name>bits</name><index>[<expr>1</expr>]</index></name> = 0</expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
 * Update context to reflect the concatenation of another buffer full
 * of bytes.
 */</comment>
<function><type><name>static</name> 
<name>void</name></type> <name>MD5Update</name><parameter_list>(<param><decl><type><name>MD5Context</name> *</type><name>pCtx</name></decl></param>, <param><decl><type><name>const</name> <name>unsigned</name> <name>char</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>unsigned</name> <name>int</name></type> <name>len</name></decl></param>)</parameter_list><block>{
        <decl_stmt><decl><type>struct <name>Context</name> *</type><name>ctx</name> =<init> <expr>(struct <name>Context</name> *)<name>pCtx</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>uint32</name></type> <name>t</name></decl>;</decl_stmt>

        <comment type="block">/* Update bitcount */</comment>

        <expr_stmt><expr><name>t</name> = <name>ctx</name>-&gt;<name><name>bits</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
        <if>if <condition>(<expr>(<name>ctx</name>-&gt;<name><name>bits</name><index>[<expr>0</expr>]</index></name> = <name>t</name> + ((<name>uint32</name>)<name>len</name> &lt;&lt; 3)) &lt; <name>t</name></expr>)</condition><then>
                <expr_stmt><expr><name>ctx</name>-&gt;<name><name>bits</name><index>[<expr>1</expr>]</index></name>++</expr>;</expr_stmt></then></if> <comment type="block">/* Carry from low to high */</comment>
        <expr_stmt><expr><name>ctx</name>-&gt;<name><name>bits</name><index>[<expr>1</expr>]</index></name> += <name>len</name> &gt;&gt; 29</expr>;</expr_stmt>

        <expr_stmt><expr><name>t</name> = (<name>t</name> &gt;&gt; 3) &amp; 0x3f</expr>;</expr_stmt>    <comment type="block">/* Bytes already in shsInfo-&gt;data */</comment>

        <comment type="block">/* Handle any leading odd-sized chunks */</comment>

        <if>if <condition>( <expr><name>t</name></expr> )</condition><then> <block>{
                <decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>p</name> =<init> <expr>(<name>unsigned</name> <name>char</name> *)<name>ctx</name>-&gt;<name>in</name> + <name>t</name></expr></init></decl>;</decl_stmt>

                <expr_stmt><expr><name>t</name> = 64-<name>t</name></expr>;</expr_stmt>
                <if>if <condition>(<expr><name>len</name> &lt; <name>t</name></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return;</return>
                }</block></then></if>
                <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>byteReverse</name><argument_list>(<argument><expr><name>ctx</name>-&gt;<name>in</name></expr></argument>, <argument><expr>16</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>MD5Transform</name><argument_list>(<argument><expr><name>ctx</name>-&gt;<name>buf</name></expr></argument>, <argument><expr>(<name>uint32</name> *)<name>ctx</name>-&gt;<name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>buf</name> += <name>t</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>len</name> -= <name>t</name></expr>;</expr_stmt>
        }</block></then></if>

        <comment type="block">/* Process data in 64-byte chunks */</comment>

        <while>while <condition>(<expr><name>len</name> &gt;= 64</expr>)</condition> <block>{
                <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ctx</name>-&gt;<name>in</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>64</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>byteReverse</name><argument_list>(<argument><expr><name>ctx</name>-&gt;<name>in</name></expr></argument>, <argument><expr>16</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>MD5Transform</name><argument_list>(<argument><expr><name>ctx</name>-&gt;<name>buf</name></expr></argument>, <argument><expr>(<name>uint32</name> *)<name>ctx</name>-&gt;<name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>buf</name> += 64</expr>;</expr_stmt>
                <expr_stmt><expr><name>len</name> -= 64</expr>;</expr_stmt>
        }</block></while>

        <comment type="block">/* Handle any remaining bytes of data. */</comment>

        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>ctx</name>-&gt;<name>in</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
 * Final wrapup - pad to 64-byte boundary with the bit pattern 
 * 1 0* (64-bit count of bits processed, MSB-first)
 */</comment>
<function><type><name>static</name> <name>void</name></type> <name>MD5Final</name><parameter_list>(<param><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr>16</expr>]</index></name></decl></param>, <param><decl><type><name>MD5Context</name> *</type><name>pCtx</name></decl></param>)</parameter_list><block>{
        <decl_stmt><decl><type>struct <name>Context</name> *</type><name>ctx</name> =<init> <expr>(struct <name>Context</name> *)<name>pCtx</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name></type> <name>count</name></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>p</name></decl>;</decl_stmt>

        <comment type="block">/* Compute number of bytes mod 64 */</comment>
        <expr_stmt><expr><name>count</name> = (<name>ctx</name>-&gt;<name><name>bits</name><index>[<expr>0</expr>]</index></name> &gt;&gt; 3) &amp; 0x3F</expr>;</expr_stmt>

        <comment type="block">/* Set the first char of padding to 0x80.  This is safe since there is
           always at least one byte free */</comment>
        <expr_stmt><expr><name>p</name> = <name>ctx</name>-&gt;<name>in</name> + <name>count</name></expr>;</expr_stmt>
        <expr_stmt><expr>*<name>p</name>++ = 0x80</expr>;</expr_stmt>

        <comment type="block">/* Bytes of padding needed to make 64 bytes */</comment>
        <expr_stmt><expr><name>count</name> = 64 - 1 - <name>count</name></expr>;</expr_stmt>

        <comment type="block">/* Pad out to 56 mod 64 */</comment>
        <if>if <condition>(<expr><name>count</name> &lt; 8</expr>)</condition><then> <block>{
                <comment type="block">/* Two lots of padding:  Pad the first block to 64 bytes */</comment>
                <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>count</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>byteReverse</name><argument_list>(<argument><expr><name>ctx</name>-&gt;<name>in</name></expr></argument>, <argument><expr>16</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>MD5Transform</name><argument_list>(<argument><expr><name>ctx</name>-&gt;<name>buf</name></expr></argument>, <argument><expr>(<name>uint32</name> *)<name>ctx</name>-&gt;<name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

                <comment type="block">/* Now fill the next block with 56 bytes */</comment>
                <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ctx</name>-&gt;<name>in</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>56</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
                <comment type="block">/* Pad block to 56 bytes */</comment>
                <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>count</name>-8</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
        <expr_stmt><expr><call><name>byteReverse</name><argument_list>(<argument><expr><name>ctx</name>-&gt;<name>in</name></expr></argument>, <argument><expr>14</expr></argument>)</argument_list></call></expr>;</expr_stmt>

        <comment type="block">/* Append length in bits and transform */</comment>
        <expr_stmt><expr>((<name>uint32</name> *)<name>ctx</name>-&gt;<name>in</name>)[ 14 ] = <name>ctx</name>-&gt;<name><name>bits</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
        <expr_stmt><expr>((<name>uint32</name> *)<name>ctx</name>-&gt;<name>in</name>)[ 15 ] = <name>ctx</name>-&gt;<name><name>bits</name><index>[<expr>1</expr>]</index></name></expr>;</expr_stmt>

        <expr_stmt><expr><call><name>MD5Transform</name><argument_list>(<argument><expr><name>ctx</name>-&gt;<name>buf</name></expr></argument>, <argument><expr>(<name>uint32</name> *)<name>ctx</name>-&gt;<name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <macro><name>byteReverse</name><argument_list>(<argument>(unsigned char *)ctx-&gt;buf</argument>, <argument>4</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
        <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name>ctx</name>-&gt;<name>buf</name></expr></argument>, <argument><expr>16</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>ctx</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>    <comment type="block">/* In case it is sensitive */</comment>
}</block></function>

<comment type="block">/*
** Convert a digest into base-16.  digest should be declared as
** "unsigned char digest[16]" in the calling function.  The MD5
** digest is stored in the first 16 bytes.  zBuf should
** be "char zBuf[33]".
*/</comment>
<function><type><name>static</name> <name>void</name></type> <name>DigestToBase16</name><parameter_list>(<param><decl><type><name>unsigned</name> <name>char</name> *</type><name>digest</name></decl></param>, <param><decl><type><name>char</name> *</type><name>zBuf</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>static</name> <name>char</name> <name>const</name></type> <name><name>zEncode</name><index>[]</index></name> =<init> <expr>"0123456789abcdef"</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name>, <name>j</name></decl>;</decl_stmt>

  <for>for(<init><expr><name>j</name>=<name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;16</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>a</name> =<init> <expr><name><name>digest</name><index>[<expr><name>i</name></expr>]</index></name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><name><name>zBuf</name><index>[<expr><name>j</name>++</expr>]</index></name> = <name><name>zEncode</name><index>[<expr>(<name>a</name>&gt;&gt;4)&amp;0xf</expr>]</index></name></expr>;</expr_stmt>
    <expr_stmt><expr><name><name>zBuf</name><index>[<expr><name>j</name>++</expr>]</index></name> = <name><name>zEncode</name><index>[<expr><name>a</name> &amp; 0xf</expr>]</index></name></expr>;</expr_stmt>
  }</block></for>
  <expr_stmt><expr><name><name>zBuf</name><index>[<expr><name>j</name></expr>]</index></name> = 0</expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
** A TCL command for md5.  The argument is the text to be hashed.  The
** Result is the hash in base64.  
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>md5_cmd</name><parameter_list>(<param><decl><type><name>void</name>*</type><name>cd</name></decl></param>, <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>, <param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><name>const</name> <name>char</name> **</type><name>argv</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>MD5Context</name></type> <name>ctx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr>16</expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr>30</expr>]</index></name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>argc</name>!=2</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>,<argument><expr>"wrong # args: should be \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>, 
        <argument><expr>" TEXT\""</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><call><name>MD5Init</name><argument_list>(<argument><expr>&amp;<name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <macro><name>MD5Update</name><argument_list>(<argument>&amp;ctx</argument>, <argument>(unsigned char*)argv[1]</argument>, <argument>(unsigned)strlen(argv[1])</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
  <expr_stmt><expr><call><name>MD5Final</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr>&amp;<name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>DigestToBase16</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr>(<name>char</name>*)0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** A TCL command to take the md5 hash of a file.  The argument is the
** name of the file.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>md5file_cmd</name><parameter_list>(<param><decl><type><name>void</name>*</type><name>cd</name></decl></param>, <param><decl><type><name>Tcl_Interp</name>*</type><name>interp</name></decl></param>, <param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><name>const</name> <name>char</name> **</type><name>argv</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>FILE</name> *</type><name>in</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>MD5Context</name></type> <name>ctx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr>16</expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr>10240</expr>]</index></name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>argc</name>!=2</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>,<argument><expr>"wrong # args: should be \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>, 
        <argument><expr>" FILENAME\""</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><name>in</name> = <call><name>fopen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr>"rb"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>in</name>==0</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>,<argument><expr>"unable to open file \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>, 
         <argument><expr>"\" for reading"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><call><name>MD5Init</name><argument_list>(<argument><expr>&amp;<name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for(<init>;</init><condition>;</condition><incr/>)<block>{
    <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>n</name> = <call><name>fread</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>( <expr><name>n</name>&lt;=0</expr> )</condition><then> <break>break;</break></then></if>
    <macro><name>MD5Update</name><argument_list>(<argument>&amp;ctx</argument>, <argument>(unsigned char*)zBuf</argument>, <argument>(unsigned)n</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
  }</block></for>
  <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>in</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5Final</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr>&amp;<name>ctx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>DigestToBase16</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr>(<name>char</name>*)0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Register the two TCL commands above with the TCL interpreter.
*/</comment>
<function><type><name>int</name></type> <name>Md5_Init</name><parameter_list>(<param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>)</parameter_list><block>{
  <expr_stmt><expr><call><name>Tcl_CreateCommand</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"md5"</expr></argument>, <argument><expr>(<name>Tcl_CmdProc</name>*)<name>md5_cmd</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_CreateCommand</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"md5file"</expr></argument>, <argument><expr>(<name>Tcl_CmdProc</name>*)<name>md5file_cmd</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** During testing, the special md5sum() aggregate function is available.
** inside SQLite.  The following routines implement that function.
*/</comment>
<function><type><name>static</name> <name>void</name></type> <name>md5step</name><parameter_list>(<param><decl><type><name>sqlite3_context</name> *</type><name>context</name></decl></param>, <param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><name>sqlite3_value</name> **</type><name>argv</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>MD5Context</name> *</type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>argc</name>&lt;1</expr> )</condition><then> <return>return;</return></then></if>
  <expr_stmt><expr><name>p</name> = <call><name>sqlite3_aggregate_context</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>p</name>==0</expr> )</condition><then> <return>return;</return></then></if>
  <if>if<condition>( <expr>!<name>p</name>-&gt;<name>isInit</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>MD5Init</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<name>argc</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
    <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>zData</name> =<init> <expr>(<name>char</name>*)<call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if<condition>( <expr><name>zData</name></expr> )</condition><then><block>{
      <macro><name>MD5Update</name><argument_list>(<argument>p</argument>, <argument>(unsigned char*)zData</argument>, <argument>strlen(zData)</argument>)</argument_list></macro><empty_stmt>;</empty_stmt>
    }</block></then></if>
  }</block></for>
}</block></function>
<function><type><name>static</name> <name>void</name></type> <name>md5finalize</name><parameter_list>(<param><decl><type><name>sqlite3_context</name> *</type><name>context</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>MD5Context</name> *</type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name><name>digest</name><index>[<expr>16</expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr>33</expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><name>p</name> = <call><name>sqlite3_aggregate_context</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>MD5Final</name><argument_list>(<argument><expr><name>digest</name></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>DigestToBase16</name><argument_list>(<argument><expr><name>digest</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_result_text</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>int</name></type> <name>Md5_Register</name><parameter_list>(<param><decl><type><name>sqlite3</name> *</type><name>db</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> =<init> <expr><call><name>sqlite3_create_function</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr>"md5sum"</expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name>SQLITE_UTF8</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, 
                                 <argument><expr><name>md5step</name></expr></argument>, <argument><expr><name>md5finalize</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sqlite3_overload_function</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr>"md5sum"</expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>  <comment type="block">/* To exercise this API */</comment>
  <return>return <expr><name>rc</name></expr>;</return>
}</block></function>
</unit>
