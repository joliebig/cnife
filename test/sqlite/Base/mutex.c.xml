<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="mutex.c" filename=""><comment type="block">/*
** 2007 August 14
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** This file contains the C functions that implement mutexes.
**
** This file contains code that is common across all mutex implementations.

**
** $Id: mutex.c,v 1.29 2008/10/07 15:25:48 drh Exp $
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_MUTEX_OMIT</name></cpp:ifndef>
<comment type="block">/*
** Initialize the mutex system.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3MutexInit</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list><block>{ 
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> =<init> <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>sqlite3GlobalConfig</name>.<name>bCoreMutex</name></expr> )</condition><then><block>{
    <if>if<condition>( <expr>!<name>sqlite3GlobalConfig</name>.<name>mutex</name>.<name>xMutexAlloc</name></expr> )</condition><then><block>{
      <comment type="block">/* If the xMutexAlloc method has not been set, then the user did not
      ** install a mutex implementation via sqlite3_config() prior to 
      ** sqlite3_initialize() being called. This block copies pointers to
      ** the default implementation into the sqlite3GlobalConfig structure.
      **
      ** The danger is that although sqlite3_config() is not a threadsafe
      ** API, sqlite3_initialize() is, and so multiple threads may be
      ** attempting to run this function simultaneously. To guard write
      ** access to the sqlite3GlobalConfig structure, the 'MASTER' static mutex
      ** is obtained before modifying it.
      */</comment>
      <decl_stmt><decl><type><name>sqlite3_mutex_methods</name> *</type><name>p</name> =<init> <expr><call><name>sqlite3DefaultMutex</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <decl_stmt><decl><type><name>sqlite3_mutex</name> *</type><name>pMaster</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
  
      <expr_stmt><expr><name>rc</name> = <name>p</name>-&gt;<call><name>xMutexInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <if>if<condition>( <expr><name>rc</name>==<name>SQLITE_OK</name></expr> )</condition><then><block>{
        <expr_stmt><expr><name>pMaster</name> = <name>p</name>-&gt;<call><name>xMutexAlloc</name><argument_list>(<argument><expr><name>SQLITE_MUTEX_STATIC_MASTER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>pMaster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>p</name>-&gt;<call><name>xMutexEnter</name><argument_list>(<argument><expr><name>pMaster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>sqlite3GlobalConfig</name>.<name>mutex</name>.<name>xMutexAlloc</name>==0 
             || <name>sqlite3GlobalConfig</name>.<name>mutex</name>.<name>xMutexAlloc</name>==<name>p</name>-&gt;<name>xMutexAlloc</name></expr></argument>
        )</argument_list></call></expr>;</expr_stmt>
        <if>if<condition>( <expr>!<name>sqlite3GlobalConfig</name>.<name>mutex</name>.<name>xMutexAlloc</name></expr> )</condition><then><block>{
          <expr_stmt><expr><name>sqlite3GlobalConfig</name>.<name>mutex</name> = *<name>p</name></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name>p</name>-&gt;<call><name>xMutexLeave</name><argument_list>(<argument><expr><name>pMaster</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
    }</block></then><else>else<block>{
      <expr_stmt><expr><name>rc</name> = <name>sqlite3GlobalConfig</name>.<name>mutex</name>.<call><name>xMutexInit</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></then></if>

  <return>return <expr><name>rc</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Shutdown the mutex system. This call frees resources allocated by
** sqlite3MutexInit().
*/</comment>
<function><type><name>int</name></type> <name>sqlite3MutexEnd</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> =<init> <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>rc</name> = <name>sqlite3GlobalConfig</name>.<name>mutex</name>.<call><name>xMutexEnd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Retrieve a pointer to a static mutex or allocate a new dynamic one.
*/</comment>
<function><type><name>sqlite3_mutex</name> *</type><name>sqlite3_mutex_alloc</name><parameter_list>(<param><decl><type><name>int</name></type> <name>id</name></decl></param>)</parameter_list><block>{
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_AUTOINIT</name></cpp:ifndef>
  <if>if<condition>( <expr><call><name>sqlite3_initialize</name><argument_list>()</argument_list></call></expr> )</condition><then> <return>return <expr>0</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>sqlite3GlobalConfig</name>.<name>mutex</name>.<call><name>xMutexAlloc</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><name>sqlite3_mutex</name> *</type><name>sqlite3MutexAlloc</name><parameter_list>(<param><decl><type><name>int</name></type> <name>id</name></decl></param>)</parameter_list><block>{
  <if>if<condition>( <expr>!<name>sqlite3GlobalConfig</name>.<name>bCoreMutex</name></expr> )</condition><then><block>{
    <return>return <expr>0</expr>;</return>
  }</block></then></if>
  <return>return <expr><name>sqlite3GlobalConfig</name>.<name>mutex</name>.<call><name>xMutexAlloc</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<comment type="block">/*
** Free a dynamic mutex.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3_mutex_free</name><parameter_list>(<param><decl><type><name>sqlite3_mutex</name> *</type><name>p</name></decl></param>)</parameter_list><block>{
  <if>if<condition>( <expr><name>p</name></expr> )</condition><then><block>{
    <expr_stmt><expr><name>sqlite3GlobalConfig</name>.<name>mutex</name>.<call><name>xMutexFree</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<comment type="block">/*
** Obtain the mutex p. If some other thread already has the mutex, block
** until it can be obtained.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3_mutex_enter</name><parameter_list>(<param><decl><type><name>sqlite3_mutex</name> *</type><name>p</name></decl></param>)</parameter_list><block>{
  <if>if<condition>( <expr><name>p</name></expr> )</condition><then><block>{
    <expr_stmt><expr><name>sqlite3GlobalConfig</name>.<name>mutex</name>.<call><name>xMutexEnter</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<comment type="block">/*
** Obtain the mutex p. If successful, return SQLITE_OK. Otherwise, if another
** thread holds the mutex and it cannot be obtained, return SQLITE_BUSY.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3_mutex_try</name><parameter_list>(<param><decl><type><name>sqlite3_mutex</name> *</type><name>p</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> =<init> <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>p</name></expr> )</condition><then><block>{
    <return>return <expr><name>sqlite3GlobalConfig</name>.<name>mutex</name>.<call><name>xMutexTry</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
  }</block></then></if>
  <return>return <expr><name>rc</name></expr>;</return>
}</block></function>

<comment type="block">/*
** The sqlite3_mutex_leave() routine exits a mutex that was previously
** entered by the same thread.  The behavior is undefined if the mutex 
** is not currently entered. If a NULL pointer is passed as an argument
** this function is a no-op.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3_mutex_leave</name><parameter_list>(<param><decl><type><name>sqlite3_mutex</name> *</type><name>p</name></decl></param>)</parameter_list><block>{
  <if>if<condition>( <expr><name>p</name></expr> )</condition><then><block>{
    <expr_stmt><expr><name>sqlite3GlobalConfig</name>.<name>mutex</name>.<call><name>xMutexLeave</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NDEBUG</name></cpp:ifndef>
<comment type="block">/*
** The sqlite3_mutex_held() and sqlite3_mutex_notheld() routine are
** intended for use inside assert() statements.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3_mutex_held</name><parameter_list>(<param><decl><type><name>sqlite3_mutex</name> *</type><name>p</name></decl></param>)</parameter_list><block>{
  <return>return <expr><name>p</name>==0 || <name>sqlite3GlobalConfig</name>.<name>mutex</name>.<call><name>xMutexHeld</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>sqlite3_mutex_notheld</name><parameter_list>(<param><decl><type><name>sqlite3_mutex</name> *</type><name>p</name></decl></param>)</parameter_list><block>{
  <return>return <expr><name>p</name>==0 || <name>sqlite3GlobalConfig</name>.<name>mutex</name>.<call><name>xMutexNotheld</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_MUTEX */</comment>
</unit>
