<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="test1.c" filename=""><comment type="block">/*
** 2001 September 15
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** Code for testing all sorts of SQLite interfaces.  This code
** is not included in the SQLite library.  It is used for automated
** testing of the SQLite library.
**
** $Id: test1.c,v 1.342 2009/01/10 13:24:51 drh Exp $
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<comment type="block">/*
** This is a copy of the first part of the SqliteDb structure in 
** tclsqlite.c.  We need it here so that the get_sqlite_pointer routine
** can extract the sqlite3* pointer from an existing Tcl SQLite
** connection.
*/</comment>
<struct>struct <name>SqliteDb</name> <block>{<public type="default">
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>
</public>}</block>;</struct>

<comment type="block">/*
** Convert text generated by the "%p" conversion format back into
** a pointer.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>testHexToInt</name><parameter_list>(<param><decl><type><name>int</name></type> <name>h</name></decl></param>)</parameter_list><block>{
  <if>if<condition>( <expr><name>h</name>&gt;='0' &amp;&amp; <name>h</name>&lt;='9'</expr> )</condition><then><block>{
    <return>return <expr><name>h</name> - '0'</expr>;</return>
  }</block></then><else>else <if>if<condition>( <expr><name>h</name>&gt;='a' &amp;&amp; <name>h</name>&lt;='f'</expr> )</condition><then><block>{
    <return>return <expr><name>h</name> - 'a' + 10</expr>;</return>
  }</block></then><else>else<block>{
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>h</name>&gt;='A' &amp;&amp; <name>h</name>&lt;='F'</expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>h</name> - 'A' + 10</expr>;</return>
  }</block></else></if></else></if>
}</block></function>
<function><type><name>void</name> *</type><name>sqlite3TestTextToPtr</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type><name>z</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>void</name> *</type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u64</name></type> <name>v</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u32</name></type> <name>v2</name></decl>;</decl_stmt>
  <if>if<condition>( <expr><name><name>z</name><index>[<expr>0</expr>]</index></name>=='0' &amp;&amp; <name><name>z</name><index>[<expr>1</expr>]</index></name>=='x'</expr> )</condition><then><block>{
    <expr_stmt><expr><name>z</name> += 2</expr>;</expr_stmt>
  }</block></then></if>
  <expr_stmt><expr><name>v</name> = 0</expr>;</expr_stmt>
  <while>while<condition>( <expr>*<name>z</name></expr> )</condition><block>{
    <expr_stmt><expr><name>v</name> = (<name>v</name>&lt;&lt;4) + <call><name>testHexToInt</name><argument_list>(<argument><expr>*<name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>z</name>++</expr>;</expr_stmt>
  }</block></while>
  <if>if<condition>( <expr><call><name>sizeof</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call>==<call><name>sizeof</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>&amp;<name>p</name></expr></argument>, <argument><expr>&amp;<name>v</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then><else>else<block>{
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call>==<call><name>sizeof</name><argument_list>(<argument><expr><name>v2</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>v2</name> = (<name>u32</name>)<name>v</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>&amp;<name>p</name></expr></argument>, <argument><expr>&amp;<name>v2</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>
  <return>return <expr><name>p</name></expr>;</return>
}</block></function>


<comment type="block">/*
** A TCL command that returns the address of the sqlite* pointer
** for an sqlite connection instance.  Bad things happen if the
** input is not an sqlite connection.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>get_sqlite_pointer</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type>struct <name>SqliteDb</name> *</type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Tcl_CmdInfo</name></type> <name>cmdInfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr>100</expr>]</index></name></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>objc</name>!=2</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr>"SQLITE-CONNECTION"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr>!<call><name>Tcl_GetCommandInfo</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>cmdInfo</name></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"command not found: "</expr></argument>,
           <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>(<name>char</name>*)0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><name>p</name> = (struct <name>SqliteDb</name>*)<name>cmdInfo</name>.<name>objClientData</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>, <argument><expr>"%p"</expr></argument>, <argument><expr><name>p</name>-&gt;<name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><call><name>strncmp</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>,<argument><expr>"0x"</expr></argument>,<argument><expr>2</expr></argument>)</argument_list></call></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>, <argument><expr>"0x%p"</expr></argument>, <argument><expr><name>p</name>-&gt;<name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Decode a pointer to an sqlite3 object.
*/</comment>
<function><type><name>int</name></type> <name>getDbPointer</name><parameter_list>(<param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>zA</name></decl></param>, <param><decl><type><name>sqlite3</name> **</type><name>ppDb</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type>struct <name>SqliteDb</name> *</type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Tcl_CmdInfo</name></type> <name>cmdInfo</name></decl>;</decl_stmt>
  <if>if<condition>( <expr><call><name>Tcl_GetCommandInfo</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zA</name></expr></argument>, <argument><expr>&amp;<name>cmdInfo</name></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
    <expr_stmt><expr><name>p</name> = (struct <name>SqliteDb</name>*)<name>cmdInfo</name>.<name>objClientData</name></expr>;</expr_stmt>
    <expr_stmt><expr>*<name>ppDb</name> = <name>p</name>-&gt;<name>db</name></expr>;</expr_stmt>
  }</block></then><else>else<block>{
    <expr_stmt><expr>*<name>ppDb</name> = (<name>sqlite3</name>*)<call><name>sqlite3TestTextToPtr</name><argument_list>(<argument><expr><name>zA</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>


<function><type><name>const</name> <name>char</name> *</type><name>sqlite3TestErrorName</name><parameter_list>(<param><decl><type><name>int</name></type> <name>rc</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>zName</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
  <switch>switch<condition>( <expr><name>rc</name></expr> )</condition><block>{
    <case>case <expr><name>SQLITE_OK</name></expr>:                  <expr_stmt><expr><name>zName</name> = "SQLITE_OK"</expr>;</expr_stmt>                <break>break;</break>
    </case><case>case <expr><name>SQLITE_ERROR</name></expr>:               <expr_stmt><expr><name>zName</name> = "SQLITE_ERROR"</expr>;</expr_stmt>             <break>break;</break>
    </case><case>case <expr><name>SQLITE_INTERNAL</name></expr>:            <expr_stmt><expr><name>zName</name> = "SQLITE_INTERNAL"</expr>;</expr_stmt>          <break>break;</break>
    </case><case>case <expr><name>SQLITE_PERM</name></expr>:                <expr_stmt><expr><name>zName</name> = "SQLITE_PERM"</expr>;</expr_stmt>              <break>break;</break>
    </case><case>case <expr><name>SQLITE_ABORT</name></expr>:               <expr_stmt><expr><name>zName</name> = "SQLITE_ABORT"</expr>;</expr_stmt>             <break>break;</break>
    </case><case>case <expr><name>SQLITE_BUSY</name></expr>:                <expr_stmt><expr><name>zName</name> = "SQLITE_BUSY"</expr>;</expr_stmt>              <break>break;</break>
    </case><case>case <expr><name>SQLITE_LOCKED</name></expr>:              <expr_stmt><expr><name>zName</name> = "SQLITE_LOCKED"</expr>;</expr_stmt>            <break>break;</break>
    </case><case>case <expr><name>SQLITE_NOMEM</name></expr>:               <expr_stmt><expr><name>zName</name> = "SQLITE_NOMEM"</expr>;</expr_stmt>             <break>break;</break>
    </case><case>case <expr><name>SQLITE_READONLY</name></expr>:            <expr_stmt><expr><name>zName</name> = "SQLITE_READONLY"</expr>;</expr_stmt>          <break>break;</break>
    </case><case>case <expr><name>SQLITE_INTERRUPT</name></expr>:           <expr_stmt><expr><name>zName</name> = "SQLITE_INTERRUPT"</expr>;</expr_stmt>         <break>break;</break>
    </case><case>case <expr><name>SQLITE_IOERR</name></expr>:               <expr_stmt><expr><name>zName</name> = "SQLITE_IOERR"</expr>;</expr_stmt>             <break>break;</break>
    </case><case>case <expr><name>SQLITE_CORRUPT</name></expr>:             <expr_stmt><expr><name>zName</name> = "SQLITE_CORRUPT"</expr>;</expr_stmt>           <break>break;</break>
    </case><case>case <expr><name>SQLITE_NOTFOUND</name></expr>:            <expr_stmt><expr><name>zName</name> = "SQLITE_NOTFOUND"</expr>;</expr_stmt>          <break>break;</break>
    </case><case>case <expr><name>SQLITE_FULL</name></expr>:                <expr_stmt><expr><name>zName</name> = "SQLITE_FULL"</expr>;</expr_stmt>              <break>break;</break>
    </case><case>case <expr><name>SQLITE_CANTOPEN</name></expr>:            <expr_stmt><expr><name>zName</name> = "SQLITE_CANTOPEN"</expr>;</expr_stmt>          <break>break;</break>
    </case><case>case <expr><name>SQLITE_PROTOCOL</name></expr>:            <expr_stmt><expr><name>zName</name> = "SQLITE_PROTOCOL"</expr>;</expr_stmt>          <break>break;</break>
    </case><case>case <expr><name>SQLITE_EMPTY</name></expr>:               <expr_stmt><expr><name>zName</name> = "SQLITE_EMPTY"</expr>;</expr_stmt>             <break>break;</break>
    </case><case>case <expr><name>SQLITE_SCHEMA</name></expr>:              <expr_stmt><expr><name>zName</name> = "SQLITE_SCHEMA"</expr>;</expr_stmt>            <break>break;</break>
    </case><case>case <expr><name>SQLITE_TOOBIG</name></expr>:              <expr_stmt><expr><name>zName</name> = "SQLITE_TOOBIG"</expr>;</expr_stmt>            <break>break;</break>
    </case><case>case <expr><name>SQLITE_CONSTRAINT</name></expr>:          <expr_stmt><expr><name>zName</name> = "SQLITE_CONSTRAINT"</expr>;</expr_stmt>        <break>break;</break>
    </case><case>case <expr><name>SQLITE_MISMATCH</name></expr>:            <expr_stmt><expr><name>zName</name> = "SQLITE_MISMATCH"</expr>;</expr_stmt>          <break>break;</break>
    </case><case>case <expr><name>SQLITE_MISUSE</name></expr>:              <expr_stmt><expr><name>zName</name> = "SQLITE_MISUSE"</expr>;</expr_stmt>            <break>break;</break>
    </case><case>case <expr><name>SQLITE_NOLFS</name></expr>:               <expr_stmt><expr><name>zName</name> = "SQLITE_NOLFS"</expr>;</expr_stmt>             <break>break;</break>
    </case><case>case <expr><name>SQLITE_AUTH</name></expr>:                <expr_stmt><expr><name>zName</name> = "SQLITE_AUTH"</expr>;</expr_stmt>              <break>break;</break>
    </case><case>case <expr><name>SQLITE_FORMAT</name></expr>:              <expr_stmt><expr><name>zName</name> = "SQLITE_FORMAT"</expr>;</expr_stmt>            <break>break;</break>
    </case><case>case <expr><name>SQLITE_RANGE</name></expr>:               <expr_stmt><expr><name>zName</name> = "SQLITE_RANGE"</expr>;</expr_stmt>             <break>break;</break>
    </case><case>case <expr><name>SQLITE_NOTADB</name></expr>:              <expr_stmt><expr><name>zName</name> = "SQLITE_NOTADB"</expr>;</expr_stmt>            <break>break;</break>
    </case><case>case <expr><name>SQLITE_ROW</name></expr>:                 <expr_stmt><expr><name>zName</name> = "SQLITE_ROW"</expr>;</expr_stmt>               <break>break;</break>
    </case><case>case <expr><name>SQLITE_DONE</name></expr>:                <expr_stmt><expr><name>zName</name> = "SQLITE_DONE"</expr>;</expr_stmt>              <break>break;</break>
    </case><case>case <expr><name>SQLITE_IOERR_READ</name></expr>:          <expr_stmt><expr><name>zName</name> = "SQLITE_IOERR_READ"</expr>;</expr_stmt>        <break>break;</break>
    </case><case>case <expr><name>SQLITE_IOERR_SHORT_READ</name></expr>:    <expr_stmt><expr><name>zName</name> = "SQLITE_IOERR_SHORT_READ"</expr>;</expr_stmt>  <break>break;</break>
    </case><case>case <expr><name>SQLITE_IOERR_WRITE</name></expr>:         <expr_stmt><expr><name>zName</name> = "SQLITE_IOERR_WRITE"</expr>;</expr_stmt>       <break>break;</break>
    </case><case>case <expr><name>SQLITE_IOERR_FSYNC</name></expr>:         <expr_stmt><expr><name>zName</name> = "SQLITE_IOERR_FSYNC"</expr>;</expr_stmt>       <break>break;</break>
    </case><case>case <expr><name>SQLITE_IOERR_DIR_FSYNC</name></expr>:     <expr_stmt><expr><name>zName</name> = "SQLITE_IOERR_DIR_FSYNC"</expr>;</expr_stmt>   <break>break;</break>
    </case><case>case <expr><name>SQLITE_IOERR_TRUNCATE</name></expr>:      <expr_stmt><expr><name>zName</name> = "SQLITE_IOERR_TRUNCATE"</expr>;</expr_stmt>    <break>break;</break>
    </case><case>case <expr><name>SQLITE_IOERR_FSTAT</name></expr>:         <expr_stmt><expr><name>zName</name> = "SQLITE_IOERR_FSTAT"</expr>;</expr_stmt>       <break>break;</break>
    </case><case>case <expr><name>SQLITE_IOERR_UNLOCK</name></expr>:        <expr_stmt><expr><name>zName</name> = "SQLITE_IOERR_UNLOCK"</expr>;</expr_stmt>      <break>break;</break>
    </case><case>case <expr><name>SQLITE_IOERR_RDLOCK</name></expr>:        <expr_stmt><expr><name>zName</name> = "SQLITE_IOERR_RDLOCK"</expr>;</expr_stmt>      <break>break;</break>
    </case><case>case <expr><name>SQLITE_IOERR_DELETE</name></expr>:        <expr_stmt><expr><name>zName</name> = "SQLITE_IOERR_DELETE"</expr>;</expr_stmt>      <break>break;</break>
    </case><case>case <expr><name>SQLITE_IOERR_BLOCKED</name></expr>:       <expr_stmt><expr><name>zName</name> = "SQLITE_IOERR_BLOCKED"</expr>;</expr_stmt>     <break>break;</break>
    </case><case>case <expr><name>SQLITE_IOERR_NOMEM</name></expr>:         <expr_stmt><expr><name>zName</name> = "SQLITE_IOERR_NOMEM"</expr>;</expr_stmt>       <break>break;</break>
    </case><case>case <expr><name>SQLITE_IOERR_ACCESS</name></expr>:        <expr_stmt><expr><name>zName</name> = "SQLITE_IOERR_ACCESS"</expr>;</expr_stmt>      <break>break;</break>
    </case><case>case <expr><name>SQLITE_IOERR_CHECKRESERVEDLOCK</name></expr>:
                               <expr_stmt><expr><name>zName</name> = "SQLITE_IOERR_CHECKRESERVEDLOCK"</expr>;</expr_stmt> <break>break;</break>
    </case><case>case <expr><name>SQLITE_IOERR_LOCK</name></expr>:          <expr_stmt><expr><name>zName</name> = "SQLITE_IOERR_LOCK"</expr>;</expr_stmt>        <break>break;</break>
    </case><default>default:                         <expr_stmt><expr><name>zName</name> = "SQLITE_Unknown"</expr>;</expr_stmt>           <break>break;</break>
  </default>}</block></switch>
  <return>return <expr><name>zName</name></expr>;</return>
}</block></function>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>t1ErrorName</name> <name>sqlite3TestErrorName</name></cpp:define>

<comment type="block">/*
** Convert an sqlite3_stmt* into an sqlite3*.  This depends on the
** fact that the sqlite3* is the first field in the Vdbe structure.
*/</comment>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>StmtToDb</name>(X)   sqlite3_db_handle(X)</cpp:define>

<comment type="block">/*
** Check a return value to make sure it agrees with the results
** from sqlite3_errcode.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3TestErrCode</name><parameter_list>(<param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>, <param><decl><type><name>sqlite3</name> *</type><name>db</name></decl></param>, <param><decl><type><name>int</name></type> <name>rc</name></decl></param>)</parameter_list><block>{
  <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_MISUSE</name> &amp;&amp; <name>rc</name>!=<name>SQLITE_OK</name> &amp;&amp; <call><name>sqlite3_errcode</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call>!=<name>rc</name></expr> )</condition><then><block>{
    <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr>200</expr>]</index></name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>r2</name> =<init> <expr><call><name>sqlite3_errcode</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>, <argument><expr>"error code %s (%d) does not match sqlite3_errcode %s (%d)"</expr></argument>,
       <argument><expr><call><name>t1ErrorName</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>, <argument><expr><call><name>t1ErrorName</name><argument_list>(<argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>r2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Tcl_ResetResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>1</expr>;</return>
  }</block></then></if>
  <return>return <expr>0</expr>;</return>
}</block></function>

<comment type="block">/*
** Decode a pointer to an sqlite3_stmt object.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>getStmtPointer</name><parameter_list>(
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>, 
  <param><decl><type><name>const</name> <name>char</name> *</type><name>zArg</name></decl></param>,  
  <param><decl><type><name>sqlite3_stmt</name> **</type><name>ppStmt</name></decl></param>
)</parameter_list><block>{
  <expr_stmt><expr>*<name>ppStmt</name> = (<name>sqlite3_stmt</name>*)<call><name>sqlite3TestTextToPtr</name><argument_list>(<argument><expr><name>zArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Generate a text representation of a pointer that can be understood
** by the getDbPointer and getVmPointer routines above.
**
** The problem is, on some machines (Solaris) if you do a printf with
** "%p" you cannot turn around and do a scanf with the same "%p" and
** get your pointer back.  You have to prepend a "0x" before it will
** work.  Or at least that is what is reported to me (drh).  But this
** behavior varies from machine to machine.  The solution used her is
** to test the string right after it is generated to see if it can be
** understood by scanf, and if not, try prepending an "0x" to see if
** that helps.  If nothing works, a fatal error is generated.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3TestMakePointerStr</name><parameter_list>(<param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>, <param><decl><type><name>char</name> *</type><name>zPtr</name></decl></param>, <param><decl><type><name>void</name> *</type><name>p</name></decl></param>)</parameter_list><block>{
  <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr>100</expr></argument>, <argument><expr><name>zPtr</name></expr></argument>, <argument><expr>"%p"</expr></argument>, <argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** The callback routine for sqlite3_exec_printf().
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>exec_printf_cb</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>pArg</name></decl></param>, <param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>, <param><decl><type><name>char</name> **</type><name>name</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>Tcl_DString</name> *</type><name>str</name> =<init> <expr>(<name>Tcl_DString</name>*)<name>pArg</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><call><name>Tcl_DStringLength</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
    <for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<name>argc</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
      <expr_stmt><expr><call><name>Tcl_DStringAppendElement</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>name</name><index>[<expr><name>i</name></expr>]</index></name> ? <name><name>name</name><index>[<expr><name>i</name></expr>]</index></name> : "NULL"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
  }</block></then></if>
  <for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<name>argc</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
    <expr_stmt><expr><call><name>Tcl_DStringAppendElement</name><argument_list>(<argument><expr><name>str</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> ? <name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name> : "NULL"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <return>return <expr>0</expr>;</return>
}</block></function>

<comment type="block">/*
** The I/O tracing callback.
*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_OMIT_TRACE</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_ENABLE_IOTRACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<decl_stmt><decl><type><name>static</name> <name>FILE</name> *</type><name>iotrace_file</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
<function><type><name>static</name> <name>void</name></type> <name>io_trace_callback</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type><name>zFormat</name></decl></param>, <param>...</param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>va_list</name></type> <name>ap</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>va_start</name><argument_list>(<argument><expr><name>ap</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>vfprintf</name><argument_list>(<argument><expr><name>iotrace_file</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>, <argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>va_end</name><argument_list>(<argument><expr><name>ap</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>fflush</name><argument_list>(<argument><expr><name>iotrace_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** Usage:  io_trace FILENAME
**
** Turn I/O tracing on or off.  If FILENAME is not an empty string,
** I/O tracing begins going into FILENAME. If FILENAME is an empty
** string, I/O tracing is turned off.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_io_trace</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>NotUsed</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>            <comment type="block">/* Text of each argument */</comment>
)</parameter_list><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_OMIT_TRACE</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_ENABLE_IOTRACE</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <if>if<condition>( <expr><name>argc</name>!=2</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>,
          <argument><expr>" FILENAME\""</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><name>iotrace_file</name></expr> )</condition><then><block>{
    <if>if<condition>( <expr><name>iotrace_file</name>!=<name>stdout</name> &amp;&amp; <name>iotrace_file</name>!=<name>stderr</name></expr> )</condition><then><block>{
      <expr_stmt><expr><call><name>fclose</name><argument_list>(<argument><expr><name>iotrace_file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>iotrace_file</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>sqlite3IoTrace</name> = 0</expr>;</expr_stmt>
  }</block></then></if>
  <if>if<condition>( <expr><name><name>argv</name><index>[<expr>1</expr>]</index><index>[<expr>0</expr>]</index></name></expr> )</condition><then><block>{
    <if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr>"stdout"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
      <expr_stmt><expr><name>iotrace_file</name> = <name>stdout</name></expr>;</expr_stmt>
    }</block></then><else>else <if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>,<argument><expr>"stderr"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
      <expr_stmt><expr><name>iotrace_file</name> = <name>stderr</name></expr>;</expr_stmt>
    }</block></then><else>else<block>{
      <expr_stmt><expr><name>iotrace_file</name> = <call><name>fopen</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>"w"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if></else></if>
    <expr_stmt><expr><name>sqlite3IoTrace</name> = <name>io_trace_callback</name></expr>;</expr_stmt>
  }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>


<comment type="block">/*
** Usage:  sqlite3_exec_printf  DB  FORMAT  STRING
**
** Invoke the sqlite3_exec_printf() interface using the open database
** DB.  The SQL is the string FORMAT.  The format string should contain
** one %s or %q.  STRING is the value inserted into %s or %q.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_exec_printf</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>NotUsed</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>            <comment type="block">/* Text of each argument */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Tcl_DString</name></type> <name>str</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>zErr</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>zSql</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr>30</expr>]</index></name></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>argc</name>!=4</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>, 
       <argument><expr>" DB FORMAT STRING"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>getDbPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>db</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><call><name>Tcl_DStringInit</name><argument_list>(<argument><expr>&amp;<name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zSql</name> = <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>3</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><name>exec_printf_cb</name></expr></argument>, <argument><expr>&amp;<name>str</name></expr></argument>, <argument><expr>&amp;<name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>, <argument><expr>"%d"</expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_AppendElement</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_AppendElement</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>rc</name>==<name>SQLITE_OK</name> ? <call><name>Tcl_DStringValue</name><argument_list>(<argument><expr>&amp;<name>str</name></expr></argument>)</argument_list></call> : <name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_DStringFree</name><argument_list>(<argument><expr>&amp;<name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>zErr</name></expr> )</condition><then> <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <if>if<condition>( <expr><call><name>sqlite3TestErrCode</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage:  sqlite3_exec_hex  DB  HEX
**
** Invoke the sqlite3_exec() on a string that is obtained by translating
** HEX into ASCII.  Most characters are translated as is.  %HH becomes
** a hex character.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_exec_hex</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>NotUsed</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>            <comment type="block">/* Text of each argument */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Tcl_DString</name></type> <name>str</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name>, <name>i</name>, <name>j</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>zErr</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>zHex</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zSql</name><index>[<expr>500</expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr>30</expr>]</index></name></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>argc</name>!=3</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>, 
       <argument><expr>" DB HEX"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>getDbPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>db</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><name>zHex</name> = <name><name>argv</name><index>[<expr>2</expr>]</index></name></expr>;</expr_stmt>
  <for>for(<init><expr><name>i</name>=<name>j</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<call><name>sizeof</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call> &amp;&amp; <name><name>zHex</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name>++</expr>, <expr><name>j</name>++</expr></incr>)<block>{
    <if>if<condition>( <expr><name><name>zHex</name><index>[<expr><name>j</name></expr>]</index></name>=='%' &amp;&amp; <name><name>zHex</name><index>[<expr><name>j</name>+2</expr>]</index></name> &amp;&amp; <name><name>zHex</name><index>[<expr><name>j</name>+2</expr>]</index></name></expr> )</condition><then><block>{
      <expr_stmt><expr><name><name>zSql</name><index>[<expr><name>i</name></expr>]</index></name> = (<call><name>testHexToInt</name><argument_list>(<argument><expr><name><name>zHex</name><index>[<expr><name>j</name>+1</expr>]</index></name></expr></argument>)</argument_list></call>&lt;&lt;4) + <call><name>testHexToInt</name><argument_list>(<argument><expr><name><name>zHex</name><index>[<expr><name>j</name>+2</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>j</name> += 2</expr>;</expr_stmt>
    }</block></then><else>else<block>{
      <expr_stmt><expr><name><name>zSql</name><index>[<expr><name>i</name></expr>]</index></name> = <name><name>zHex</name><index>[<expr><name>j</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></else></if>
  }</block></for>
  <expr_stmt><expr><name><name>zSql</name><index>[<expr><name>i</name></expr>]</index></name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_DStringInit</name><argument_list>(<argument><expr>&amp;<name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><name>exec_printf_cb</name></expr></argument>, <argument><expr>&amp;<name>str</name></expr></argument>, <argument><expr>&amp;<name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>, <argument><expr>"%d"</expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_AppendElement</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_AppendElement</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>rc</name>==<name>SQLITE_OK</name> ? <call><name>Tcl_DStringValue</name><argument_list>(<argument><expr>&amp;<name>str</name></expr></argument>)</argument_list></call> : <name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_DStringFree</name><argument_list>(<argument><expr>&amp;<name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>zErr</name></expr> )</condition><then> <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <if>if<condition>( <expr><call><name>sqlite3TestErrCode</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage:  db_enter DB
**         db_leave DB
**
** Enter or leave the mutex on a database connection.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>db_enter</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>NotUsed</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>            <comment type="block">/* Text of each argument */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>argc</name>!=2</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>, 
       <argument><expr>" DB"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>getDbPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>db</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name>db</name>-&gt;<name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>
<function><type><name>static</name> <name>int</name></type> <name>db_leave</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>NotUsed</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>            <comment type="block">/* Text of each argument */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>argc</name>!=2</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>, 
       <argument><expr>" DB"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>getDbPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>db</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name>db</name>-&gt;<name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage:  sqlite3_exec  DB  SQL
**
** Invoke the sqlite3_exec interface using the open database DB
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_exec</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>NotUsed</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>            <comment type="block">/* Text of each argument */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Tcl_DString</name></type> <name>str</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>zErr</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>zSql</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name>, <name>j</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr>30</expr>]</index></name></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>argc</name>!=3</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>, 
       <argument><expr>" DB SQL"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>getDbPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>db</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><call><name>Tcl_DStringInit</name><argument_list>(<argument><expr>&amp;<name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zSql</name> = <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr>"%s"</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for(<init><expr><name>i</name>=<name>j</name>=0</expr>;</init> <condition><expr><name><name>zSql</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition><incr/>)<block>{
    <if>if<condition>( <expr><name><name>zSql</name><index>[<expr><name>i</name></expr>]</index></name>=='%'</expr> )</condition><then><block>{
      <expr_stmt><expr><name><name>zSql</name><index>[<expr><name>j</name>++</expr>]</index></name> = (<call><name>testHexToInt</name><argument_list>(<argument><expr><name><name>zSql</name><index>[<expr><name>i</name>+1</expr>]</index></name></expr></argument>)</argument_list></call>&lt;&lt;4) + <call><name>testHexToInt</name><argument_list>(<argument><expr><name><name>zSql</name><index>[<expr><name>i</name>+2</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>i</name> += 3</expr>;</expr_stmt>
    }</block></then><else>else<block>{
      <expr_stmt><expr><name><name>zSql</name><index>[<expr><name>j</name>++</expr>]</index></name> = <name><name>zSql</name><index>[<expr><name>i</name>++</expr>]</index></name></expr>;</expr_stmt>
    }</block></else></if>
  }</block></for>
  <expr_stmt><expr><name><name>zSql</name><index>[<expr><name>j</name></expr>]</index></name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><name>exec_printf_cb</name></expr></argument>, <argument><expr>&amp;<name>str</name></expr></argument>, <argument><expr>&amp;<name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>, <argument><expr>"%d"</expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_AppendElement</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_AppendElement</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>rc</name>==<name>SQLITE_OK</name> ? <call><name>Tcl_DStringValue</name><argument_list>(<argument><expr>&amp;<name>str</name></expr></argument>)</argument_list></call> : <name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_DStringFree</name><argument_list>(<argument><expr>&amp;<name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>zErr</name></expr> )</condition><then> <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <if>if<condition>( <expr><call><name>sqlite3TestErrCode</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage:  sqlite3_exec_nr  DB  SQL
**
** Invoke the sqlite3_exec interface using the open database DB.  Discard
** all results
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_exec_nr</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>NotUsed</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>            <comment type="block">/* Text of each argument */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>zErr</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>argc</name>!=3</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>, 
       <argument><expr>" DB SQL"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>getDbPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>db</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><call><name>sqlite3TestErrCode</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage:  sqlite3_mprintf_z_test  SEPARATOR  ARG0  ARG1 ...
**
** Test the %z format of sqliteMPrintf().  Use multiple mprintf() calls to 
** concatenate arg0 through argn using separator as the separator.
** Return the result.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_mprintf_z</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>NotUsed</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>            <comment type="block">/* Text of each argument */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>char</name> *</type><name>zResult</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <for>for(<init><expr><name>i</name>=2</expr>;</init> <condition><expr><name>i</name>&lt;<name>argc</name> &amp;&amp; (<name>i</name>==2 || <name>zResult</name>)</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
    <expr_stmt><expr><name>zResult</name> = <call><name>sqlite3MPrintf</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>"%z%s%s"</expr></argument>, <argument><expr><name>zResult</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zResult</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage:  sqlite3_mprintf_n_test  STRING
**
** Test the %n format of sqliteMPrintf().  Return the length of the
** input string.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_mprintf_n</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>NotUsed</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>            <comment type="block">/* Text of each argument */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>char</name> *</type><name>zStr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><name>zStr</name> = <call><name>sqlite3MPrintf</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr>"%s%n"</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_NewIntObj</name><argument_list>(<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage:  sqlite3_snprintf_int  SIZE FORMAT  INT
**
** Test the of sqlite3_snprintf() routine.  SIZE is the size of the
** output buffer in bytes.  The maximum size is 100.  FORMAT is the
** format string.  INT is a single integer argument.  The FORMAT
** string must require no more than this one integer argument.  If
** You pass in a format string that requires more than one argument,
** bad things will happen.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_snprintf_int</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>NotUsed</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>            <comment type="block">/* Text of each argument */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>char</name></type> <name><name>zStr</name><index>[<expr>100</expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> =<init> <expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>zFormat</name> =<init> <expr><name><name>argv</name><index>[<expr>2</expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>a1</name> =<init> <expr><call><name>atoi</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>3</expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>n</name>&gt;<call><name>sizeof</name><argument_list>(<argument><expr><name>zStr</name></expr></argument>)</argument_list></call></expr> )</condition><then> <expr_stmt><expr><name>n</name> = <call><name>sizeof</name><argument_list>(<argument><expr><name>zStr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>zStr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zStr</name></expr></argument>, <argument><expr>"abcdefghijklmnopqrstuvwxyz"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>zStr</name></expr></argument>, <argument><expr><name>zFormat</name></expr></argument>, <argument><expr><name>a1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zStr</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_GET_TABLE</name></cpp:ifndef>

<comment type="block">/*
** Usage:  sqlite3_get_table_printf  DB  FORMAT  STRING  ?--no-counts?
**
** Invoke the sqlite3_get_table_printf() interface using the open database
** DB.  The SQL is the string FORMAT.  The format string should contain
** one %s or %q.  STRING is the value inserted into %s or %q.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_get_table_printf</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>NotUsed</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>            <comment type="block">/* Text of each argument */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Tcl_DString</name></type> <name>str</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>zErr</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nRow</name>, <name>nCol</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> **</type><name>aResult</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr>30</expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>zSql</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>resCount</name> =<init> <expr>-1</expr></init></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>argc</name>==5</expr> )</condition><then><block>{
    <if>if<condition>( <expr><call><name>Tcl_GetInt</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>4</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>resCount</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  }</block></then></if>
  <if>if<condition>( <expr><name>argc</name>!=4 &amp;&amp; <name>argc</name>!=5</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>, 
       <argument><expr>" DB FORMAT STRING ?COUNT?"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>getDbPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>db</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><call><name>Tcl_DStringInit</name><argument_list>(<argument><expr>&amp;<name>str</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zSql</name> = <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>2</expr>]</index></name></expr></argument>,<argument><expr><name><name>argv</name><index>[<expr>3</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>argc</name>==5</expr> )</condition><then><block>{
    <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_get_table</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr>&amp;<name>aResult</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then><else>else<block>{
    <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_get_table</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr>&amp;<name>aResult</name></expr></argument>, <argument><expr>&amp;<name>nRow</name></expr></argument>, <argument><expr>&amp;<name>nCol</name></expr></argument>, <argument><expr>&amp;<name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>resCount</name> = (<name>nRow</name>+1)*<name>nCol</name></expr>;</expr_stmt>
  }</block></else></if>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zSql</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>, <argument><expr>"%d"</expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_AppendElement</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>rc</name>==<name>SQLITE_OK</name></expr> )</condition><then><block>{
    <if>if<condition>( <expr><name>argc</name>==4</expr> )</condition><then><block>{
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>, <argument><expr>"%d"</expr></argument>, <argument><expr><name>nRow</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>Tcl_AppendElement</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>, <argument><expr>"%d"</expr></argument>, <argument><expr><name>nCol</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>Tcl_AppendElement</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<name>resCount</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
      <expr_stmt><expr><call><name>Tcl_AppendElement</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>aResult</name><index>[<expr><name>i</name></expr>]</index></name> ? <name><name>aResult</name><index>[<expr><name>i</name></expr>]</index></name> : "NULL"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
  }</block></then><else>else<block>{
    <expr_stmt><expr><call><name>Tcl_AppendElement</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>
  <expr_stmt><expr><call><name>sqlite3_free_table</name><argument_list>(<argument><expr><name>aResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>zErr</name></expr> )</condition><then> <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <if>if<condition>( <expr><call><name>sqlite3TestErrCode</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_GET_TABLE */</comment>


<comment type="block">/*
** Usage:  sqlite3_last_insert_rowid DB
**
** Returns the integer ROWID of the most recent insert.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_last_rowid</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>NotUsed</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>            <comment type="block">/* Text of each argument */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr>30</expr>]</index></name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>argc</name>!=2</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>" DB\""</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>getDbPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>db</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>, <argument><expr>"%lld"</expr></argument>, <argument><expr><call><name>sqlite3_last_insert_rowid</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage:  sqlite3_key DB KEY
**
** Set the codec key.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_key</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>NotUsed</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>            <comment type="block">/* Text of each argument */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>zKey</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nKey</name></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>argc</name>!=3</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>,
       <argument><expr>" FILENAME\""</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>getDbPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>db</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><name>zKey</name> = <name><name>argv</name><index>[<expr>2</expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>nKey</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>zKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_HAS_CODEC</name></cpp:ifdef>
  <expr_stmt><expr><call><name>sqlite3_key</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zKey</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage:  sqlite3_rekey DB KEY
**
** Change the codec key.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_rekey</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>NotUsed</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>            <comment type="block">/* Text of each argument */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>zKey</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nKey</name></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>argc</name>!=3</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>,
       <argument><expr>" FILENAME\""</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>getDbPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>db</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><name>zKey</name> = <name><name>argv</name><index>[<expr>2</expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>nKey</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>zKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_HAS_CODEC</name></cpp:ifdef>
  <expr_stmt><expr><call><name>sqlite3_rekey</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zKey</name></expr></argument>, <argument><expr><name>nKey</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage:  sqlite3_close DB
**
** Closes the database opened by sqlite3_open.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>sqlite_test_close</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>NotUsed</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>            <comment type="block">/* Text of each argument */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>argc</name>!=2</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>,
       <argument><expr>" FILENAME\""</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>getDbPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>db</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_SetResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>(<name>char</name> *)<call><name>t1ErrorName</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TCL_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Implementation of the x_coalesce() function.
** Return the first argument non-NULL argument.
*/</comment>
<function><type><name>static</name> <name>void</name></type> <name>t1_ifnullFunc</name><parameter_list>(
  <param><decl><type><name>sqlite3_context</name> *</type><name>context</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,
  <param><decl><type><name>sqlite3_value</name> **</type><name>argv</name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<name>argc</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
    <if>if<condition>( <expr><name>SQLITE_NULL</name>!=<call><name>sqlite3_value_type</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
      <decl_stmt><decl><type><name>int</name></type> <name>n</name> =<init> <expr><call><name>sqlite3_value_bytes</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlite3_result_text</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr>(<name>char</name>*)<call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
          <argument><expr><name>n</name></expr></argument>, <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    }</block></then></if>
  }</block></for>
}</block></function>

<comment type="block">/*
** These are test functions.    hex8() interprets its argument as
** UTF8 and returns a hex encoding.  hex16le() interprets its argument
** as UTF16le and returns a hex encoding.
*/</comment>
<function><type><name>static</name> <name>void</name></type> <name>hex8Func</name><parameter_list>(<param><decl><type><name>sqlite3_context</name> *</type><name>p</name></decl></param>, <param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><name>sqlite3_value</name> **</type><name>argv</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>const</name> <name>unsigned</name> <name>char</name> *</type><name>z</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr>200</expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><name>z</name> = <call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<call><name>sizeof</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></call>/2 - 2 &amp;&amp; <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr>&amp;<name><name>zBuf</name><index>[<expr><name>i</name>*2</expr>]</index></name></expr></argument>, <argument><expr>"%02x"</expr></argument>, <argument><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name>&amp;0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <expr_stmt><expr><name><name>zBuf</name><index>[<expr><name>i</name>*2</expr>]</index></name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_result_text</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>(<name>char</name>*)<name>zBuf</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_UTF16</name></cpp:ifndef>
<function><type><name>static</name> <name>void</name></type> <name>hex16Func</name><parameter_list>(<param><decl><type><name>sqlite3_context</name> *</type><name>p</name></decl></param>, <param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><name>sqlite3_value</name> **</type><name>argv</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>const</name> <name>unsigned</name> <name>short</name> <name>int</name> *</type><name>z</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr>400</expr>]</index></name></decl>;</decl_stmt>
  <expr_stmt><expr><name>z</name> = <call><name>sqlite3_value_text16</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<call><name>sizeof</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></call>/4 - 4 &amp;&amp; <name><name>z</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr>&amp;<name><name>zBuf</name><index>[<expr><name>i</name>*4</expr>]</index></name></expr></argument>, <argument><expr>"%04x"</expr></argument>, <argument><expr><name><name>z</name><index>[<expr><name>i</name></expr>]</index></name>&amp;0xff</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <expr_stmt><expr><name><name>zBuf</name><index>[<expr><name>i</name>*4</expr>]</index></name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_result_text</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>(<name>char</name>*)<name>zBuf</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** A structure into which to accumulate text.
*/</comment>
<struct>struct <name>dstr</name> <block>{<public type="default">
  <decl_stmt><decl><type><name>int</name></type> <name>nAlloc</name></decl>;</decl_stmt>  <comment type="block">/* Space allocated */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>nUsed</name></decl>;</decl_stmt>   <comment type="block">/* Space used */</comment>
  <decl_stmt><decl><type><name>char</name> *</type><name>z</name></decl>;</decl_stmt>     <comment type="block">/* The space */</comment>
</public>}</block>;</struct>

<comment type="block">/*
** Append text to a dstr
*/</comment>
<function><type><name>static</name> <name>void</name></type> <name>dstrAppend</name><parameter_list>(<param><decl><type>struct <name>dstr</name> *</type><name>p</name></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>z</name></decl></param>, <param><decl><type><name>int</name></type> <name>divider</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>n</name> =<init> <expr><call><name>strlen</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>p</name>-&gt;<name>nUsed</name> + <name>n</name> + 2 &gt; <name>p</name>-&gt;<name>nAlloc</name></expr> )</condition><then><block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>zNew</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>p</name>-&gt;<name>nAlloc</name> = <name>p</name>-&gt;<name>nAlloc</name>*2 + <name>n</name> + 200</expr>;</expr_stmt>
    <expr_stmt><expr><name>zNew</name> = <call><name>sqlite3_realloc</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>z</name></expr></argument>, <argument><expr><name>p</name>-&gt;<name>nAlloc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>( <expr><name>zNew</name>==0</expr> )</condition><then><block>{
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return;</return>
    }</block></then></if>
    <expr_stmt><expr><name>p</name>-&gt;<name>z</name> = <name>zNew</name></expr>;</expr_stmt>
  }</block></then></if>
  <if>if<condition>( <expr><name>divider</name> &amp;&amp; <name>p</name>-&gt;<name>nUsed</name>&gt;0</expr> )</condition><then><block>{
    <expr_stmt><expr><name>p</name>-&gt;<name><name>z</name><index>[<expr><name>p</name>-&gt;<name>nUsed</name>++</expr>]</index></name> = <name>divider</name></expr>;</expr_stmt>
  }</block></then></if>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>&amp;<name>p</name>-&gt;<name><name>z</name><index>[<expr><name>p</name>-&gt;<name>nUsed</name></expr>]</index></name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name>n</name>+1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name>-&gt;<name>nUsed</name> += <name>n</name></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
** Invoked for each callback from sqlite3ExecFunc
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>execFuncCallback</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>pData</name></decl></param>, <param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>, <param><decl><type><name>char</name> **</type><name>NotUsed</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type>struct <name>dstr</name> *</type><name>p</name> =<init> <expr>(struct <name>dstr</name>*)<name>pData</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<name>argc</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
    <if>if<condition>( <expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name>==0</expr> )</condition><then><block>{
      <expr_stmt><expr><call><name>dstrAppend</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>"NULL"</expr></argument>, <argument><expr>' '</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then><else>else<block>{
      <expr_stmt><expr><call><name>dstrAppend</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>' '</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></for>
  <return>return <expr>0</expr>;</return>
}</block></function>

<comment type="block">/*
** Implementation of the x_sqlite_exec() function.  This function takes
** a single argument and attempts to execute that argument as SQL code.
** This is illegal and should set the SQLITE_MISUSE flag on the database.
**
** 2004-Jan-07:  We have changed this to make it legal to call sqlite3_exec()
** from within a function call.  
** 
** This routine simulates the effect of having two threads attempt to
** use the same database at the same time.
*/</comment>
<function><type><name>static</name> <name>void</name></type> <name>sqlite3ExecFunc</name><parameter_list>(
  <param><decl><type><name>sqlite3_context</name> *</type><name>context</name></decl></param>, 
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,  
  <param><decl><type><name>sqlite3_value</name> **</type><name>argv</name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type>struct <name>dstr</name></type> <name>x</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>x</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>(<name>void</name>)<call><name>sqlite3_exec</name><argument_list>(<argument><expr>(<name>sqlite3</name>*)<call><name>sqlite3_user_data</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>,
      <argument><expr>(<name>char</name>*)<call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>,
      <argument><expr><name>execFuncCallback</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_result_text</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>x</name>.<name>z</name></expr></argument>, <argument><expr><name>x</name>.<name>nUsed</name></expr></argument>, <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>x</name>.<name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
** Implementation of tkt2213func(), a scalar function that takes exactly
** one argument. It has two interesting features:
**
** * It calls sqlite3_value_text() 3 times on the argument sqlite3_value*.
**   If the three pointers returned are not the same an SQL error is raised.
**
** * Otherwise it returns a copy of the text representation of its 
**   argument in such a way as the VDBE representation is a Mem* cell 
**   with the MEM_Term flag clear. 
**
** Ticket #2213 can therefore be tested by evaluating the following
** SQL expression:
**
**   tkt2213func(tkt2213func('a string'));
*/</comment>
<function><type><name>static</name> <name>void</name></type> <name>tkt2213Function</name><parameter_list>(
  <param><decl><type><name>sqlite3_context</name> *</type><name>context</name></decl></param>, 
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,  
  <param><decl><type><name>sqlite3_value</name> **</type><name>argv</name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>nText</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <name>const</name> *</type><name>zText1</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <name>const</name> *</type><name>zText2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> <name>const</name> *</type><name>zText3</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>nText</name> = <call><name>sqlite3_value_bytes</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zText1</name> = <call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zText2</name> = <call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zText3</name> = <call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if<condition>( <expr><name>zText1</name>!=<name>zText2</name> || <name>zText2</name>!=<name>zText3</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr>"tkt2213 is not fixed"</expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then><else>else<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>zCopy</name> =<init> <expr>(<name>char</name> *)<call><name>sqlite3_malloc</name><argument_list>(<argument><expr><name>nText</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>zCopy</name></expr></argument>, <argument><expr><name>zText1</name></expr></argument>, <argument><expr><name>nText</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_result_text</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>zCopy</name></expr></argument>, <argument><expr><name>nText</name></expr></argument>, <argument><expr><name>sqlite3_free</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>
}</block></function>

<comment type="block">/*
** The following SQL function takes 4 arguments.  The 2nd and
** 4th argument must be one of these strings:  'text', 'text16',
** or 'blob' corresponding to API functions
**
**      sqlite3_value_text()
**      sqlite3_value_text16()
**      sqlite3_value_blob()
**
** The third argument is a string, either 'bytes' or 'bytes16' or 'noop',
** corresponding to APIs:
**
**      sqlite3_value_bytes()
**      sqlite3_value_bytes16()
**      noop
**
** The APIs designated by the 2nd through 4th arguments are applied
** to the first argument in order.  If the pointers returned by the
** second and fourth are different, this routine returns 1.  Otherwise,
** this routine returns 0.
**
** This function is used to test to see when returned pointers from
** the _text(), _text16() and _blob() APIs become invalidated.
*/</comment>
<function><type><name>static</name> <name>void</name></type> <name>ptrChngFunction</name><parameter_list>(
  <param><decl><type><name>sqlite3_context</name> *</type><name>context</name></decl></param>, 
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,  
  <param><decl><type><name>sqlite3_value</name> **</type><name>argv</name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>const</name> <name>void</name> *</type><name>p1</name>, *<name>p2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>zCmd</name></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>argc</name>!=4</expr> )</condition><then> <return>return;</return></then></if>
  <expr_stmt><expr><name>zCmd</name> = (<name>const</name> <name>char</name>*)<call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>zCmd</name>==0</expr> )</condition><then> <return>return;</return></then></if>
  <if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zCmd</name></expr></argument>,<argument><expr>"text"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
    <expr_stmt><expr><name>p1</name> = (<name>const</name> <name>void</name>*)<call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_UTF16</name></cpp:ifndef>
  }</block></then><else>else <if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zCmd</name></expr></argument>, <argument><expr>"text16"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
    <expr_stmt><expr><name>p1</name> = (<name>const</name> <name>void</name>*)<call><name>sqlite3_value_text16</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  }</block></then><else>else <if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zCmd</name></expr></argument>, <argument><expr>"blob"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
    <expr_stmt><expr><name>p1</name> = (<name>const</name> <name>void</name>*)<call><name>sqlite3_value_blob</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then><else>else<block>{
    <return>return;</return>
  }</block></else></if></else></if></else></if>
  <expr_stmt><expr><name>zCmd</name> = (<name>const</name> <name>char</name>*)<call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>zCmd</name>==0</expr> )</condition><then> <return>return;</return></then></if>
  <if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zCmd</name></expr></argument>,<argument><expr>"bytes"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>sqlite3_value_bytes</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_UTF16</name></cpp:ifndef>
  }</block></then><else>else <if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zCmd</name></expr></argument>, <argument><expr>"bytes16"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>sqlite3_value_bytes16</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  }</block></then><else>else <if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zCmd</name></expr></argument>, <argument><expr>"noop"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
    <comment type="block">/* do nothing */</comment>
  }</block></then><else>else<block>{
    <return>return;</return>
  }</block></else></if></else></if></else></if>
  <expr_stmt><expr><name>zCmd</name> = (<name>const</name> <name>char</name>*)<call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>3</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>zCmd</name>==0</expr> )</condition><then> <return>return;</return></then></if>
  <if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zCmd</name></expr></argument>,<argument><expr>"text"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
    <expr_stmt><expr><name>p2</name> = (<name>const</name> <name>void</name>*)<call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_UTF16</name></cpp:ifndef>
  }</block></then><else>else <if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zCmd</name></expr></argument>, <argument><expr>"text16"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
    <expr_stmt><expr><name>p2</name> = (<name>const</name> <name>void</name>*)<call><name>sqlite3_value_text16</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  }</block></then><else>else <if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zCmd</name></expr></argument>, <argument><expr>"blob"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
    <expr_stmt><expr><name>p2</name> = (<name>const</name> <name>void</name>*)<call><name>sqlite3_value_blob</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then><else>else<block>{
    <return>return;</return>
  }</block></else></if></else></if></else></if>
  <expr_stmt><expr><call><name>sqlite3_result_int</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>p1</name>!=<name>p2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>


<comment type="block">/*
** Usage:  sqlite_test_create_function DB
**
** Call the sqlite3_create_function API on the given database in order
** to create a function named "x_coalesce".  This function does the same thing
** as the "coalesce" function.  This function also registers an SQL function
** named "x_sqlite_exec" that invokes sqlite3_exec().  Invoking sqlite3_exec()
** in this way is illegal recursion and should raise an SQLITE_MISUSE error.
** The effect is similar to trying to use the same database connection from
** two threads at the same time.
**
** The original motivation for this routine was to be able to call the
** sqlite3_create_function function while a query is in progress in order
** to test the SQLITE_MISUSE detection logic.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_create_function</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>NotUsed</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>            <comment type="block">/* Text of each argument */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>argc</name>!=2</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>,
       <argument><expr>" DB\""</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>getDbPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>db</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_create_function</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr>"x_coalesce"</expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name>SQLITE_ANY</name></expr></argument>, <argument><expr>0</expr></argument>, 
        <argument><expr><name>t1_ifnullFunc</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>rc</name>==<name>SQLITE_OK</name></expr> )</condition><then><block>{
    <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_create_function</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr>"hex8"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>SQLITE_ANY</name></expr></argument>, <argument><expr>0</expr></argument>, 
          <argument><expr><name>hex8Func</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_UTF16</name></cpp:ifndef>
  <if>if<condition>( <expr><name>rc</name>==<name>SQLITE_OK</name></expr> )</condition><then><block>{
    <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_create_function</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr>"hex16"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>SQLITE_ANY</name></expr></argument>, <argument><expr>0</expr></argument>, 
          <argument><expr><name>hex16Func</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <if>if<condition>( <expr><name>rc</name>==<name>SQLITE_OK</name></expr> )</condition><then><block>{
    <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_create_function</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr>"tkt2213func"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>SQLITE_ANY</name></expr></argument>, <argument><expr>0</expr></argument>, 
          <argument><expr><name>tkt2213Function</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <if>if<condition>( <expr><name>rc</name>==<name>SQLITE_OK</name></expr> )</condition><then><block>{
    <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_create_function</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr>"pointer_change"</expr></argument>, <argument><expr>4</expr></argument>, <argument><expr><name>SQLITE_ANY</name></expr></argument>, <argument><expr>0</expr></argument>, 
          <argument><expr><name>ptrChngFunction</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_UTF16</name></cpp:ifndef>
  <comment type="block">/* Use the sqlite3_create_function16() API here. Mainly for fun, but also 
  ** because it is not tested anywhere else. */</comment>
  <if>if<condition>( <expr><name>rc</name>==<name>SQLITE_OK</name></expr> )</condition><then><block>{
    <decl_stmt><decl><type><name>const</name> <name>void</name> *</type><name>zUtf16</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>sqlite3_value</name> *</type><name>pVal</name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name>db</name>-&gt;<name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pVal</name> = <call><name>sqlite3ValueNew</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3ValueSetStr</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr>"x_sqlite_exec"</expr></argument>, <argument><expr><name>SQLITE_UTF8</name></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zUtf16</name> = <call><name>sqlite3ValueText</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>SQLITE_UTF16NATIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>( <expr><name>db</name>-&gt;<name>mallocFailed</name></expr> )</condition><then><block>{
      <expr_stmt><expr><name>rc</name> = <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
    }</block></then><else>else<block>{
      <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_create_function16</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zUtf16</name></expr></argument>, 
                <argument><expr>1</expr></argument>, <argument><expr><name>SQLITE_UTF16</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>sqlite3ExecFunc</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><call><name>sqlite3ValueFree</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name>db</name>-&gt;<name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <if>if<condition>( <expr><call><name>sqlite3TestErrCode</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><call><name>Tcl_SetResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>(<name>char</name> *)<call><name>t1ErrorName</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Routines to implement the x_count() aggregate function.
**
** x_count() counts the number of non-null arguments.  But there are
** some twists for testing purposes.
**
** If the argument to x_count() is 40 then a UTF-8 error is reported
** on the step function.  If x_count(41) is seen, then a UTF-16 error
** is reported on the step function.  If the total count is 42, then
** a UTF-8 error is reported on the finalize function.
*/</comment>
<typedef>typedef <type><struct>struct <name>t1CountCtx</name> t1CountCtx;</struct></type></typedef>
<struct>struct <name>t1CountCtx</name> <block>{<public type="default">
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
</public>}</block>;</struct>
<function><type><name>static</name> <name>void</name></type> <name>t1CountStep</name><parameter_list>(
  <param><decl><type><name>sqlite3_context</name> *</type><name>context</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,
  <param><decl><type><name>sqlite3_value</name> **</type><name>argv</name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>t1CountCtx</name> *</type><name>p</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>p</name> = <call><name>sqlite3_aggregate_context</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr>(<name>argc</name>==0 || <name>SQLITE_NULL</name>!=<call><name>sqlite3_value_type</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call> ) &amp;&amp; <name>p</name></expr> )</condition><then><block>{
    <expr_stmt><expr><name>p</name>-&gt;<name>n</name>++</expr>;</expr_stmt>
  }</block></then></if>
  <if>if<condition>( <expr><name>argc</name>&gt;0</expr> )</condition><then><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>v</name> =<init> <expr><call><name>sqlite3_value_int</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if<condition>( <expr><name>v</name>==40</expr> )</condition><then><block>{
      <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr>"value of 40 handed to x_count"</expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_UTF16</name></cpp:ifndef>
    }</block></then><else>else <if>if<condition>( <expr><name>v</name>==41</expr> )</condition><then><block>{
      <decl_stmt><decl><type><name>const</name> <name>char</name></type> <name><name>zUtf16ErrMsg</name><index>[]</index></name> =<init> <expr><block>{ <expr>0</expr>, <expr>0x61</expr>, <expr>0</expr>, <expr>0x62</expr>, <expr>0</expr>, <expr>0x63</expr>, <expr>0</expr>, <expr>0</expr>, <expr>0</expr>}</block></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>sqlite3_result_error16</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr>&amp;<name><name>zUtf16ErrMsg</name><index>[<expr>1-<name>SQLITE_BIGENDIAN</name></expr>]</index></name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }</block></then></if></else></if>
  }</block></then></if>
}</block></function>   
<function><type><name>static</name> <name>void</name></type> <name>t1CountFinalize</name><parameter_list>(<param><decl><type><name>sqlite3_context</name> *</type><name>context</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>t1CountCtx</name> *</type><name>p</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>p</name> = <call><name>sqlite3_aggregate_context</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr>*<name>p</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>p</name></expr> )</condition><then><block>{
    <if>if<condition>( <expr><name>p</name>-&gt;<name>n</name>==42</expr> )</condition><then><block>{
      <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr>"x_count totals to 42"</expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then><else>else<block>{
      <expr_stmt><expr><call><name>sqlite3_result_int</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name>p</name> ? <name>p</name>-&gt;<name>n</name> : 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
  }</block></then></if>
}</block></function>

<function><type><name>static</name> <name>void</name></type> <name>legacyCountStep</name><parameter_list>(
  <param><decl><type><name>sqlite3_context</name> *</type><name>context</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,
  <param><decl><type><name>sqlite3_value</name> **</type><name>argv</name></decl></param>
)</parameter_list><block>{
  <comment type="block">/* no-op */</comment>
}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_DEPRECATED</name></cpp:ifndef>
<function><type><name>static</name> <name>void</name></type> <name>legacyCountFinalize</name><parameter_list>(<param><decl><type><name>sqlite3_context</name> *</type><name>context</name></decl></param>)</parameter_list><block>{
  <expr_stmt><expr><call><name>sqlite3_result_int</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>sqlite3_aggregate_count</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** Usage:  sqlite3_create_aggregate DB
**
** Call the sqlite3_create_function API on the given database in order
** to create a function named "x_count".  This function is similar
** to the built-in count() function, with a few special quirks
** for testing the sqlite3_result_error() APIs.
**
** The original motivation for this routine was to be able to call the
** sqlite3_create_aggregate function while a query is in progress in order
** to test the SQLITE_MISUSE detection logic.  See misuse.test.
**
** This routine was later extended to test the use of sqlite3_result_error()
** within aggregate functions.
**
** Later: It is now also extended to register the aggregate function
** "legacy_count()" with the supplied database handle. This is used
** to test the deprecated sqlite3_aggregate_count() API.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_create_aggregate</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>NotUsed</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>            <comment type="block">/* Text of each argument */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>argc</name>!=2</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>,
       <argument><expr>" FILENAME\""</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>getDbPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>db</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_create_function</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr>"x_count"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>SQLITE_UTF8</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
      <argument><expr><name>t1CountStep</name></expr></argument>,<argument><expr><name>t1CountFinalize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>rc</name>==<name>SQLITE_OK</name></expr> )</condition><then><block>{
    <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_create_function</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr>"x_count"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>SQLITE_UTF8</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
        <argument><expr><name>t1CountStep</name></expr></argument>,<argument><expr><name>t1CountFinalize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_DEPRECATED</name></cpp:ifndef>
  <if>if<condition>( <expr><name>rc</name>==<name>SQLITE_OK</name></expr> )</condition><then><block>{
    <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_create_function</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr>"legacy_count"</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>SQLITE_ANY</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>,
        <argument><expr><name>legacyCountStep</name></expr></argument>, <argument><expr><name>legacyCountFinalize</name></expr></argument>
    )</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <if>if<condition>( <expr><call><name>sqlite3TestErrCode</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><call><name>Tcl_SetResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>(<name>char</name> *)<call><name>t1ErrorName</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>


<comment type="block">/*
** Usage:  printf TEXT
**
** Send output to printf.  Use this rather than puts to merge the output
** in the correct sequence with debugging printfs inserted into C code.
** Puts uses a separate buffer and debugging statements will be out of
** sequence if it is used.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_printf</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>NotUsed</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>            <comment type="block">/* Text of each argument */</comment>
)</parameter_list><block>{
  <if>if<condition>( <expr><name>argc</name>!=2</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>,
       <argument><expr>" TEXT\""</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><call><name>printf</name><argument_list>(<argument><expr>"%s\n"</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>



<comment type="block">/*
** Usage:  sqlite3_mprintf_int FORMAT INTEGER INTEGER INTEGER
**
** Call mprintf with three integer arguments
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>sqlite3_mprintf_int</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>NotUsed</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>            <comment type="block">/* Text of each argument */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr>3</expr>]</index></name>, <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>z</name></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>argc</name>!=5</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>,
       <argument><expr>" FORMAT INT INT INT\""</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <for>for(<init><expr><name>i</name>=2</expr>;</init> <condition><expr><name>i</name>&lt;5</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
    <if>if<condition>( <expr><call><name>Tcl_GetInt</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>&amp;<name><name>a</name><index>[<expr><name>i</name>-2</expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  }</block></for>
  <expr_stmt><expr><name>z</name> = <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** If zNum represents an integer that will fit in 64-bits, then set
** *pValue to that integer and return true.  Otherwise return false.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>sqlite3GetInt64</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type><name>zNum</name></decl></param>, <param><decl><type><name>i64</name> *</type><name>pValue</name></decl></param>)</parameter_list><block>{
  <if>if<condition>( <expr><call><name>sqlite3FitsIn64Bits</name><argument_list>(<argument><expr><name>zNum</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>sqlite3Atoi64</name><argument_list>(<argument><expr><name>zNum</name></expr></argument>, <argument><expr><name>pValue</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr>1</expr>;</return>
  }</block></then></if>
  <return>return <expr>0</expr>;</return>
}</block></function>

<comment type="block">/*
** Usage:  sqlite3_mprintf_int64 FORMAT INTEGER INTEGER INTEGER
**
** Call mprintf with three 64-bit integer arguments
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>sqlite3_mprintf_int64</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>NotUsed</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>            <comment type="block">/* Text of each argument */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite_int64</name></type> <name><name>a</name><index>[<expr>3</expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>z</name></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>argc</name>!=5</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>,
       <argument><expr>" FORMAT INT INT INT\""</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <for>for(<init><expr><name>i</name>=2</expr>;</init> <condition><expr><name>i</name>&lt;5</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
    <if>if<condition>( <expr>!<call><name>sqlite3GetInt64</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>&amp;<name><name>a</name><index>[<expr><name>i</name>-2</expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
      <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"argument is not a valid 64-bit integer"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    }</block></then></if>
  }</block></for>
  <expr_stmt><expr><name>z</name> = <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage:  sqlite3_mprintf_str FORMAT INTEGER INTEGER STRING
**
** Call mprintf with two integer arguments and one string argument
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>sqlite3_mprintf_str</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>NotUsed</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>            <comment type="block">/* Text of each argument */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr>3</expr>]</index></name>, <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>z</name></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>argc</name>&lt;4 || <name>argc</name>&gt;5</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>,
       <argument><expr>" FORMAT INT INT ?STRING?\""</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <for>for(<init><expr><name>i</name>=2</expr>;</init> <condition><expr><name>i</name>&lt;4</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
    <if>if<condition>( <expr><call><name>Tcl_GetInt</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>&amp;<name><name>a</name><index>[<expr><name>i</name>-2</expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  }</block></for>
  <expr_stmt><expr><name>z</name> = <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>argc</name>&gt;4 ? <name><name>argv</name><index>[<expr>4</expr>]</index></name> : <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage:  sqlite3_snprintf_str INTEGER FORMAT INTEGER INTEGER STRING
**
** Call mprintf with two integer arguments and one string argument
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>sqlite3_snprintf_str</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>NotUsed</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>            <comment type="block">/* Text of each argument */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr>3</expr>]</index></name>, <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>z</name></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>argc</name>&lt;5 || <name>argc</name>&gt;6</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>,
       <argument><expr>" INT FORMAT INT INT ?STRING?\""</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>Tcl_GetInt</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr><name>n</name>&lt;0</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"N must be non-negative"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <for>for(<init><expr><name>i</name>=3</expr>;</init> <condition><expr><name>i</name>&lt;5</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
    <if>if<condition>( <expr><call><name>Tcl_GetInt</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>&amp;<name><name>a</name><index>[<expr><name>i</name>-3</expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  }</block></for>
  <expr_stmt><expr><name>z</name> = <call><name>sqlite3_malloc</name><argument_list>( <argument><expr><name>n</name>+1</expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>argc</name>&gt;4 ? <name><name>argv</name><index>[<expr>5</expr>]</index></name> : <name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage:  sqlite3_mprintf_double FORMAT INTEGER INTEGER DOUBLE
**
** Call mprintf with two integer arguments and one double argument
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>sqlite3_mprintf_double</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>NotUsed</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>            <comment type="block">/* Text of each argument */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name><name>a</name><index>[<expr>3</expr>]</index></name>, <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>r</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>z</name></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>argc</name>!=5</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>,
       <argument><expr>" FORMAT INT INT DOUBLE\""</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <for>for(<init><expr><name>i</name>=2</expr>;</init> <condition><expr><name>i</name>&lt;4</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
    <if>if<condition>( <expr><call><name>Tcl_GetInt</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>&amp;<name><name>a</name><index>[<expr><name>i</name>-2</expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  }</block></for>
  <if>if<condition>( <expr><call><name>Tcl_GetDouble</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>4</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>r</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><name>z</name> = <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr><name><name>a</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage:  sqlite3_mprintf_scaled FORMAT DOUBLE DOUBLE
**
** Call mprintf with a single double argument which is the product of the
** two arguments given above.  This is used to generate overflow and underflow
** doubles to test that they are converted properly.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>sqlite3_mprintf_scaled</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>NotUsed</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>            <comment type="block">/* Text of each argument */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name><name>r</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>z</name></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>argc</name>!=4</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>,
       <argument><expr>" FORMAT DOUBLE DOUBLE\""</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <for>for(<init><expr><name>i</name>=2</expr>;</init> <condition><expr><name>i</name>&lt;4</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
    <if>if<condition>( <expr><call><name>Tcl_GetDouble</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>&amp;<name><name>r</name><index>[<expr><name>i</name>-2</expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  }</block></for>
  <expr_stmt><expr><name>z</name> = <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name><name>r</name><index>[<expr>0</expr>]</index></name>*<name><name>r</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage:  sqlite3_mprintf_stronly FORMAT STRING
**
** Call mprintf with a single double argument which is the product of the
** two arguments given above.  This is used to generate overflow and underflow
** doubles to test that they are converted properly.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>sqlite3_mprintf_stronly</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>NotUsed</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>            <comment type="block">/* Text of each argument */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>char</name> *</type><name>z</name></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>argc</name>!=3</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>,
       <argument><expr>" FORMAT STRING\""</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><name>z</name> = <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage:  sqlite3_mprintf_hexdouble FORMAT HEX
**
** Call mprintf with a single double argument which is derived from the
** hexadecimal encoding of an IEEE double.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>sqlite3_mprintf_hexdouble</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>NotUsed</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>            <comment type="block">/* Text of each argument */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>char</name> *</type><name>z</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>r</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>x1</name>, <name>x2</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite_uint64</name></type> <name>d</name></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>argc</name>!=3</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>,
       <argument><expr>" FORMAT STRING\""</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>sscanf</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>"%08x%08x"</expr></argument>, <argument><expr>&amp;<name>x2</name></expr></argument>, <argument><expr>&amp;<name>x1</name></expr></argument>)</argument_list></call>!=2</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"2nd argument should be 16-characters of hex"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><name>d</name> = <name>x2</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>d</name> = (<name>d</name>&lt;&lt;32) + <name>x1</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>&amp;<name>r</name></expr></argument>, <argument><expr>&amp;<name>d</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>r</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>z</name> = <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr><name>r</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>z</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>z</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage: sqlite3_enable_shared_cache ?BOOLEAN?
**
*/</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_OMIT_SHARED_CACHE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<function><type><name>static</name> <name>int</name></type> <name>test_enable_shared</name><parameter_list>(
  <param><decl><type><name>ClientData</name></type> <name>clientData</name></decl></param>, <comment type="block">/* Pointer to sqlite3_enable_XXX function */</comment>
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>  <comment type="block">/* Command arguments */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>enable</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>ret</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=2 &amp;&amp; <name>objc</name>!=1</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr>"?BOOLEAN?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><name>ret</name> = <name>sqlite3GlobalConfig</name>.<name>sharedCacheEnabled</name></expr>;</expr_stmt>

  <if>if<condition>( <expr><name>objc</name>==2</expr> )</condition><then><block>{
    <if>if<condition>( <expr><call><name>Tcl_GetBooleanFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>enable</name></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_enable_shared_cache</name><argument_list>(<argument><expr><name>enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_OK</name></expr> )</condition><then><block>{
      <expr_stmt><expr><call><name>Tcl_SetResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>(<name>char</name> *)<call><name>sqlite3ErrStr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TCL_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    }</block></then></if>
  }</block></then></if>
  <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_NewBooleanObj</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>



<comment type="block">/*
** Usage: sqlite3_extended_result_codes   DB    BOOLEAN
**
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_extended_result_codes</name><parameter_list>(
  <param><decl><type><name>ClientData</name></type> <name>clientData</name></decl></param>, <comment type="block">/* Pointer to sqlite3_enable_XXX function */</comment>
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>  <comment type="block">/* Command arguments */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>enable</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=3</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr>"DB BOOLEAN"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>getDbPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>db</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr><call><name>Tcl_GetBooleanFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>enable</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><call><name>sqlite3_extended_result_codes</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>enable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage: sqlite3_libversion_number
**
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_libversion_number</name><parameter_list>(
  <param><decl><type><name>ClientData</name></type> <name>clientData</name></decl></param>, <comment type="block">/* Pointer to sqlite3_enable_XXX function */</comment>
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>  <comment type="block">/* Command arguments */</comment>
)</parameter_list><block>{
  <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_NewIntObj</name><argument_list>(<argument><expr><call><name>sqlite3_libversion_number</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage: sqlite3_table_column_metadata DB dbname tblname colname
**
*/</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_COLUMN_METADATA</name></cpp:ifdef>
<function><type><name>static</name> <name>int</name></type> <name>test_table_column_metadata</name><parameter_list>(
  <param><decl><type><name>ClientData</name></type> <name>clientData</name></decl></param>, <comment type="block">/* Pointer to sqlite3_enable_XXX function */</comment>
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>  <comment type="block">/* Command arguments */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>zDb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>zTbl</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>zCol</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Tcl_Obj</name> *</type><name>pRet</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>zDatatype</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>zCollseq</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>notnull</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>primarykey</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>autoincrement</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=5</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr>"DB dbname tblname colname"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>getDbPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>db</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><name>zDb</name> = <call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zTbl</name> = <call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>3</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zCol</name> = <call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>4</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if<condition>( <expr><call><name>strlen</name><argument_list>(<argument><expr><name>zDb</name></expr></argument>)</argument_list></call>==0</expr> )</condition><then> <expr_stmt><expr><name>zDb</name> = 0</expr>;</expr_stmt></then></if>

  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_table_column_metadata</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>, <argument><expr><name>zTbl</name></expr></argument>, <argument><expr><name>zCol</name></expr></argument>, 
      <argument><expr>&amp;<name>zDatatype</name></expr></argument>, <argument><expr>&amp;<name>zCollseq</name></expr></argument>, <argument><expr>&amp;<name>notnull</name></expr></argument>, <argument><expr>&amp;<name>primarykey</name></expr></argument>, <argument><expr>&amp;<name>autoincrement</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_OK</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><name>pRet</name> = <call><name>Tcl_NewObj</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>pRet</name></expr></argument>, <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name>zDatatype</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>pRet</name></expr></argument>, <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name>zCollseq</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>pRet</name></expr></argument>, <argument><expr><call><name>Tcl_NewIntObj</name><argument_list>(<argument><expr><name>notnull</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>pRet</name></expr></argument>, <argument><expr><call><name>Tcl_NewIntObj</name><argument_list>(<argument><expr><name>primarykey</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>pRet</name></expr></argument>, <argument><expr><call><name>Tcl_NewIntObj</name><argument_list>(<argument><expr><name>autoincrement</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>pRet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_INCRBLOB</name></cpp:ifndef>

<comment type="block">/*
** sqlite3_blob_read  CHANNEL OFFSET N
**
**   This command is used to test the sqlite3_blob_read() in ways that
**   the Tcl channel interface does not. The first argument should
**   be the name of a valid channel created by the [incrblob] method
**   of a database handle. This function calls sqlite3_blob_read()
**   to read N bytes from offset OFFSET from the underlying SQLite
**   blob handle.
**
**   On success, a byte-array object containing the read data is 
**   returned. On failure, the interpreter result is set to the
**   text representation of the returned error code (i.e. "SQLITE_NOMEM")
**   and a Tcl exception is thrown.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_blob_read</name><parameter_list>(
  <param><decl><type><name>ClientData</name></type> <name>clientData</name></decl></param>, <comment type="block">/* Not used */</comment>
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>  <comment type="block">/* Command arguments */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>Tcl_Channel</name></type> <name>channel</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ClientData</name></type> <name>instanceData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_blob</name> *</type><name>pBlob</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>notUsed</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nByte</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iOffset</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>zBuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  
  <if>if<condition>( <expr><name>objc</name>!=4</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr>"CHANNEL OFFSET N"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><name>channel</name> = <call><name>Tcl_GetChannel</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>notUsed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr>!<name>channel</name>
   || <name>TCL_OK</name>!=<call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>iOffset</name></expr></argument>)</argument_list></call>
   || <name>TCL_OK</name>!=<call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>3</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>nByte</name></expr></argument>)</argument_list></call>
   || <name>nByte</name>&lt;0 || <name>iOffset</name>&lt;0</expr>
  )</condition><then><block>{ 
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><name>instanceData</name> = <call><name>Tcl_GetChannelInstanceData</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pBlob</name> = *((<name>sqlite3_blob</name> **)<name>instanceData</name>)</expr>;</expr_stmt>

  <expr_stmt><expr><name>zBuf</name> = (<name>unsigned</name> <name>char</name> *)<call><name>Tcl_Alloc</name><argument_list>(<argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_blob_read</name><argument_list>(<argument><expr><name>pBlob</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>, <argument><expr><name>iOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>rc</name>==<name>SQLITE_OK</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_NewByteArrayObj</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then><else>else<block>{
    <expr_stmt><expr><call><name>Tcl_SetResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>(<name>char</name> *)<call><name>sqlite3TestErrorName</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TCL_VOLATILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></else></if>
  <expr_stmt><expr><call><name>Tcl_Free</name><argument_list>(<argument><expr>(<name>char</name> *)<name>zBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr>(<name>rc</name>==<name>SQLITE_OK</name> ? <name>TCL_OK</name> : <name>TCL_ERROR</name>)</expr>;</return>
}</block></function>

<comment type="block">/*
** sqlite3_blob_write CHANNEL OFFSET DATA ?NDATA?
**
**   This command is used to test the sqlite3_blob_write() in ways that
**   the Tcl channel interface does not. The first argument should
**   be the name of a valid channel created by the [incrblob] method
**   of a database handle. This function calls sqlite3_blob_write()
**   to write the DATA byte-array to the underlying SQLite blob handle.
**   at offset OFFSET.
**
**   On success, an empty string is returned. On failure, the interpreter
**   result is set to the text representation of the returned error code 
**   (i.e. "SQLITE_NOMEM") and a Tcl exception is thrown.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_blob_write</name><parameter_list>(
  <param><decl><type><name>ClientData</name></type> <name>clientData</name></decl></param>, <comment type="block">/* Not used */</comment>
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>  <comment type="block">/* Command arguments */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>Tcl_Channel</name></type> <name>channel</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>ClientData</name></type> <name>instanceData</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_blob</name> *</type><name>pBlob</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>notUsed</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iOffset</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>unsigned</name> <name>char</name> *</type><name>zBuf</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nBuf</name></decl>;</decl_stmt>
  
  <if>if<condition>( <expr><name>objc</name>!=4 &amp;&amp; <name>objc</name>!=5</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr>"CHANNEL OFFSET DATA ?NDATA?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><name>channel</name> = <call><name>Tcl_GetChannel</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>notUsed</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr>!<name>channel</name> || <name>TCL_OK</name>!=<call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>iOffset</name></expr></argument>)</argument_list></call></expr> )</condition><then><block>{ 
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><name>instanceData</name> = <call><name>Tcl_GetChannelInstanceData</name><argument_list>(<argument><expr><name>channel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pBlob</name> = *((<name>sqlite3_blob</name> **)<name>instanceData</name>)</expr>;</expr_stmt>

  <expr_stmt><expr><name>zBuf</name> = <call><name>Tcl_GetByteArrayFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>3</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>nBuf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>objc</name>==5 &amp;&amp; <call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>4</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>nBuf</name></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_blob_write</name><argument_list>(<argument><expr><name>pBlob</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>nBuf</name></expr></argument>, <argument><expr><name>iOffset</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_OK</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_SetResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>(<name>char</name> *)<call><name>sqlite3TestErrorName</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TCL_VOLATILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr>(<name>rc</name>==<name>SQLITE_OK</name> ? <name>TCL_OK</name> : <name>TCL_ERROR</name>)</expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** Usage: sqlite3_create_collation_v2 DB-HANDLE NAME CMP-PROC DEL-PROC
**
**   This Tcl proc is used for testing the experimental
**   sqlite3_create_collation_v2() interface.
*/</comment>
<struct>struct <name>TestCollationX</name> <block>{<public type="default">
  <decl_stmt><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Tcl_Obj</name> *</type><name>pCmp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Tcl_Obj</name> *</type><name>pDel</name></decl>;</decl_stmt>
</public>}</block>;</struct>
<typedef>typedef <type><struct>struct <name>TestCollationX</name> TestCollationX;</struct></type></typedef>
<function><type><name>static</name> <name>void</name></type> <name>testCreateCollationDel</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>pCtx</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>TestCollationX</name> *</type><name>p</name> =<init> <expr>(<name>TestCollationX</name> *)<name>pCtx</name></expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> =<init> <expr><call><name>Tcl_EvalObjEx</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>interp</name></expr></argument>, <argument><expr><name>p</name>-&gt;<name>pDel</name></expr></argument>, <argument><expr><name>TCL_EVAL_DIRECT</name>|<name>TCL_EVAL_GLOBAL</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>rc</name>!=<name>TCL_OK</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_BackgroundError</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <expr_stmt><expr><call><name>Tcl_DecrRefCount</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>pCmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_DecrRefCount</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>pDel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr>(<name>void</name> *)<name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>static</name> <name>int</name></type> <name>testCreateCollationCmp</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>pCtx</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>nLeft</name></decl></param>,
  <param><decl><type><name>const</name> <name>void</name> *</type><name>zLeft</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>nRight</name></decl></param>,
  <param><decl><type><name>const</name> <name>void</name> *</type><name>zRight</name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>TestCollationX</name> *</type><name>p</name> =<init> <expr>(<name>TestCollationX</name> *)<name>pCtx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Tcl_Obj</name> *</type><name>pScript</name> =<init> <expr><call><name>Tcl_DuplicateObj</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>pCmp</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>iRes</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>Tcl_IncrRefCount</name><argument_list>(<argument><expr><name>pScript</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>pScript</name></expr></argument>, <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr>(<name>char</name> *)<name>zLeft</name></expr></argument>, <argument><expr><name>nLeft</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>pScript</name></expr></argument>, <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr>(<name>char</name> *)<name>zRight</name></expr></argument>,<argument><expr><name>nRight</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <if>if<condition>( <expr><name>TCL_OK</name>!=<call><name>Tcl_EvalObjEx</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>interp</name></expr></argument>, <argument><expr><name>pScript</name></expr></argument>, <argument><expr><name>TCL_EVAL_DIRECT</name>|<name>TCL_EVAL_GLOBAL</name></expr></argument>)</argument_list></call>
   || <name>TCL_OK</name>!=<call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetObjResult</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>interp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>iRes</name></expr></argument>)</argument_list></call></expr>
  )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_BackgroundError</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <expr_stmt><expr><call><name>Tcl_DecrRefCount</name><argument_list>(<argument><expr><name>pScript</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>iRes</name></expr>;</return>
}</block></function>
<function><type><name>static</name> <name>int</name></type> <name>test_create_collation_v2</name><parameter_list>(
  <param><decl><type><name>ClientData</name></type> <name>clientData</name></decl></param>, <comment type="block">/* Not used */</comment>
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>  <comment type="block">/* Command arguments */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>TestCollationX</name> *</type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=5</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr>"DB-HANDLE NAME CMP-PROC DEL-PROC"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>getDbPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>db</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><name>p</name> = (<name>TestCollationX</name> *)<call><name>sqlite3_malloc</name><argument_list>(<argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>TestCollationX</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name>-&gt;<name>pCmp</name> = <name><name>objv</name><index>[<expr>3</expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name>-&gt;<name>pDel</name> = <name><name>objv</name><index>[<expr>4</expr>]</index></name></expr>;</expr_stmt>
  <expr_stmt><expr><name>p</name>-&gt;<name>interp</name> = <name>interp</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_IncrRefCount</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>pCmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_IncrRefCount</name><argument_list>(<argument><expr><name>p</name>-&gt;<name>pDel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_create_collation_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>16</expr></argument>, 
      <argument><expr>(<name>void</name> *)<name>p</name></expr></argument>, <argument><expr><name>testCreateCollationCmp</name></expr></argument>, <argument><expr><name>testCreateCollationDel</name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_MISUSE</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"sqlite3_create_collate_v2() failed to detect "
      "an invalid encoding"</expr></argument>, <argument><expr>(<name>char</name>*)0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_create_collation_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>SQLITE_UTF8</name></expr></argument>, 
      <argument><expr>(<name>void</name> *)<name>p</name></expr></argument>, <argument><expr><name>testCreateCollationCmp</name></expr></argument>, <argument><expr><name>testCreateCollationDel</name></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage: sqlite3_load_extension DB-HANDLE FILE ?PROC?
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_load_extension</name><parameter_list>(
  <param><decl><type><name>ClientData</name></type> <name>clientData</name></decl></param>, <comment type="block">/* Not used */</comment>
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>  <comment type="block">/* Command arguments */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>Tcl_CmdInfo</name></type> <name>cmdInfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>zDb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>zFile</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>zProc</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>zErr</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=4 &amp;&amp; <name>objc</name>!=3</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr>"DB-HANDLE FILE ?PROC?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><name>zDb</name> = <call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>zFile</name> = <call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>objc</name>==4</expr> )</condition><then><block>{
    <expr_stmt><expr><name>zProc</name> = <call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>3</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <comment type="block">/* Extract the C database handle from the Tcl command name */</comment>
  <if>if<condition>( <expr>!<call><name>Tcl_GetCommandInfo</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>, <argument><expr>&amp;<name>cmdInfo</name></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"command not found: "</expr></argument>, <argument><expr><name>zDb</name></expr></argument>, <argument><expr>(<name>char</name>*)0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><name>db</name> = ((struct <name>SqliteDb</name>*)<name>cmdInfo</name>.<name>objClientData</name>)-&gt;<name>db</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Call the underlying C function. If an error occurs, set rc to 
  ** TCL_ERROR and load any error string into the interpreter. If no 
  ** error occurs, set rc to TCL_OK.
  */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_LOAD_EXTENSION</name></cpp:ifdef>
  <expr_stmt><expr><name>rc</name> = <name>SQLITE_ERROR</name></expr>;</expr_stmt>
  <expr_stmt><expr><name>zErr</name> = <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr>"this build omits sqlite3_load_extension()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_load_extension</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zFile</name></expr></argument>, <argument><expr><name>zProc</name></expr></argument>, <argument><expr>&amp;<name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_OK</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_SetResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zErr</name> ? <name>zErr</name> : ""</expr></argument>, <argument><expr><name>TCL_VOLATILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> = <name>TCL_ERROR</name></expr>;</expr_stmt>
  }</block></then><else>else<block>{
    <expr_stmt><expr><name>rc</name> = <name>TCL_OK</name></expr>;</expr_stmt>
  }</block></else></if>
  <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>rc</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage: sqlite3_enable_load_extension DB-HANDLE ONOFF
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_enable_load</name><parameter_list>(
  <param><decl><type><name>ClientData</name></type> <name>clientData</name></decl></param>, <comment type="block">/* Not used */</comment>
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>  <comment type="block">/* Command arguments */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>Tcl_CmdInfo</name></type> <name>cmdInfo</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>zDb</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>onoff</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=3</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr>"DB-HANDLE ONOFF"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><name>zDb</name> = <call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Extract the C database handle from the Tcl command name */</comment>
  <if>if<condition>( <expr>!<call><name>Tcl_GetCommandInfo</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zDb</name></expr></argument>, <argument><expr>&amp;<name>cmdInfo</name></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"command not found: "</expr></argument>, <argument><expr><name>zDb</name></expr></argument>, <argument><expr>(<name>char</name>*)0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><name>db</name> = ((struct <name>SqliteDb</name>*)<name>cmdInfo</name>.<name>objClientData</name>)-&gt;<name>db</name></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Get the onoff parameter */</comment>
  <if>if<condition>( <expr><call><name>Tcl_GetBooleanFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>onoff</name></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_LOAD_EXTENSION</name></cpp:ifdef>
  <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"this build omits sqlite3_load_extension()"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_ERROR</name></expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr_stmt><expr><call><name>sqlite3_enable_load_extension</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>onoff</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>

<comment type="block">/*
** Usage:  sqlite_abort
**
** Shutdown the process immediately.  This is not a clean shutdown.
** This command is used to test the recoverability of a database in
** the event of a program crash.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>sqlite_abort</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>NotUsed</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>            <comment type="block">/* Text of each argument */</comment>
)</parameter_list><block>{
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>interp</name>==0</expr></argument> )</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* This will always fail */</comment>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** The following routine is a user-defined SQL function whose purpose
** is to test the sqlite_set_result() API.
*/</comment>
<function><type><name>static</name> <name>void</name></type> <name>testFunc</name><parameter_list>(<param><decl><type><name>sqlite3_context</name> *</type><name>context</name></decl></param>, <param><decl><type><name>int</name></type> <name>argc</name></decl></param>, <param><decl><type><name>sqlite3_value</name> **</type><name>argv</name></decl></param>)</parameter_list><block>{
  <while>while<condition>( <expr><name>argc</name>&gt;=2</expr> )</condition><block>{
    <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>zArg0</name> =<init> <expr>(<name>char</name>*)<call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if<condition>( <expr><name>zArg0</name></expr> )</condition><then><block>{
      <if>if<condition>( <expr>0==<call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>zArg0</name></expr></argument>, <argument><expr>"int"</expr></argument>)</argument_list></call></expr> )</condition><then><block>{
        <expr_stmt><expr><call><name>sqlite3_result_int</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>sqlite3_value_int</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then><else>else <if>if<condition>( <expr><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>zArg0</name></expr></argument>,<argument><expr>"int64"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
        <expr_stmt><expr><call><name>sqlite3_result_int64</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>sqlite3_value_int64</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then><else>else <if>if<condition>( <expr><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>zArg0</name></expr></argument>,<argument><expr>"string"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
        <expr_stmt><expr><call><name>sqlite3_result_text</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr>(<name>char</name>*)<call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>-1</expr></argument>,
            <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then><else>else <if>if<condition>( <expr><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>zArg0</name></expr></argument>,<argument><expr>"double"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
        <expr_stmt><expr><call><name>sqlite3_result_double</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><call><name>sqlite3_value_double</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then><else>else <if>if<condition>( <expr><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>zArg0</name></expr></argument>,<argument><expr>"null"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
        <expr_stmt><expr><call><name>sqlite3_result_null</name><argument_list>(<argument><expr><name>context</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then><else>else <if>if<condition>( <expr><call><name>sqlite3StrICmp</name><argument_list>(<argument><expr><name>zArg0</name></expr></argument>,<argument><expr>"value"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
        <expr_stmt><expr><call><name>sqlite3_result_value</name><argument_list>(<argument><expr><name>context</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr><call><name>sqlite3_value_int</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then><else>else<block>{
        <goto>goto <name>error_out</name>;</goto>
      }</block></else></if></else></if></else></if></else></if></else></if></else></if>
    }</block></then><else>else<block>{
      <goto>goto <name>error_out</name>;</goto>
    }</block></else></if>
    <expr_stmt><expr><name>argc</name> -= 2</expr>;</expr_stmt>
    <expr_stmt><expr><name>argv</name> += 2</expr>;</expr_stmt>
  }</block></while>
  <return>return;</return>

<label><name>error_out</name>:</label>
  <expr_stmt><expr><call><name>sqlite3_result_error</name><argument_list>(<argument><expr><name>context</name></expr></argument>,<argument><expr>"first argument should be one of: "
      "int int64 string double null value"</expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
** Usage:   sqlite_register_test_function  DB  NAME
**
** Register the test SQL function on the database DB under the name NAME.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_register_func</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>NotUsed</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>            <comment type="block">/* Text of each argument */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>argc</name>!=3</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>, 
       <argument><expr>" DB FUNCTION-NAME"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>getDbPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>db</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_create_function</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name>SQLITE_UTF8</name></expr></argument>, <argument><expr>0</expr></argument>, 
      <argument><expr><name>testFunc</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>rc</name>!=0</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>sqlite3ErrStr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>sqlite3TestErrCode</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage:  sqlite3_finalize  STMT 
**
** Finalize a statement handle.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_finalize</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3_stmt</name> *</type><name>pStmt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=2</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>,
        <argument><expr><call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>" &lt;STMT&gt;"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>

  <if>if<condition>( <expr><call><name>getStmtPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>

  <if>if<condition>( <expr><name>pStmt</name></expr> )</condition><then><block>{
    <expr_stmt><expr><name>db</name> = <call><name>StmtToDb</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_SetResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>(<name>char</name> *)<call><name>t1ErrorName</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TCL_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>db</name> &amp;&amp; <call><name>sqlite3TestErrCode</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage:  sqlite3_stmt_status  STMT  CODE  RESETFLAG
**
** Get the value of a status counter from a statement.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_stmt_status</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>iValue</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name>, <name>op</name>, <name>resetFlag</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>zOpName</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> *</type><name>pStmt</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>static</name> <name>const</name> <struct>struct <block>{<public type="default"/>
    <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>zName</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>op</name></decl>;</decl_stmt>
  }</block> <decl><name><name>aOp</name><index>[]</index></name> =<init> <expr><block>{
    <expr><block>{ <expr>"SQLITE_STMTSTATUS_FULLSCAN_STEP"</expr>,   <expr><name>SQLITE_STMTSTATUS_FULLSCAN_STEP</name></expr>   }</block></expr>,
    <expr><block>{ <expr>"SQLITE_STMTSTATUS_SORT"</expr>,            <expr><name>SQLITE_STMTSTATUS_SORT</name></expr>            }</block></expr>,
  }</block></expr></init></decl>;</struct></type></decl></decl_stmt>
  <if>if<condition>( <expr><name>objc</name>!=4</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr>"STMT PARAMETER RESETFLAG"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>getStmtPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><name>zOpName</name> = <call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<call><name>ArraySize</name><argument_list>(<argument><expr><name>aOp</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
    <if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>aOp</name><index>[<expr><name>i</name></expr>]</index></name>.<name>zName</name></expr></argument>, <argument><expr><name>zOpName</name></expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
      <expr_stmt><expr><name>op</name> = <name><name>aOp</name><index>[<expr><name>i</name></expr>]</index></name>.<name>op</name></expr>;</expr_stmt>
      <break>break;</break>
    }</block></then></if>
  }</block></for>
  <if>if<condition>( <expr><name>i</name>&gt;=<call><name>ArraySize</name><argument_list>(<argument><expr><name>aOp</name></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
    <if>if<condition>( <expr><call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>op</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>Tcl_GetBooleanFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>3</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>resetFlag</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><name>iValue</name> = <call><name>sqlite3_stmt_status</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>resetFlag</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_NewIntObj</name><argument_list>(<argument><expr><name>iValue</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage:  sqlite3_next_stmt  DB  STMT
**
** Return the next statment in sequence after STMT.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_next_stmt</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3_stmt</name> *</type><name>pStmt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr>50</expr>]</index></name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=3</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>,
        <argument><expr><call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>" DB STMT"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>

  <if>if<condition>( <expr><call><name>getDbPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>db</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr><call><name>getStmtPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><name>pStmt</name> = <call><name>sqlite3_next_stmt</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>pStmt</name></expr> )</condition><then><block>{
    <if>if<condition>( <expr><call><name>sqlite3TestMakePointerStr</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>


<comment type="block">/*
** Usage:  sqlite3_reset  STMT 
**
** Reset a statement handle.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_reset</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3_stmt</name> *</type><name>pStmt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=2</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>,
        <argument><expr><call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>" &lt;STMT&gt;"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>

  <if>if<condition>( <expr><call><name>getStmtPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_reset</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>pStmt</name> &amp;&amp; <call><name>sqlite3TestErrCode</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>StmtToDb</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><call><name>Tcl_SetResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>(<name>char</name> *)<call><name>t1ErrorName</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TCL_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="block">/*
  if( rc ){
    return TCL_ERROR;
  }
*/</comment>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage:  sqlite3_expired STMT 
**
** Return TRUE if a recompilation of the statement is recommended.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_expired</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_DEPRECATED</name></cpp:ifndef>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> *</type><name>pStmt</name></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>objc</name>!=2</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>,
        <argument><expr><call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>" &lt;STMT&gt;"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>getStmtPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_NewBooleanObj</name><argument_list>(<argument><expr><call><name>sqlite3_expired</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage:  sqlite3_transfer_bindings FROMSTMT TOSTMT
**
** Transfer all bindings from FROMSTMT over to TOSTMT
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_transfer_bind</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_DEPRECATED</name></cpp:ifndef>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> *</type><name>pStmt1</name>, *<name>pStmt2</name></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>objc</name>!=3</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>,
        <argument><expr><call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>" FROM-STMT TO-STMT"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>getStmtPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>pStmt1</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr><call><name>getStmtPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>pStmt2</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, 
     <argument><expr><call><name>Tcl_NewIntObj</name><argument_list>(<argument><expr><call><name>sqlite3_transfer_bindings</name><argument_list>(<argument><expr><name>pStmt1</name></expr></argument>,<argument><expr><name>pStmt2</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage:  sqlite3_changes DB
**
** Return the number of changes made to the database by the last SQL
** execution.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_changes</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>objc</name>!=2</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>,
       <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>" DB"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>getDbPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>db</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_NewIntObj</name><argument_list>(<argument><expr><call><name>sqlite3_changes</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** This is the "static_bind_value" that variables are bound to when
** the FLAG option of sqlite3_bind is "static"
*/</comment>
<decl_stmt><decl><type><name>static</name> <name>char</name> *</type><name>sqlite_static_bind_value</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>int</name></type> <name>sqlite_static_bind_nbyte</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

<comment type="block">/*
** Usage:  sqlite3_bind  VM  IDX  VALUE  FLAGS
**
** Sets the value of the IDX-th occurance of "?" in the original SQL
** string.  VALUE is the new value.  If FLAGS=="null" then VALUE is
** ignored and the value is set to NULL.  If FLAGS=="static" then
** the value is set to the value of a static variable named
** "sqlite_static_bind_value".  If FLAGS=="normal" then a copy
** of the VALUE is made.  If FLAGS=="blob10" then a VALUE is ignored
** an a 10-byte blob "abc\000xyz\000pq" is inserted.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_bind</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>NotUsed</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>            <comment type="block">/* Text of each argument */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3_stmt</name> *</type><name>pStmt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>argc</name>!=5</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>, 
       <argument><expr>" VM IDX VALUE (null|static|normal)\""</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>getStmtPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr><call><name>Tcl_GetInt</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>idx</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr>"null"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
    <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_bind_null</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then><else>else <if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr>"static"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
    <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>sqlite_static_bind_value</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then><else>else <if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr>"static-nbytes"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
    <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>sqlite_static_bind_value</name></expr></argument>,
                                       <argument><expr><name>sqlite_static_bind_nbyte</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then><else>else <if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr>"normal"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
    <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>3</expr>]</index></name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then><else>else <if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>4</expr>]</index></name></expr></argument>,<argument><expr>"blob10"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
    <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr>"abc\000xyz\000pq"</expr></argument>, <argument><expr>10</expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then><else>else<block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"4th argument should be "
        "\"null\" or \"static\" or \"normal\""</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></else></if></else></if></else></if></else></if></else></if>
  <if>if<condition>( <expr><call><name>sqlite3TestErrCode</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>StmtToDb</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr><name>rc</name></expr> )</condition><then><block>{
    <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr>50</expr>]</index></name></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>, <argument><expr>"(%d) "</expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><call><name>sqlite3ErrStr</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_UTF16</name></cpp:ifndef>
<comment type="block">/*
** Usage: add_test_collate &lt;db ptr&gt; &lt;utf8&gt; &lt;utf16le&gt; &lt;utf16be&gt;
**
** This function is used to test that SQLite selects the correct collation
** sequence callback when multiple versions (for different text encodings)
** are available.
**
** Calling this routine registers the collation sequence "test_collate"
** with database handle &lt;db&gt;. The second argument must be a list of three
** boolean values. If the first is true, then a version of test_collate is
** registered for UTF-8, if the second is true, a version is registered for
** UTF-16le, if the third is true, a UTF-16be version is available.
** Previous versions of test_collate are deleted.
**
** The collation sequence test_collate is implemented by calling the
** following TCL script:
**
**   "test_collate &lt;enc&gt; &lt;lhs&gt; &lt;rhs&gt;"
**
** The &lt;lhs&gt; and &lt;rhs&gt; are the two values being compared, encoded in UTF-8.
** The &lt;enc&gt; parameter is the encoding of the collation function that
** SQLite selected to call. The TCL test script implements the
** "test_collate" proc.
**
** Note that this will only work with one intepreter at a time, as the
** interp pointer to use when evaluating the TCL script is stored in
** pTestCollateInterp.
*/</comment>
<decl_stmt><decl><type><name>static</name> <name>Tcl_Interp</name>*</type> <name>pTestCollateInterp</name></decl>;</decl_stmt>
<function><type><name>static</name> <name>int</name></type> <name>test_collate_func</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>pCtx</name></decl></param>, 
  <param><decl><type><name>int</name></type> <name>nA</name></decl></param>, <param><decl><type><name>const</name> <name>void</name> *</type><name>zA</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>nB</name></decl></param>, <param><decl><type><name>const</name> <name>void</name> *</type><name>zB</name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>Tcl_Interp</name> *</type><name>i</name> =<init> <expr><name>pTestCollateInterp</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>encin</name> =<init> <expr>(<name>int</name>)<name>pCtx</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>res</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>sqlite3_value</name> *</type><name>pVal</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Tcl_Obj</name> *</type><name>pX</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>pX</name> = <call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr>"test_collate"</expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_IncrRefCount</name><argument_list>(<argument><expr><name>pX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <switch>switch<condition>( <expr><name>encin</name></expr> )</condition><block>{
    <case>case <expr><name>SQLITE_UTF8</name></expr>:
      <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>pX</name></expr></argument>,<argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr>"UTF-8"</expr></argument>,<argument><expr>-1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </case><case>case <expr><name>SQLITE_UTF16LE</name></expr>:
      <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>pX</name></expr></argument>,<argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr>"UTF-16LE"</expr></argument>,<argument><expr>-1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </case><case>case <expr><name>SQLITE_UTF16BE</name></expr>:
      <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>pX</name></expr></argument>,<argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr>"UTF-16BE"</expr></argument>,<argument><expr>-1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    </case><default>default:
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </default>}</block></switch>

  <expr_stmt><expr><name>pVal</name> = <call><name>sqlite3ValueNew</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3ValueSetStr</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>nA</name></expr></argument>, <argument><expr><name>zA</name></expr></argument>, <argument><expr><name>encin</name></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> = <call><name>sqlite3_value_bytes</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>pX</name></expr></argument>,
      <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr>(<name>char</name>*)<call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3ValueSetStr</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>nB</name></expr></argument>, <argument><expr><name>zB</name></expr></argument>, <argument><expr><name>encin</name></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>n</name> = <call><name>sqlite3_value_bytes</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr><name>i</name></expr></argument>,<argument><expr><name>pX</name></expr></argument>,
      <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr>(<name>char</name>*)<call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>n</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3ValueFree</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>Tcl_EvalObjEx</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name>pX</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_DecrRefCount</name><argument_list>(<argument><expr><name>pX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><call><name>Tcl_GetObjResult</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>res</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>res</name></expr>;</return>
}</block></function>
<function><type><name>static</name> <name>int</name></type> <name>test_collate</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_value</name> *</type><name>pVal</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=5</expr> )</condition><then> <goto>goto <name>bad_args</name>;</goto></then></if>
  <expr_stmt><expr><name>pTestCollateInterp</name> = <name>interp</name></expr>;</expr_stmt>
  <if>if<condition>( <expr><call><name>getDbPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>db</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>

  <if>if<condition>( <expr><name>TCL_OK</name>!=<call><name>Tcl_GetBooleanFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_create_collation</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr>"test_collate"</expr></argument>, <argument><expr><name>SQLITE_UTF8</name></expr></argument>, 
          <argument><expr>(<name>void</name> *)<name>SQLITE_UTF8</name></expr></argument>, <argument><expr><name>val</name>?<name>test_collate_func</name>:0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>rc</name>==<name>SQLITE_OK</name></expr> )</condition><then><block>{
    <decl_stmt><decl><type><name>const</name> <name>void</name> *</type><name>zUtf16</name></decl>;</decl_stmt>
    <if>if<condition>( <expr><name>TCL_OK</name>!=<call><name>Tcl_GetBooleanFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>3</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
    <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_create_collation</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr>"test_collate"</expr></argument>, <argument><expr><name>SQLITE_UTF16LE</name></expr></argument>, 
            <argument><expr>(<name>void</name> *)<name>SQLITE_UTF16LE</name></expr></argument>, <argument><expr><name>val</name>?<name>test_collate_func</name>:0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>( <expr><name>TCL_OK</name>!=<call><name>Tcl_GetBooleanFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>4</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
    if( sqlite3_iMallocFail&gt;0 ){
      sqlite3_iMallocFail++;
    }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name>db</name>-&gt;<name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>pVal</name> = <call><name>sqlite3ValueNew</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3ValueSetStr</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr>"test_collate"</expr></argument>, <argument><expr><name>SQLITE_UTF8</name></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zUtf16</name> = <call><name>sqlite3ValueText</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>, <argument><expr><name>SQLITE_UTF16NATIVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>( <expr><name>db</name>-&gt;<name>mallocFailed</name></expr> )</condition><then><block>{
      <expr_stmt><expr><name>rc</name> = <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
    }</block></then><else>else<block>{
      <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_create_collation16</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zUtf16</name></expr></argument>, <argument><expr><name>SQLITE_UTF16BE</name></expr></argument>, 
          <argument><expr>(<name>void</name> *)<name>SQLITE_UTF16BE</name></expr></argument>, <argument><expr><name>val</name>?<name>test_collate_func</name>:0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><call><name>sqlite3ValueFree</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name>db</name>-&gt;<name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>sqlite3TestErrCode</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  
  <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_OK</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>sqlite3TestErrorName</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <return>return <expr><name>TCL_OK</name></expr>;</return>

<label><name>bad_args</name>:</label>
  <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>,
      <argument><expr><call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>" &lt;DB&gt; &lt;utf8&gt; &lt;utf16le&gt; &lt;utf16be&gt;"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/*
** When the collation needed callback is invoked, record the name of 
** the requested collating function here.  The recorded name is linked
** to a TCL variable and used to make sure that the requested collation
** name is correct.
*/</comment>
<decl_stmt><decl><type><name>static</name> <name>char</name></type> <name><name>zNeededCollation</name><index>[<expr>200</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>char</name> *</type><name>pzNeededCollation</name> =<init> <expr><name>zNeededCollation</name></expr></init></decl>;</decl_stmt>


<comment type="block">/*
** Called when a collating sequence is needed.  Registered using
** sqlite3_collation_needed16().
*/</comment>
<function><type><name>static</name> <name>void</name></type> <name>test_collate_needed_cb</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>pCtx</name></decl></param>, 
  <param><decl><type><name>sqlite3</name> *</type><name>db</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>eTextRep</name></decl></param>,
  <param><decl><type><name>const</name> <name>void</name> *</type><name>pName</name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>enc</name> =<init> <expr><call><name>ENC</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>z</name></decl>;</decl_stmt>
  <for>for(<init><expr><name>z</name> = (<name>char</name>*)<name>pName</name></expr>, <expr><name>i</name>=0</expr>;</init> <condition><expr>*<name>z</name> || <name><name>z</name><index>[<expr>1</expr>]</index></name></expr>;</condition> <incr><expr><name>z</name>++</expr></incr>)<block>{
    <if>if<condition>( <expr>*<name>z</name></expr> )</condition><then> <expr_stmt><expr><name><name>zNeededCollation</name><index>[<expr><name>i</name>++</expr>]</index></name> = *<name>z</name></expr>;</expr_stmt></then></if>
  }</block></for>
  <expr_stmt><expr><name><name>zNeededCollation</name><index>[<expr><name>i</name></expr>]</index></name> = 0</expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_create_collation</name><argument_list>(
      <argument><expr><name>db</name></expr></argument>, <argument><expr>"test_collate"</expr></argument>, <argument><expr><call><name>ENC</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>(<name>void</name> *)<name>enc</name></expr></argument>, <argument><expr><name>test_collate_func</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
** Usage: add_test_collate_needed DB
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_collate_needed</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=2</expr> )</condition><then> <goto>goto <name>bad_args</name>;</goto></then></if>
  <if>if<condition>( <expr><call><name>getDbPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>db</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_collation_needed16</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>test_collate_needed_cb</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name><name>zNeededCollation</name><index>[<expr>0</expr>]</index></name> = 0</expr>;</expr_stmt>
  <if>if<condition>( <expr><call><name>sqlite3TestErrCode</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <return>return <expr><name>TCL_OK</name></expr>;</return>

<label><name>bad_args</name>:</label>
  <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr>"DB"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/*
** tclcmd:   add_alignment_test_collations  DB
**
** Add two new collating sequences to the database DB
**
**     utf16_aligned
**     utf16_unaligned
**
** Both collating sequences use the same sort order as BINARY.
** The only difference is that the utf16_aligned collating
** sequence is declared with the SQLITE_UTF16_ALIGNED flag.
** Both collating functions increment the unaligned utf16 counter
** whenever they see a string that begins on an odd byte boundary.
*/</comment>
<decl_stmt><decl><type><name>static</name> <name>int</name></type> <name>unaligned_string_counter</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
<function><type><name>static</name> <name>int</name></type> <name>alignmentCollFunc</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>NotUsed</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>nKey1</name></decl></param>, <param><decl><type><name>const</name> <name>void</name> *</type><name>pKey1</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>nKey2</name></decl></param>, <param><decl><type><name>const</name> <name>void</name> *</type><name>pKey2</name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name>, <name>n</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>n</name> = <name>nKey1</name>&lt;<name>nKey2</name> ? <name>nKey1</name> : <name>nKey2</name></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>nKey1</name>&gt;0 &amp;&amp; 1==(1&amp;(<name>int</name>)<name>pKey1</name>)</expr> )</condition><then> <expr_stmt><expr><name>unaligned_string_counter</name>++</expr>;</expr_stmt></then></if>
  <if>if<condition>( <expr><name>nKey2</name>&gt;0 &amp;&amp; 1==(1&amp;(<name>int</name>)<name>pKey2</name>)</expr> )</condition><then> <expr_stmt><expr><name>unaligned_string_counter</name>++</expr>;</expr_stmt></then></if>
  <expr_stmt><expr><name>rc</name> = <call><name>memcmp</name><argument_list>(<argument><expr><name>pKey1</name></expr></argument>, <argument><expr><name>pKey2</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>rc</name>==0</expr> )</condition><then><block>{
    <expr_stmt><expr><name>rc</name> = <name>nKey1</name> - <name>nKey2</name></expr>;</expr_stmt>
  }</block></then></if>
  <return>return <expr><name>rc</name></expr>;</return>
}</block></function>
<function><type><name>static</name> <name>int</name></type> <name>add_alignment_test_collations</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>objc</name>&gt;=2</expr> )</condition><then><block>{
    <if>if<condition>( <expr><call><name>getDbPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>db</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>sqlite3_create_collation</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr>"utf16_unaligned"</expr></argument>,
        <argument><expr><name>SQLITE_UTF16</name></expr></argument>, 
        <argument><expr>0</expr></argument>, <argument><expr><name>alignmentCollFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_create_collation</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr>"utf16_aligned"</expr></argument>,
        <argument><expr><name>SQLITE_UTF16</name> | <name>SQLITE_UTF16_ALIGNED</name></expr></argument>, 
        <argument><expr>0</expr></argument>, <argument><expr><name>alignmentCollFunc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* !defined(SQLITE_OMIT_UTF16) */</comment>

<comment type="block">/*
** Usage: add_test_function &lt;db ptr&gt; &lt;utf8&gt; &lt;utf16le&gt; &lt;utf16be&gt;
**
** This function is used to test that SQLite selects the correct user
** function callback when multiple versions (for different text encodings)
** are available.
**
** Calling this routine registers up to three versions of the user function
** "test_function" with database handle &lt;db&gt;.  If the second argument is
** true, then a version of test_function is registered for UTF-8, if the
** third is true, a version is registered for UTF-16le, if the fourth is
** true, a UTF-16be version is available.  Previous versions of
** test_function are deleted.
**
** The user function is implemented by calling the following TCL script:
**
**   "test_function &lt;enc&gt; &lt;arg&gt;"
**
** Where &lt;enc&gt; is one of UTF-8, UTF-16LE or UTF16BE, and &lt;arg&gt; is the
** single argument passed to the SQL function. The value returned by
** the TCL script is used as the return value of the SQL function. It
** is passed to SQLite using UTF-16BE for a UTF-8 test_function(), UTF-8
** for a UTF-16LE test_function(), and UTF-16LE for an implementation that
** prefers UTF-16BE.
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_UTF16</name></cpp:ifndef>
<function><type><name>static</name> <name>void</name></type> <name>test_function_utf8</name><parameter_list>(
  <param><decl><type><name>sqlite3_context</name> *</type><name>pCtx</name></decl></param>, 
  <param><decl><type><name>int</name></type> <name>nArg</name></decl></param>,
  <param><decl><type><name>sqlite3_value</name> **</type><name>argv</name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Tcl_Obj</name> *</type><name>pX</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_value</name> *</type><name>pVal</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>interp</name> = (<name>Tcl_Interp</name> *)<call><name>sqlite3_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pX</name> = <call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr>"test_function"</expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_IncrRefCount</name><argument_list>(<argument><expr><name>pX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>pX</name></expr></argument>, <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr>"UTF-8"</expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>pX</name></expr></argument>, 
      <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr>(<name>char</name>*)<call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_EvalObjEx</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>pX</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_DecrRefCount</name><argument_list>(<argument><expr><name>pX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_result_text</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><call><name>Tcl_GetStringResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pVal</name> = <call><name>sqlite3ValueNew</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3ValueSetStr</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><call><name>Tcl_GetStringResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr></argument>, 
      <argument><expr><name>SQLITE_UTF8</name></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_result_text16be</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><call><name>sqlite3_value_text16be</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr></argument>,
      <argument><expr>-1</expr></argument>, <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3ValueFree</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>static</name> <name>void</name></type> <name>test_function_utf16le</name><parameter_list>(
  <param><decl><type><name>sqlite3_context</name> *</type><name>pCtx</name></decl></param>, 
  <param><decl><type><name>int</name></type> <name>nArg</name></decl></param>,
  <param><decl><type><name>sqlite3_value</name> **</type><name>argv</name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Tcl_Obj</name> *</type><name>pX</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_value</name> *</type><name>pVal</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>interp</name> = (<name>Tcl_Interp</name> *)<call><name>sqlite3_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pX</name> = <call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr>"test_function"</expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_IncrRefCount</name><argument_list>(<argument><expr><name>pX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>pX</name></expr></argument>, <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr>"UTF-16LE"</expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>pX</name></expr></argument>, 
      <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr>(<name>char</name>*)<call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_EvalObjEx</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>pX</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_DecrRefCount</name><argument_list>(<argument><expr><name>pX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pVal</name> = <call><name>sqlite3ValueNew</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3ValueSetStr</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><call><name>Tcl_GetStringResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr></argument>, 
      <argument><expr><name>SQLITE_UTF8</name></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_result_text</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>,<argument><expr>(<name>char</name>*)<call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr>-1</expr></argument>,<argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3ValueFree</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>static</name> <name>void</name></type> <name>test_function_utf16be</name><parameter_list>(
  <param><decl><type><name>sqlite3_context</name> *</type><name>pCtx</name></decl></param>, 
  <param><decl><type><name>int</name></type> <name>nArg</name></decl></param>,
  <param><decl><type><name>sqlite3_value</name> **</type><name>argv</name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Tcl_Obj</name> *</type><name>pX</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_value</name> *</type><name>pVal</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>interp</name> = (<name>Tcl_Interp</name> *)<call><name>sqlite3_user_data</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pX</name> = <call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr>"test_function"</expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_IncrRefCount</name><argument_list>(<argument><expr><name>pX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>pX</name></expr></argument>, <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr>"UTF-16BE"</expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>pX</name></expr></argument>, 
      <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr>(<name>char</name>*)<call><name>sqlite3_value_text</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_EvalObjEx</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>pX</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_DecrRefCount</name><argument_list>(<argument><expr><name>pX</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pVal</name> = <call><name>sqlite3ValueNew</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3ValueSetStr</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><call><name>Tcl_GetStringResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr></argument>, 
      <argument><expr><name>SQLITE_UTF8</name></expr></argument>, <argument><expr><name>SQLITE_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_result_text16</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><call><name>sqlite3_value_text16le</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr></argument>,
      <argument><expr>-1</expr></argument>, <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_result_text16be</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><call><name>sqlite3_value_text16le</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr></argument>,
      <argument><expr>-1</expr></argument>, <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_result_text16le</name><argument_list>(<argument><expr><name>pCtx</name></expr></argument>, <argument><expr><call><name>sqlite3_value_text16le</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr></argument>,
      <argument><expr>-1</expr></argument>, <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3ValueFree</name><argument_list>(<argument><expr><name>pVal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_UTF16 */</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_function</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_UTF16</name></cpp:ifndef>
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=5</expr> )</condition><then> <goto>goto <name>bad_args</name>;</goto></then></if>
  <if>if<condition>( <expr><call><name>getDbPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>db</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>

  <if>if<condition>( <expr><name>TCL_OK</name>!=<call><name>Tcl_GetBooleanFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr><name>val</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>sqlite3_create_function</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr>"test_function"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>SQLITE_UTF8</name></expr></argument>, 
        <argument><expr><name>interp</name></expr></argument>, <argument><expr><name>test_function_utf8</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <if>if<condition>( <expr><name>TCL_OK</name>!=<call><name>Tcl_GetBooleanFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>3</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr><name>val</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>sqlite3_create_function</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr>"test_function"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>SQLITE_UTF16LE</name></expr></argument>, 
        <argument><expr><name>interp</name></expr></argument>, <argument><expr><name>test_function_utf16le</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <if>if<condition>( <expr><name>TCL_OK</name>!=<call><name>Tcl_GetBooleanFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>4</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr><name>val</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>sqlite3_create_function</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr>"test_function"</expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>SQLITE_UTF16BE</name></expr></argument>, 
        <argument><expr><name>interp</name></expr></argument>, <argument><expr><name>test_function_utf16be</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <return>return <expr><name>TCL_OK</name></expr>;</return>
<label><name>bad_args</name>:</label>
  <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>,
      <argument><expr><call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>" &lt;DB&gt; &lt;utf8&gt; &lt;utf16le&gt; &lt;utf16be&gt;"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_UTF16 */</comment>
  <return>return <expr><name>TCL_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage:         test_errstr &lt;err code&gt;
**
** Test that the english language string equivalents for sqlite error codes
** are sane. The parameter is an integer representing an sqlite error code.
** The result is a list of two elements, the string representation of the
** error code and the english language explanation.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_errstr</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>char</name> *</type><name>zCode</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>objc</name>!=1</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr>"&lt;error code&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <expr_stmt><expr><name>zCode</name> = <call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;200</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
    <if>if<condition>( <expr>0==<call><name>strcmp</name><argument_list>(<argument><expr><call><name>t1ErrorName</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>zCode</name></expr></argument>)</argument_list></call></expr> )</condition><then> <break>break;</break></then></if>
  }</block></for>
  <expr_stmt><expr><call><name>Tcl_SetResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>(<name>char</name> *)<call><name>sqlite3ErrStr</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage:    breakpoint
**
** This routine exists for one purpose - to provide a place to put a
** breakpoint with GDB that can be triggered using TCL code.  The use
** for this is when a particular test fails on (say) the 1485th iteration.
** In the TCL test script, we can add code like this:
**
**     if {$i==1485} breakpoint
**
** Then run testfixture in the debugger and wait for the breakpoint to
** fire.  Then additional breakpoints can be set to trace down the bug.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_breakpoint</name><parameter_list>(
  <param><decl><type><name>void</name> *</type><name>NotUsed</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>            <comment type="block">/* Text of each argument */</comment>
)</parameter_list><block>{
  <return>return <expr><name>TCL_OK</name></expr>;</return>         <comment type="block">/* Do nothing */</comment>
}</block></function>

<comment type="block">/*
** Usage:   sqlite3_bind_zeroblob  STMT IDX N
**
** Test the sqlite3_bind_zeroblob interface.  STMT is a prepared statement.
** IDX is the index of a wildcard in the prepared statement.  This command
** binds a N-byte zero-filled BLOB to the wildcard.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_bind_zeroblob</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3_stmt</name> *</type><name>pStmt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>n</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=4</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr>"STMT IDX N"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>

  <if>if<condition>( <expr><call><name>getStmtPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr><call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>idx</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr><call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>3</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>n</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_bind_zeroblob</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>n</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><call><name>sqlite3TestErrCode</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>StmtToDb</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_OK</name></expr> )</condition><then><block>{
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>

  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage:   sqlite3_bind_int  STMT N VALUE
**
** Test the sqlite3_bind_int interface.  STMT is a prepared statement.
** N is the index of a wildcard in the prepared statement.  This command
** binds a 32-bit integer VALUE to that wildcard.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_bind_int</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3_stmt</name> *</type><name>pStmt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>value</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=4</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>,
        <argument><expr><call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>" STMT N VALUE"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>

  <if>if<condition>( <expr><call><name>getStmtPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr><call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>idx</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr><call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>3</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_bind_int</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><call><name>sqlite3TestErrCode</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>StmtToDb</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_OK</name></expr> )</condition><then><block>{
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>

  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>


<comment type="block">/*
** Usage:   sqlite3_bind_int64  STMT N VALUE
**
** Test the sqlite3_bind_int64 interface.  STMT is a prepared statement.
** N is the index of a wildcard in the prepared statement.  This command
** binds a 64-bit integer VALUE to that wildcard.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_bind_int64</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3_stmt</name> *</type><name>pStmt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>value</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=4</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>,
        <argument><expr><call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>" STMT N VALUE"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>

  <if>if<condition>( <expr><call><name>getStmtPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr><call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>idx</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr><call><name>Tcl_GetWideIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>3</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_bind_int64</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><call><name>sqlite3TestErrCode</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>StmtToDb</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_OK</name></expr> )</condition><then><block>{
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>

  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>


<comment type="block">/*
** Usage:   sqlite3_bind_double  STMT N VALUE
**
** Test the sqlite3_bind_double interface.  STMT is a prepared statement.
** N is the index of a wildcard in the prepared statement.  This command
** binds a 64-bit integer VALUE to that wildcard.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_bind_double</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3_stmt</name> *</type><name>pStmt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>value</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>zVal</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>static</name> <name>const</name> <struct>struct <block>{<public type="default"/>
    <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>zName</name></decl>;</decl_stmt>     <comment type="block">/* Name of the special floating point value */</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>iUpper</name></decl>;</decl_stmt>   <comment type="block">/* Upper 32 bits */</comment>
    <decl_stmt><decl><type><name>unsigned</name> <name>int</name></type> <name>iLower</name></decl>;</decl_stmt>   <comment type="block">/* Lower 32 bits */</comment>
  }</block> <decl><name><name>aSpecialFp</name><index>[]</index></name> =<init> <expr><block>{
    <expr><block>{  <expr>"NaN"</expr>,      <expr>0x7fffffff</expr>, <expr>0xffffffff</expr> }</block></expr>,
    <expr><block>{  <expr>"SNaN"</expr>,     <expr>0x7ff7ffff</expr>, <expr>0xffffffff</expr> }</block></expr>,
    <expr><block>{  <expr>"-NaN"</expr>,     <expr>0xffffffff</expr>, <expr>0xffffffff</expr> }</block></expr>,
    <expr><block>{  <expr>"-SNaN"</expr>,    <expr>0xfff7ffff</expr>, <expr>0xffffffff</expr> }</block></expr>,
    <expr><block>{  <expr>"+Inf"</expr>,     <expr>0x7ff00000</expr>, <expr>0x00000000</expr> }</block></expr>,
    <expr><block>{  <expr>"-Inf"</expr>,     <expr>0xfff00000</expr>, <expr>0x00000000</expr> }</block></expr>,
    <expr><block>{  <expr>"Epsilon"</expr>,  <expr>0x00000000</expr>, <expr>0x00000001</expr> }</block></expr>,
    <expr><block>{  <expr>"-Epsilon"</expr>, <expr>0x80000000</expr>, <expr>0x00000001</expr> }</block></expr>,
    <expr><block>{  <expr>"NaN0"</expr>,     <expr>0x7ff80000</expr>, <expr>0x00000000</expr> }</block></expr>,
    <expr><block>{  <expr>"-NaN0"</expr>,    <expr>0xfff80000</expr>, <expr>0x00000000</expr> }</block></expr>,
  }</block></expr></init></decl>;</struct></type></decl></decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=4</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>,
        <argument><expr><call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>" STMT N VALUE"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>

  <if>if<condition>( <expr><call><name>getStmtPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr><call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>idx</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>

  <comment type="block">/* Intercept the string "NaN" and generate a NaN value for it.
  ** All other strings are passed through to Tcl_GetDoubleFromObj().
  ** Tcl_GetDoubleFromObj() should understand "NaN" but some versions
  ** contain a bug.
  */</comment>
  <expr_stmt><expr><name>zVal</name> = <call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>3</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<call><name>sizeof</name><argument_list>(<argument><expr><name>aSpecialFp</name></expr></argument>)</argument_list></call>/<call><name>sizeof</name><argument_list>(<argument><expr><name><name>aSpecialFp</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
    <if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>aSpecialFp</name><index>[<expr><name>i</name></expr>]</index></name>.<name>zName</name></expr></argument>, <argument><expr><name>zVal</name></expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
      <decl_stmt><decl><type><name>sqlite3_uint64</name></type> <name>x</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>x</name> = <name><name>aSpecialFp</name><index>[<expr><name>i</name></expr>]</index></name>.<name>iUpper</name></expr>;</expr_stmt>
      <expr_stmt><expr><name>x</name> &lt;&lt;= 32</expr>;</expr_stmt>
      <expr_stmt><expr><name>x</name> |= <name><name>aSpecialFp</name><index>[<expr><name>i</name></expr>]</index></name>.<name>iLower</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>value</name></expr></argument>)</argument_list></call>==8</expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>x</name></expr></argument>)</argument_list></call>==8</expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>&amp;<name>value</name></expr></argument>, <argument><expr>&amp;<name>x</name></expr></argument>, <argument><expr>8</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <break>break;</break>
    }</block></then></if>
  }</block></for>
  <if>if<condition>( <expr><name>i</name>&gt;=<call><name>sizeof</name><argument_list>(<argument><expr><name>aSpecialFp</name></expr></argument>)</argument_list></call>/<call><name>sizeof</name><argument_list>(<argument><expr><name><name>aSpecialFp</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call> &amp;&amp;
         <call><name>Tcl_GetDoubleFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>3</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>value</name></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_bind_double</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>value</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><call><name>sqlite3TestErrCode</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>StmtToDb</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_OK</name></expr> )</condition><then><block>{
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>

  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage:   sqlite3_bind_null  STMT N
**
** Test the sqlite3_bind_null interface.  STMT is a prepared statement.
** N is the index of a wildcard in the prepared statement.  This command
** binds a NULL to the wildcard.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_bind_null</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3_stmt</name> *</type><name>pStmt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=3</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>,
        <argument><expr><call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>" STMT N"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>

  <if>if<condition>( <expr><call><name>getStmtPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr><call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>idx</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_bind_null</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><call><name>sqlite3TestErrCode</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>StmtToDb</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_OK</name></expr> )</condition><then><block>{
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>

  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage:   sqlite3_bind_text  STMT N STRING BYTES
**
** Test the sqlite3_bind_text interface.  STMT is a prepared statement.
** N is the index of a wildcard in the prepared statement.  This command
** binds a UTF-8 string STRING to the wildcard.  The string is BYTES bytes
** long.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_bind_text</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3_stmt</name> *</type><name>pStmt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bytes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>value</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=5</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>,
        <argument><expr><call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>" STMT N VALUE BYTES"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>

  <if>if<condition>( <expr><call><name>getStmtPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr><call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>idx</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><name>value</name> = (<name>char</name>*)<call><name>Tcl_GetByteArrayFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>3</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>bytes</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>4</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>bytes</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_bind_text</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>SQLITE_TRANSIENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><call><name>sqlite3TestErrCode</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>StmtToDb</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_OK</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>sqlite3TestErrorName</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>

  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage:   sqlite3_bind_text16 ?-static? STMT N STRING BYTES
**
** Test the sqlite3_bind_text16 interface.  STMT is a prepared statement.
** N is the index of a wildcard in the prepared statement.  This command
** binds a UTF-16 string STRING to the wildcard.  The string is BYTES bytes
** long.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_bind_text16</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_UTF16</name></cpp:ifndef>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> *</type><name>pStmt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bytes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>value</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <function_decl><type><name>void</name></type> (*<name>xDel</name>)<parameter_list>()</parameter_list> <specifier/>= (<specifier>objc</specifier>==6?<specifier>SQLITE_STATIC</specifier>:<specifier>SQLITE_TRANSIENT</specifier></function_decl>)</block>;</function>
  <decl_stmt><decl><type><name>Tcl_Obj</name> *</type><name>oStmt</name>    =<init> <expr><name><name>objv</name><index>[<expr><name>objc</name>-4</expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Tcl_Obj</name> *</type><name>oN</name>       =<init> <expr><name><name>objv</name><index>[<expr><name>objc</name>-3</expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Tcl_Obj</name> *</type><name>oString</name>  =<init> <expr><name><name>objv</name><index>[<expr><name>objc</name>-2</expr>]</index></name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Tcl_Obj</name> *</type><name>oBytes</name>   =<init> <expr><name><name>objv</name><index>[<expr><name>objc</name>-1</expr>]</index></name></expr></init></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=5 &amp;&amp; <name>objc</name>!=6</expr>)</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>,
        <argument><expr><call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>" STMT N VALUE BYTES"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>

  <if>if<condition>( <expr><call><name>getStmtPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name>oStmt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr><call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>oN</name></expr></argument>, <argument><expr>&amp;<name>idx</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><name>value</name> = (<name>char</name>*)<call><name>Tcl_GetByteArrayFromObj</name><argument_list>(<argument><expr><name>oString</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>oBytes</name></expr></argument>, <argument><expr>&amp;<name>bytes</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_bind_text16</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr>(<name>void</name> *)<name>value</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>xDel</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><call><name>sqlite3TestErrCode</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>StmtToDb</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_OK</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>sqlite3TestErrorName</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_UTF16 */</comment>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}<parse/>

<comment type="block">/*
** Usage:   sqlite3_bind_blob ?-static? STMT N DATA BYTES
**
** Test the sqlite3_bind_blob interface.  STMT is a prepared statement.
** N is the index of a wildcard in the prepared statement.  This command
** binds a BLOB to the wildcard.  The BLOB is BYTES bytes in size.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_bind_blob</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3_stmt</name> *</type><name>pStmt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>idx</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bytes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> *</type><name>value</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_destructor_type</name></type> <name>xDestructor</name> =<init> <expr><name>SQLITE_TRANSIENT</name></expr></init></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=5 &amp;&amp; <name>objc</name>!=6</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>,
        <argument><expr><call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>" STMT N DATA BYTES"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>

  <if>if<condition>( <expr><name>objc</name>==6</expr> )</condition><then><block>{
    <expr_stmt><expr><name>xDestructor</name> = <name>SQLITE_STATIC</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>objv</name>++</expr>;</expr_stmt>
  }</block></then></if>

  <if>if<condition>( <expr><call><name>getStmtPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr><call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>idx</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><name>value</name> = <call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>3</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>4</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>bytes</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_bind_blob</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>idx</name></expr></argument>, <argument><expr><name>value</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr><name>xDestructor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><call><name>sqlite3TestErrCode</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>StmtToDb</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_OK</name></expr> )</condition><then><block>{
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>

  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage:   sqlite3_bind_parameter_count  STMT
**
** Return the number of wildcards in the given statement.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_bind_parameter_count</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3_stmt</name> *</type><name>pStmt</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=2</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr>"STMT"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>getStmtPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_NewIntObj</name><argument_list>(<argument><expr><call><name>sqlite3_bind_parameter_count</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage:   sqlite3_bind_parameter_name  STMT  N
**
** Return the name of the Nth wildcard.  The first wildcard is 1.
** An empty string is returned if N is out of range or if the wildcard
** is nameless.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_bind_parameter_name</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3_stmt</name> *</type><name>pStmt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=3</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr>"STMT N"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>getStmtPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr><call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>i</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, 
     <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><call><name>sqlite3_bind_parameter_name</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>,<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></argument>,<argument><expr>-1</expr></argument>)</argument_list></call></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage:   sqlite3_bind_parameter_index  STMT  NAME
**
** Return the index of the wildcard called NAME.  Return 0 if there is
** no such wildcard.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_bind_parameter_index</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3_stmt</name> *</type><name>pStmt</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=3</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr>"STMT NAME"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>getStmtPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, 
     <argument><expr><call><name>Tcl_NewIntObj</name><argument_list>(
       <argument><expr><call><name>sqlite3_bind_parameter_index</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>,<argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>
     )</argument_list></call></expr></argument>
  )</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage:   sqlite3_clear_bindings STMT
**
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_clear_bindings</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3_stmt</name> *</type><name>pStmt</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=2</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr>"STMT"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>getStmtPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_NewIntObj</name><argument_list>(<argument><expr><call><name>sqlite3_clear_bindings</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage:   sqlite3_sleep MILLISECONDS
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_sleep</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>ms</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=2</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr>"MILLISECONDS"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>ms</name></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_NewIntObj</name><argument_list>(<argument><expr><call><name>sqlite3_sleep</name><argument_list>(<argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage: sqlite3_extended_errcode DB
**
** Return the string representation of the most recent sqlite3_* API
** error code. e.g. "SQLITE_ERROR".
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_ex_errcode</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=2</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, 
       <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>" DB"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>getDbPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>db</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_extended_errcode</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>(<name>char</name> *)<call><name>t1ErrorName</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>


<comment type="block">/*
** Usage: sqlite3_errcode DB
**
** Return the string representation of the most recent sqlite3_* API
** error code. e.g. "SQLITE_ERROR".
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_errcode</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=2</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, 
       <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>" DB"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>getDbPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>db</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_errcode</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>(<name>char</name> *)<call><name>t1ErrorName</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage:   test_errmsg DB
**
** Returns the UTF-8 representation of the error message string for the
** most recent sqlite3_* API call.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_errmsg</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>zErr</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=2</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, 
       <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>" DB"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>getDbPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>db</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><name>zErr</name> = <call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name>zErr</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage:   test_errmsg16 DB
**
** Returns the UTF-16 representation of the error message string for the
** most recent sqlite3_* API call. This is a byte array object at the TCL 
** level, and it includes the 0x00 0x00 terminator bytes at the end of the
** UTF-16 string.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_errmsg16</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_UTF16</name></cpp:ifndef>
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>const</name> <name>void</name> *</type><name>zErr</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bytes</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=2</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, 
       <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>" DB"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>getDbPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>db</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><name>zErr</name> = <call><name>sqlite3_errmsg16</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>zErr</name></expr> )</condition><then><block>{
    <expr_stmt><expr><name>bytes</name> = <call><name>sqlite3Utf16ByteLen</name><argument_list>(<argument><expr><name>zErr</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_NewByteArrayObj</name><argument_list>(<argument><expr><name>zErr</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_UTF16 */</comment>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage: sqlite3_prepare DB sql bytes ?tailvar?
**
** Compile up to &lt;bytes&gt; bytes of the supplied SQL string &lt;sql&gt; using
** database handle &lt;DB&gt;. The parameter &lt;tailval&gt; is the name of a global
** variable that is set to the unused portion of &lt;sql&gt; (if any). A
** STMT handle is returned.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_prepare</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>zSql</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bytes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>zTail</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> *</type><name>pStmt</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr>50</expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=5 &amp;&amp; <name>objc</name>!=4</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, 
       <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>" DB sql bytes ?tailvar?"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>getDbPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>db</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><name>zSql</name> = <call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>3</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>bytes</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_prepare</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr>&amp;<name>pStmt</name></expr></argument>, <argument><expr><name>objc</name>&gt;=5 ? &amp;<name>zTail</name> : 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><call><name>sqlite3TestErrCode</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr><name>zTail</name> &amp;&amp; <name>objc</name>&gt;=5</expr> )</condition><then><block>{
    <if>if<condition>( <expr><name>bytes</name>&gt;=0</expr> )</condition><then><block>{
      <expr_stmt><expr><name>bytes</name> = <name>bytes</name> - (<name>zTail</name>-<name>zSql</name>)</expr>;</expr_stmt>
    }</block></then></if>
    <if>if<condition>( <expr><call><name>strlen</name><argument_list>(<argument><expr><name>zTail</name></expr></argument>)</argument_list></call>&lt;<name>bytes</name></expr> )</condition><then><block>{
      <expr_stmt><expr><name>bytes</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>zTail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>Tcl_ObjSetVar2</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>4</expr>]</index></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name>zTail</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_OK</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pStmt</name>==0</expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>, <argument><expr>"(%d) "</expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>

  <if>if<condition>( <expr><name>pStmt</name></expr> )</condition><then><block>{
    <if>if<condition>( <expr><call><name>sqlite3TestMakePointerStr</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage: sqlite3_prepare_v2 DB sql bytes ?tailvar?
**
** Compile up to &lt;bytes&gt; bytes of the supplied SQL string &lt;sql&gt; using
** database handle &lt;DB&gt;. The parameter &lt;tailval&gt; is the name of a global
** variable that is set to the unused portion of &lt;sql&gt; (if any). A
** STMT handle is returned.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_prepare_v2</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>zSql</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bytes</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>zTail</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> *</type><name>pStmt</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr>50</expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=5 &amp;&amp; <name>objc</name>!=4</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, 
       <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>" DB sql bytes tailvar"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>getDbPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>db</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><name>zSql</name> = <call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>3</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>bytes</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr>&amp;<name>pStmt</name></expr></argument>, <argument><expr><name>objc</name>&gt;=5 ? &amp;<name>zTail</name> : 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rc</name>==<name>SQLITE_OK</name> || <name>pStmt</name>==0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><call><name>sqlite3TestErrCode</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr><name>zTail</name> &amp;&amp; <name>objc</name>&gt;=5</expr> )</condition><then><block>{
    <if>if<condition>( <expr><name>bytes</name>&gt;=0</expr> )</condition><then><block>{
      <expr_stmt><expr><name>bytes</name> = <name>bytes</name> - (<name>zTail</name>-<name>zSql</name>)</expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>Tcl_ObjSetVar2</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>4</expr>]</index></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name>zTail</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_OK</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pStmt</name>==0</expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>, <argument><expr>"(%d) "</expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>

  <if>if<condition>( <expr><name>pStmt</name></expr> )</condition><then><block>{
    <if>if<condition>( <expr><call><name>sqlite3TestMakePointerStr</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage: sqlite3_prepare_tkt3134 DB
**
** Generate a prepared statement for a zero-byte string as a test
** for ticket #3134.  The string should be preceeded by a zero byte.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_prepare_tkt3134</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>static</name> <name>const</name> <name>char</name></type> <name><name>zSql</name><index>[]</index></name> =<init> <expr>"\000SELECT 1"</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> *</type><name>pStmt</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr>50</expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=2</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, 
       <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>" DB sql bytes tailvar"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>getDbPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>db</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr>&amp;<name><name>zSql</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>pStmt</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr><name>rc</name>==<name>SQLITE_OK</name> || <name>pStmt</name>==0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><call><name>sqlite3TestErrCode</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_OK</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pStmt</name>==0</expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>, <argument><expr>"(%d) "</expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>

  <if>if<condition>( <expr><name>pStmt</name></expr> )</condition><then><block>{
    <if>if<condition>( <expr><call><name>sqlite3TestMakePointerStr</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage: sqlite3_prepare16 DB sql bytes tailvar
**
** Compile up to &lt;bytes&gt; bytes of the supplied SQL string &lt;sql&gt; using
** database handle &lt;DB&gt;. The parameter &lt;tailval&gt; is the name of a global
** variable that is set to the unused portion of &lt;sql&gt; (if any). A
** STMT handle is returned.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_prepare16</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_UTF16</name></cpp:ifndef>
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>const</name> <name>void</name> *</type><name>zSql</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>const</name> <name>void</name> *</type><name>zTail</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Tcl_Obj</name> *</type><name>pTail</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> *</type><name>pStmt</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr>50</expr>]</index></name></decl>;</decl_stmt> 
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bytes</name></decl>;</decl_stmt>                <comment type="block">/* The integer specified as arg 3 */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>objlen</name></decl>;</decl_stmt>               <comment type="block">/* The byte-array length of arg 2 */</comment>

  <if>if<condition>( <expr><name>objc</name>!=5 &amp;&amp; <name>objc</name>!=4</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, 
       <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>" DB sql bytes ?tailvar?"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>getDbPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>db</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><name>zSql</name> = <call><name>Tcl_GetByteArrayFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>objlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>3</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>bytes</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_prepare16</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr>&amp;<name>pStmt</name></expr></argument>, <argument><expr><name>objc</name>&gt;=5 ? &amp;<name>zTail</name> : 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><call><name>sqlite3TestErrCode</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr><name>rc</name></expr> )</condition><then><block>{
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>

  <if>if<condition>( <expr><name>objc</name>&gt;=5</expr> )</condition><then><block>{
    <if>if<condition>( <expr><name>zTail</name></expr> )</condition><then><block>{
      <expr_stmt><expr><name>objlen</name> = <name>objlen</name> - ((<name>u8</name> *)<name>zTail</name>-(<name>u8</name> *)<name>zSql</name>)</expr>;</expr_stmt>
    }</block></then><else>else<block>{
      <expr_stmt><expr><name>objlen</name> = 0</expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><name>pTail</name> = <call><name>Tcl_NewByteArrayObj</name><argument_list>(<argument><expr>(<name>u8</name> *)<name>zTail</name></expr></argument>, <argument><expr><name>objlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Tcl_IncrRefCount</name><argument_list>(<argument><expr><name>pTail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Tcl_ObjSetVar2</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>4</expr>]</index></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pTail</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Tcl_DecrRefCount</name><argument_list>(<argument><expr><name>pTail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <if>if<condition>( <expr><name>pStmt</name></expr> )</condition><then><block>{
    <if>if<condition>( <expr><call><name>sqlite3TestMakePointerStr</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  }</block></then></if>
  <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_UTF16 */</comment>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage: sqlite3_prepare16_v2 DB sql bytes ?tailvar?
**
** Compile up to &lt;bytes&gt; bytes of the supplied SQL string &lt;sql&gt; using
** database handle &lt;DB&gt;. The parameter &lt;tailval&gt; is the name of a global
** variable that is set to the unused portion of &lt;sql&gt; (if any). A
** STMT handle is returned.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_prepare16_v2</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_UTF16</name></cpp:ifndef>
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>const</name> <name>void</name> *</type><name>zSql</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>const</name> <name>void</name> *</type><name>zTail</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Tcl_Obj</name> *</type><name>pTail</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> *</type><name>pStmt</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr>50</expr>]</index></name></decl>;</decl_stmt> 
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>bytes</name></decl>;</decl_stmt>                <comment type="block">/* The integer specified as arg 3 */</comment>
  <decl_stmt><decl><type><name>int</name></type> <name>objlen</name></decl>;</decl_stmt>               <comment type="block">/* The byte-array length of arg 2 */</comment>

  <if>if<condition>( <expr><name>objc</name>!=5 &amp;&amp; <name>objc</name>!=4</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, 
       <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>" DB sql bytes ?tailvar?"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>getDbPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>db</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><name>zSql</name> = <call><name>Tcl_GetByteArrayFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>objlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>3</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>bytes</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_prepare16_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr><name>bytes</name></expr></argument>, <argument><expr>&amp;<name>pStmt</name></expr></argument>, <argument><expr><name>objc</name>&gt;=5 ? &amp;<name>zTail</name> : 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><call><name>sqlite3TestErrCode</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>db</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr><name>rc</name></expr> )</condition><then><block>{
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>

  <if>if<condition>( <expr><name>objc</name>&gt;=5</expr> )</condition><then><block>{
    <if>if<condition>( <expr><name>zTail</name></expr> )</condition><then><block>{
      <expr_stmt><expr><name>objlen</name> = <name>objlen</name> - ((<name>u8</name> *)<name>zTail</name>-(<name>u8</name> *)<name>zSql</name>)</expr>;</expr_stmt>
    }</block></then><else>else<block>{
      <expr_stmt><expr><name>objlen</name> = 0</expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><name>pTail</name> = <call><name>Tcl_NewByteArrayObj</name><argument_list>(<argument><expr>(<name>u8</name> *)<name>zTail</name></expr></argument>, <argument><expr><name>objlen</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Tcl_IncrRefCount</name><argument_list>(<argument><expr><name>pTail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Tcl_ObjSetVar2</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>4</expr>]</index></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>pTail</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Tcl_DecrRefCount</name><argument_list>(<argument><expr><name>pTail</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>

  <if>if<condition>( <expr><name>pStmt</name></expr> )</condition><then><block>{
    <if>if<condition>( <expr><call><name>sqlite3TestMakePointerStr</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  }</block></then></if>
  <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_UTF16 */</comment>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage: sqlite3_open filename ?options-list?
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_open</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>zFilename</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr>100</expr>]</index></name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=3 &amp;&amp; <name>objc</name>!=2 &amp;&amp; <name>objc</name>!=1</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, 
       <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>" filename options-list"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><name>zFilename</name> = <name>objc</name>&gt;1 ? <call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call> : 0</expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_open</name><argument_list>(<argument><expr><name>zFilename</name></expr></argument>, <argument><expr>&amp;<name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if>if<condition>( <expr><call><name>sqlite3TestMakePointerStr</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage: sqlite3_open16 filename options
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_open16</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_UTF16</name></cpp:ifndef>
  <decl_stmt><decl><type><name>const</name> <name>void</name> *</type><name>zFilename</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr>100</expr>]</index></name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=3</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, 
       <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>" filename options-list"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><name>zFilename</name> = <call><name>Tcl_GetByteArrayFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_open16</name><argument_list>(<argument><expr><name>zFilename</name></expr></argument>, <argument><expr>&amp;<name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  
  <if>if<condition>( <expr><call><name>sqlite3TestMakePointerStr</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr><name>db</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_UTF16 */</comment>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage: sqlite3_complete16 &lt;UTF-16 string&gt;
**
** Return 1 if the supplied argument is a complete SQL statement, or zero
** otherwise.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_complete16</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_OMIT_COMPLETE</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_OMIT_UTF16</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>char</name> *</type><name>zBuf</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=2</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr>"&lt;utf-16 sql&gt;"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><name>zBuf</name> = (<name>char</name>*)<call><name>Tcl_GetByteArrayFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_NewIntObj</name><argument_list>(<argument><expr><call><name>sqlite3_complete16</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_COMPLETE &amp;&amp; SQLITE_OMIT_UTF16 */</comment>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage: sqlite3_step STMT
**
** Advance the statement to the next row.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_step</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3_stmt</name> *</type><name>pStmt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=2</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, 
       <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>" STMT"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>

  <if>if<condition>( <expr><call><name>getStmtPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* if( rc!=SQLITE_DONE &amp;&amp; rc!=SQLITE_ROW ) return TCL_ERROR; */</comment>
  <expr_stmt><expr><call><name>Tcl_SetResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>(<name>char</name> *)<call><name>t1ErrorName</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage: sqlite3_column_count STMT 
**
** Return the number of columns returned by the sql statement STMT.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_column_count</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3_stmt</name> *</type><name>pStmt</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=2</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, 
       <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>" STMT column"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>

  <if>if<condition>( <expr><call><name>getStmtPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_NewIntObj</name><argument_list>(<argument><expr><call><name>sqlite3_column_count</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage: sqlite3_column_type STMT column
**
** Return the type of the data in column 'column' of the current row.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_column_type</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3_stmt</name> *</type><name>pStmt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>tp</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=3</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, 
       <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>" STMT column"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>

  <if>if<condition>( <expr><call><name>getStmtPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr><call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>col</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><name>tp</name> = <call><name>sqlite3_column_type</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <switch>switch<condition>( <expr><name>tp</name></expr> )</condition><block>{
    <case>case <expr><name>SQLITE_INTEGER</name></expr>: 
      <expr_stmt><expr><call><name>Tcl_SetResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"INTEGER"</expr></argument>, <argument><expr><name>TCL_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      <break>break;</break>
    </case><case>case <expr><name>SQLITE_NULL</name></expr>:
      <expr_stmt><expr><call><name>Tcl_SetResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"NULL"</expr></argument>, <argument><expr><name>TCL_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      <break>break;</break>
    </case><case>case <expr><name>SQLITE_FLOAT</name></expr>:
      <expr_stmt><expr><call><name>Tcl_SetResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"FLOAT"</expr></argument>, <argument><expr><name>TCL_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      <break>break;</break>
    </case><case>case <expr><name>SQLITE_TEXT</name></expr>:
      <expr_stmt><expr><call><name>Tcl_SetResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"TEXT"</expr></argument>, <argument><expr><name>TCL_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      <break>break;</break>
    </case><case>case <expr><name>SQLITE_BLOB</name></expr>:
      <expr_stmt><expr><call><name>Tcl_SetResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"BLOB"</expr></argument>, <argument><expr><name>TCL_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> 
      <break>break;</break>
    </case><default>default:
      <expr_stmt><expr><call><name>assert</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  </default>}</block></switch>

  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage: sqlite3_column_int64 STMT column
**
** Return the data in column 'column' of the current row cast as an
** wide (64-bit) integer.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_column_int64</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3_stmt</name> *</type><name>pStmt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>i64</name></type> <name>iVal</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=3</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, 
       <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>" STMT column"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>

  <if>if<condition>( <expr><call><name>getStmtPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr><call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>col</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><name>iVal</name> = <call><name>sqlite3_column_int64</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_NewWideIntObj</name><argument_list>(<argument><expr><name>iVal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage: sqlite3_column_blob STMT column
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_column_blob</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3_stmt</name> *</type><name>pStmt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>len</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>const</name> <name>void</name> *</type><name>pBlob</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=3</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, 
       <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>" STMT column"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>

  <if>if<condition>( <expr><call><name>getStmtPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr><call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>col</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><name>len</name> = <call><name>sqlite3_column_bytes</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>pBlob</name> = <call><name>sqlite3_column_blob</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_NewByteArrayObj</name><argument_list>(<argument><expr><name>pBlob</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage: sqlite3_column_double STMT column
**
** Return the data in column 'column' of the current row cast as a double.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_column_double</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3_stmt</name> *</type><name>pStmt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>double</name></type> <name>rVal</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=3</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, 
       <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>" STMT column"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>

  <if>if<condition>( <expr><call><name>getStmtPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr><call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>col</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><name>rVal</name> = <call><name>sqlite3_column_double</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_NewDoubleObj</name><argument_list>(<argument><expr><name>rVal</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage: sqlite3_data_count STMT 
**
** Return the number of columns returned by the sql statement STMT.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_data_count</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3_stmt</name> *</type><name>pStmt</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=2</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, 
       <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>" STMT column"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>

  <if>if<condition>( <expr><call><name>getStmtPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_NewIntObj</name><argument_list>(<argument><expr><call><name>sqlite3_data_count</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage: sqlite3_column_text STMT column
**
** Usage: sqlite3_column_decltype STMT column
**
** Usage: sqlite3_column_name STMT column
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_stmt_utf8</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,        <comment type="block">/* Pointer to SQLite API function to be invoke */</comment>
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3_stmt</name> *</type><name>pStmt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>
  <function_decl><type><name>const</name> <name>char</name> *</type>(*<name>xFunc</name>)<parameter_list>(<param><decl><type><name>sqlite3_stmt</name>*</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>zRet</name></decl>;</decl_stmt>

  <expr_stmt><expr><name>xFunc</name> = (<name>const</name> <name>char</name> *(*)(<name>sqlite3_stmt</name>*, <name>int</name>))<name>clientData</name></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>objc</name>!=3</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, 
       <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>" STMT column"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>

  <if>if<condition>( <expr><call><name>getStmtPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr><call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>col</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><name>zRet</name> = <call><name>xFunc</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>zRet</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_SetResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>(<name>char</name> *)<name>zRet</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<function><type><name>static</name> <name>int</name></type> <name>test_global_recover</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_GLOBALRECOVER</name></cpp:ifndef>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_DEPRECATED</name></cpp:ifndef>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>objc</name>!=1</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_global_recover</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_SetResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>(<name>char</name> *)<call><name>t1ErrorName</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TCL_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage: sqlite3_column_text STMT column
**
** Usage: sqlite3_column_decltype STMT column
**
** Usage: sqlite3_column_name STMT column
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_stmt_utf16</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,     <comment type="block">/* Pointer to SQLite API function to be invoked */</comment>
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_UTF16</name></cpp:ifndef>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> *</type><name>pStmt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Tcl_Obj</name> *</type><name>pRet</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>const</name> <name>void</name> *</type><name>zName16</name></decl>;</decl_stmt>
  <function_decl><type><name>const</name> <name>void</name> *</type>(*<name>xFunc</name>)<parameter_list>(<param><decl><type><name>sqlite3_stmt</name>*</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>

  <expr_stmt><expr><name>xFunc</name> = (<name>const</name> <name>void</name> *(*)(<name>sqlite3_stmt</name>*, <name>int</name>))<name>clientData</name></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>objc</name>!=3</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, 
       <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>" STMT column"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>

  <if>if<condition>( <expr><call><name>getStmtPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr><call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>col</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><name>zName16</name> = <call><name>xFunc</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>zName16</name></expr> )</condition><then><block>{
    <expr_stmt><expr><name>pRet</name> = <call><name>Tcl_NewByteArrayObj</name><argument_list>(<argument><expr><name>zName16</name></expr></argument>, <argument><expr><call><name>sqlite3Utf16ByteLen</name><argument_list>(<argument><expr><name>zName16</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call>+2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>pRet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_UTF16 */</comment>

  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage: sqlite3_column_int STMT column
**
** Usage: sqlite3_column_bytes STMT column
**
** Usage: sqlite3_column_bytes16 STMT column
**
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_stmt_int</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,    <comment type="block">/* Pointer to SQLite API function to be invoked */</comment>
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3_stmt</name> *</type><name>pStmt</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>col</name></decl>;</decl_stmt>
  <function_decl><type><name>int</name></type> (*<name>xFunc</name>)<parameter_list>(<param><decl><type><name>sqlite3_stmt</name>*</type></decl></param>, <param><decl><type><name>int</name></type></decl></param>)</parameter_list>;</function_decl>

  <expr_stmt><expr><name>xFunc</name> = (<call><name>int</name> <argument_list>(<argument><expr>*</expr></argument>)</argument_list></call>(<name>sqlite3_stmt</name>*, <name>int</name>))<name>clientData</name></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>objc</name>!=3</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, 
       <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>" STMT column"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>

  <if>if<condition>( <expr><call><name>getStmtPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>pStmt</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr><call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>col</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>

  <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_NewIntObj</name><argument_list>(<argument><expr><call><name>xFunc</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>col</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage:  sqlite_set_magic  DB  MAGIC-NUMBER
**
** Set the db-&gt;magic value.  This is used to test error recovery logic.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>sqlite_set_magic</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,
  <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>argc</name>!=3</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>,
         <argument><expr>" DB MAGIC"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>getDbPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>db</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>"SQLITE_MAGIC_OPEN"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
    <expr_stmt><expr><name>db</name>-&gt;<name>magic</name> = <name>SQLITE_MAGIC_OPEN</name></expr>;</expr_stmt>
  }</block></then><else>else <if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>"SQLITE_MAGIC_CLOSED"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
    <expr_stmt><expr><name>db</name>-&gt;<name>magic</name> = <name>SQLITE_MAGIC_CLOSED</name></expr>;</expr_stmt>
  }</block></then><else>else <if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>"SQLITE_MAGIC_BUSY"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
    <expr_stmt><expr><name>db</name>-&gt;<name>magic</name> = <name>SQLITE_MAGIC_BUSY</name></expr>;</expr_stmt>
  }</block></then><else>else <if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name><name>argv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>"SQLITE_MAGIC_ERROR"</expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
    <expr_stmt><expr><name>db</name>-&gt;<name>magic</name> = <name>SQLITE_MAGIC_ERROR</name></expr>;</expr_stmt>
  }</block></then><else>else <if>if<condition>( <expr><call><name>Tcl_GetInt</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>(<name>int</name>*)&amp;<name>db</name>-&gt;<name>magic</name></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if></else></if></else></if></else></if></else></if>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage:  sqlite3_interrupt  DB 
**
** Trigger an interrupt on DB
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_interrupt</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,
  <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>argc</name>!=2</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>" DB"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>getDbPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>db</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><call><name>sqlite3_interrupt</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<decl_stmt><decl><type><name>static</name> <name>u8</name> *</type><name>sqlite3_stack_baseline</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

<comment type="block">/*
** Fill the stack with a known bitpattern.
*/</comment>
<function><type><name>static</name> <name>void</name></type> <name>prepStack</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>u32</name></type> <name><name>bigBuf</name><index>[<expr>65536</expr>]</index></name></decl>;</decl_stmt>
  <for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<call><name>sizeof</name><argument_list>(<argument><expr><name>bigBuf</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <expr_stmt><expr><name><name>bigBuf</name><index>[<expr><name>i</name></expr>]</index></name> = 0xdeadbeef</expr>;</expr_stmt></for>
  <expr_stmt><expr><name>sqlite3_stack_baseline</name> = (<name>u8</name>*)&amp;<name><name>bigBuf</name><index>[<expr>65536</expr>]</index></name></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
** Get the current stack depth.  Used for debugging only.
*/</comment>
<function><type><name>u64</name></type> <name>sqlite3StackDepth</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>u8</name></type> <name>x</name></decl>;</decl_stmt>
  <return>return <expr>(<name>u64</name>)(<name>sqlite3_stack_baseline</name> - &amp;<name>x</name>)</expr>;</return>
}</block></function>

<comment type="block">/*
** Usage:  sqlite3_stack_used DB SQL
**
** Try to measure the amount of stack space used by a call to sqlite3_exec
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_stack_used</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,
  <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>argc</name>!=3</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>, 
        <argument><expr>" DB SQL"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>getDbPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>db</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><call><name>prepStack</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr>(<name>void</name>)<call><name>sqlite3_exec</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for(<init><expr><name>i</name>=65535</expr>;</init> <condition><expr><name>i</name>&gt;=0 &amp;&amp; ((<name>u32</name>*)<name>sqlite3_stack_baseline</name>)[-<name>i</name>]==0xdeadbeef</expr>;</condition> <incr><expr><name>i</name>--</expr></incr>)<block>{}</block></for>
  <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_NewIntObj</name><argument_list>(<argument><expr><name>i</name>*4</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage: sqlite_delete_function DB function-name
**
** Delete the user function 'function-name' from database handle DB. It
** is assumed that the user function was created as UTF8, any number of
** arguments (the way the TCL interface does it).
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>delete_function</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,
  <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>argc</name>!=3</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>, 
        <argument><expr>" DB function-name"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>getDbPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>db</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_create_function</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr><name>SQLITE_UTF8</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_SetResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>(<name>char</name> *)<call><name>t1ErrorName</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TCL_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage: sqlite_delete_collation DB collation-name
**
** Delete the collation sequence 'collation-name' from database handle 
** DB. It is assumed that the collation sequence was created as UTF8 (the 
** way the TCL interface does it).
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>delete_collation</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,
  <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>argc</name>!=3</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>, 
        <argument><expr>" DB function-name"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>getDbPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>db</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_create_collation</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr><name>SQLITE_UTF8</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_SetResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>(<name>char</name> *)<call><name>t1ErrorName</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>TCL_STATIC</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage: sqlite3_get_autocommit DB
**
** Return true if the database DB is currently in auto-commit mode.
** Return false if not.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>get_autocommit</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,
  <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>char</name></type> <name><name>zBuf</name><index>[<expr>30</expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>argc</name>!=2</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>, 
        <argument><expr>" DB"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>getDbPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>db</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>zBuf</name></expr></argument>, <argument><expr>"%d"</expr></argument>, <argument><expr><call><name>sqlite3_get_autocommit</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>zBuf</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage: sqlite3_busy_timeout DB MS
**
** Set the busy timeout.  This is more easily done using the timeout
** method of the TCL interface.  But we need a way to test the case
** where it returns SQLITE_MISUSE.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_busy_timeout</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>argc</name></decl></param>,
  <param><decl><type><name>char</name> **</type><name>argv</name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name>, <name>ms</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>argc</name>!=3</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>0</expr>]</index></name></expr></argument>, 
        <argument><expr>" DB"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>getDbPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>db</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr><call><name>Tcl_GetInt</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>argv</name><index>[<expr>2</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>ms</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_busy_timeout</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>ms</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>sqlite3TestErrorName</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage:  tcl_variable_type VARIABLENAME
**
** Return the name of the internal representation for the
** value of the given variable.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>tcl_variable_type</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>Tcl_Obj</name> *</type><name>pVar</name></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>objc</name>!=2</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr>"VARIABLE"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><name>pVar</name> = <call><name>Tcl_GetVar2Ex</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>TCL_LEAVE_ERR_MSG</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>pVar</name>==0</expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <if>if<condition>( <expr><name>pVar</name>-&gt;<name>typePtr</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name>pVar</name>-&gt;<name>typePtr</name>-&gt;<name>name</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage:  sqlite3_release_memory ?N?
**
** Attempt to release memory currently held but not actually required.
** The integer N is the number of bytes we are trying to release.  The 
** return value is the amount of memory actually released.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_release_memory</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_ENABLE_MEMORY_MANAGEMENT</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_OMIT_DISKIO</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>amt</name></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>objc</name>!=1 &amp;&amp; <name>objc</name>!=2</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr>"?N?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><name>objc</name>==2</expr> )</condition><then><block>{
    <if>if<condition>( <expr><call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>N</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  }</block></then><else>else<block>{
    <expr_stmt><expr><name>N</name> = -1</expr>;</expr_stmt>
  }</block></else></if>
  <expr_stmt><expr><name>amt</name> = <call><name>sqlite3_release_memory</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_NewIntObj</name><argument_list>(<argument><expr><name>amt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage:  sqlite3_soft_heap_limit ?N?
**
** Query or set the soft heap limit for the current thread.  The
** limit is only changed if the N is present.  The previous limit
** is returned.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_soft_heap_limit</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>static</name> <name>int</name></type> <name>softHeapLimit</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>amt</name></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>objc</name>!=1 &amp;&amp; <name>objc</name>!=2</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr>"?N?"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><name>amt</name> = <name>softHeapLimit</name></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>objc</name>==2</expr> )</condition><then><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>N</name></decl>;</decl_stmt>
    <if>if<condition>( <expr><call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>N</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
    <expr_stmt><expr><call><name>sqlite3_soft_heap_limit</name><argument_list>(<argument><expr><name>N</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>softHeapLimit</name> = <name>N</name></expr>;</expr_stmt>
  }</block></then></if>
  <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_NewIntObj</name><argument_list>(<argument><expr><name>amt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage:   sqlite3_thread_cleanup
**
** Call the sqlite3_thread_cleanup API.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_thread_cleanup</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_DEPRECATED</name></cpp:ifndef>
  <expr_stmt><expr><call><name>sqlite3_thread_cleanup</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Usage:   sqlite3_pager_refcounts  DB
**
** Return a list of numbers which are the PagerRefcount for all
** pagers on each database connection.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_pager_refcounts</name><parameter_list>(
  <param><decl><type><name>void</name> *</type> <name>clientData</name></decl></param>,
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>v</name>, *<name>a</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Tcl_Obj</name> *</type><name>pResult</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=2</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>,
        <argument><expr><call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>" DB"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>getDbPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>db</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><name>pResult</name> = <call><name>Tcl_NewObj</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<name>db</name>-&gt;<name>nDb</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
    <if>if<condition>( <expr><name>db</name>-&gt;<name><name>aDb</name><index>[<expr><name>i</name></expr>]</index></name>.<name>pBt</name>==0</expr> )</condition><then><block>{
      <expr_stmt><expr><name>v</name> = -1</expr>;</expr_stmt>
    }</block></then><else>else<block>{
      <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name>db</name>-&gt;<name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>a</name> = <call><name>sqlite3PagerStats</name><argument_list>(<argument><expr><call><name>sqlite3BtreePager</name><argument_list>(<argument><expr><name>db</name>-&gt;<name><name>aDb</name><index>[<expr><name>i</name></expr>]</index></name>.<name>pBt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>v</name> = <name><name>a</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name>db</name>-&gt;<name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>pResult</name></expr></argument>, <argument><expr><call><name>Tcl_NewIntObj</name><argument_list>(<argument><expr><name>v</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>pResult</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>


<comment type="block">/*
** tclcmd:   working_64bit_int
**
** Some TCL builds (ex: cygwin) do not support 64-bit integers.  This
** leads to a number of test failures.  The present command checks the
** TCL build to see whether or not it supports 64-bit integers.  It
** returns TRUE if it does and FALSE if not.
**
** This command is used to warn users that their TCL build is defective
** and that the errors they are seeing in the test scripts might be
** a result of their defective TCL rather than problems in SQLite.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>working_64bit_int</name><parameter_list>(
  <param><decl><type><name>ClientData</name></type> <name>clientData</name></decl></param>, <comment type="block">/* Pointer to sqlite3_enable_XXX function */</comment>
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>  <comment type="block">/* Command arguments */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>Tcl_Obj</name> *</type><name>pTestObj</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>working</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

  <expr_stmt><expr><name>pTestObj</name> = <call><name>Tcl_NewWideIntObj</name><argument_list>(<argument><expr>1000000*(<name>i64</name>)1234567890</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>working</name> = <call><name>strcmp</name><argument_list>(<argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name>pTestObj</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>"1234567890000000"</expr></argument>)</argument_list></call>==0</expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_DecrRefCount</name><argument_list>(<argument><expr><name>pTestObj</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_NewBooleanObj</name><argument_list>(<argument><expr><name>working</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>


<comment type="block">/*
** tclcmd:   vfs_unlink_test
**
** This TCL command unregisters the primary VFS and then registers
** it back again.  This is used to test the ability to register a
** VFS when none are previously registered, and the ability to 
** unregister the only available VFS.  Ticket #2738
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>vfs_unlink_test</name><parameter_list>(
  <param><decl><type><name>ClientData</name></type> <name>clientData</name></decl></param>, <comment type="block">/* Pointer to sqlite3_enable_XXX function */</comment>
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>  <comment type="block">/* Command arguments */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> *</type><name>pMain</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_vfs</name> *</type><name><name>apVfs</name><index>[<expr>20</expr>]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_vfs</name></type> <name>one</name>, <name>two</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>sqlite3_vfs_unregister</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="block">/* Unregister of NULL is harmless */</comment>
  <expr_stmt><expr><name>one</name>.<name>zName</name> = "__one"</expr>;</expr_stmt>
  <expr_stmt><expr><name>two</name>.<name>zName</name> = "__two"</expr>;</expr_stmt>

  <comment type="block">/* Calling sqlite3_vfs_register with 2nd argument of 0 does not
  ** change the default VFS
  */</comment>
  <expr_stmt><expr><name>pMain</name> = <call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_vfs_register</name><argument_list>(<argument><expr>&amp;<name>one</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pMain</name>==0 || <name>pMain</name>==<call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_vfs_register</name><argument_list>(<argument><expr>&amp;<name>two</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>pMain</name>==0 || <name>pMain</name>==<call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* We can find a VFS by its name */</comment>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr>"__one"</expr></argument>)</argument_list></call>==&amp;<name>one</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr>"__two"</expr></argument>)</argument_list></call>==&amp;<name>two</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Calling sqlite_vfs_register with non-zero second parameter changes the
  ** default VFS, even if the 1st parameter is an existig VFS that is
  ** previously registered as the non-default.
  */</comment>
  <expr_stmt><expr><call><name>sqlite3_vfs_register</name><argument_list>(<argument><expr>&amp;<name>one</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr>"__one"</expr></argument>)</argument_list></call>==&amp;<name>one</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr>"__two"</expr></argument>)</argument_list></call>==&amp;<name>two</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>==&amp;<name>one</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_vfs_register</name><argument_list>(<argument><expr>&amp;<name>two</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr>"__one"</expr></argument>)</argument_list></call>==&amp;<name>one</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr>"__two"</expr></argument>)</argument_list></call>==&amp;<name>two</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>==&amp;<name>two</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>pMain</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>sqlite3_vfs_register</name><argument_list>(<argument><expr><name>pMain</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr>"__one"</expr></argument>)</argument_list></call>==&amp;<name>one</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr>"__two"</expr></argument>)</argument_list></call>==&amp;<name>two</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>==<name>pMain</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  
  <comment type="block">/* Unlink the default VFS.  Repeat until there are no more VFSes
  ** registered.
  */</comment>
  <for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<call><name>sizeof</name><argument_list>(<argument><expr><name>apVfs</name></expr></argument>)</argument_list></call>/<call><name>sizeof</name><argument_list>(<argument><expr><name><name>apVfs</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
    <expr_stmt><expr><name><name>apVfs</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>( <expr><name><name>apVfs</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><then><block>{
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>apVfs</name><index>[<expr><name>i</name></expr>]</index></name>==<call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr><name><name>apVfs</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>zName</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_vfs_unregister</name><argument_list>(<argument><expr><name><name>apVfs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr>0==<call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr><name><name>apVfs</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>zName</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></for>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr>0==<call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Register the main VFS as non-default (will be made default, since
  ** it'll be the only one in existence).
  */</comment>
  <expr_stmt><expr><call><name>sqlite3_vfs_register</name><argument_list>(<argument><expr><name>pMain</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>==<name>pMain</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  
  <comment type="block">/* Un-register the main VFS again to restore an empty VFS list */</comment>
  <expr_stmt><expr><call><name>sqlite3_vfs_unregister</name><argument_list>(<argument><expr><name>pMain</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr>0==<call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Relink all VFSes in reverse order. */</comment>  
  <for>for(<init><expr><name>i</name>=<call><name>sizeof</name><argument_list>(<argument><expr><name>apVfs</name></expr></argument>)</argument_list></call>/<call><name>sizeof</name><argument_list>(<argument><expr><name><name>apVfs</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call>-1</expr>;</init> <condition><expr><name>i</name>&gt;=0</expr>;</condition> <incr><expr><name>i</name>--</expr></incr>)<block>{
    <if>if<condition>( <expr><name><name>apVfs</name><index>[<expr><name>i</name></expr>]</index></name></expr> )</condition><then><block>{
      <expr_stmt><expr><call><name>sqlite3_vfs_register</name><argument_list>(<argument><expr><name><name>apVfs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>apVfs</name><index>[<expr><name>i</name></expr>]</index></name>==<call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>apVfs</name><index>[<expr><name>i</name></expr>]</index></name>==<call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr><name><name>apVfs</name><index>[<expr><name>i</name></expr>]</index></name>-&gt;<name>zName</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></for>

  <comment type="block">/* Unregister out sample VFSes. */</comment>
  <expr_stmt><expr><call><name>sqlite3_vfs_unregister</name><argument_list>(<argument><expr>&amp;<name>one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_vfs_unregister</name><argument_list>(<argument><expr>&amp;<name>two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* Unregistering a VFS that is not currently registered is harmless */</comment>
  <expr_stmt><expr><call><name>sqlite3_vfs_unregister</name><argument_list>(<argument><expr>&amp;<name>one</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_vfs_unregister</name><argument_list>(<argument><expr>&amp;<name>two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr>"__one"</expr></argument>)</argument_list></call>==0</expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr>"__two"</expr></argument>)</argument_list></call>==0</expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <comment type="block">/* We should be left with the original default VFS back as the
  ** original */</comment>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call>==<name>pMain</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** tclcmd:   vfs_initfail_test
**
** This TCL command attempts to vfs_find and vfs_register when the
** sqlite3_initialize() interface is failing.  All calls should fail.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>vfs_initfail_test</name><parameter_list>(
  <param><decl><type><name>ClientData</name></type> <name>clientData</name></decl></param>, <comment type="block">/* Pointer to sqlite3_enable_XXX function */</comment>
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>  <comment type="block">/* Command arguments */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3_vfs</name></type> <name>one</name></decl>;</decl_stmt>
  <expr_stmt><expr><name>one</name>.<name>zName</name> = "__one"</expr>;</expr_stmt>

  <if>if<condition>( <expr><call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><call><name>sqlite3_vfs_register</name><argument_list>(<argument><expr>&amp;<name>one</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><call><name>sqlite3_vfs_register</name><argument_list>(<argument><expr>&amp;<name>one</name></expr></argument>, <argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Saved VFSes
*/</comment>
<decl_stmt><decl><type><name>static</name> <name>sqlite3_vfs</name> *</type><name><name>apVfs</name><index>[<expr>20</expr>]</index></name></decl>;</decl_stmt>
<decl_stmt><decl><type><name>static</name> <name>int</name></type> <name>nVfs</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

<comment type="block">/*
** tclcmd:   vfs_unregister_all
**
** Unregister all VFSes.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>vfs_unregister_all</name><parameter_list>(
  <param><decl><type><name>ClientData</name></type> <name>clientData</name></decl></param>, <comment type="block">/* Pointer to sqlite3_enable_XXX function */</comment>
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>  <comment type="block">/* Command arguments */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<call><name>ArraySize</name><argument_list>(<argument><expr><name>apVfs</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
    <expr_stmt><expr><name><name>apVfs</name><index>[<expr><name>i</name></expr>]</index></name> = <call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>( <expr><name><name>apVfs</name><index>[<expr><name>i</name></expr>]</index></name>==0</expr> )</condition><then> <break>break;</break></then></if>
    <expr_stmt><expr><call><name>sqlite3_vfs_unregister</name><argument_list>(<argument><expr><name><name>apVfs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <expr_stmt><expr><name>nVfs</name> = <name>i</name></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>
<comment type="block">/*
** tclcmd:   vfs_reregister_all
**
** Restore all VFSes that were removed using vfs_unregister_all
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>vfs_reregister_all</name><parameter_list>(
  <param><decl><type><name>ClientData</name></type> <name>clientData</name></decl></param>, <comment type="block">/* Pointer to sqlite3_enable_XXX function */</comment>
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>  <comment type="block">/* Command arguments */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<name>nVfs</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
    <expr_stmt><expr><call><name>sqlite3_vfs_register</name><argument_list>(<argument><expr><name><name>apVfs</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>, <argument><expr><name>i</name>==0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>


<comment type="block">/*
** tclcmd:   file_control_test DB
**
** This TCL command runs the sqlite3_file_control interface and
** verifies correct operation of the same.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>file_control_test</name><parameter_list>(
  <param><decl><type><name>ClientData</name></type> <name>clientData</name></decl></param>, <comment type="block">/* Pointer to sqlite3_enable_XXX function */</comment>
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>  <comment type="block">/* Command arguments */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>iArg</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=2</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>,
        <argument><expr><call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>" DB"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>getDbPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>db</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_file_control</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>iArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>rc</name>==<name>SQLITE_ERROR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_file_control</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr>"notadatabase"</expr></argument>, <argument><expr><name>SQLITE_FCNTL_LOCKSTATE</name></expr></argument>, <argument><expr>&amp;<name>iArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>rc</name>==<name>SQLITE_ERROR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_file_control</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr>"main"</expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr>&amp;<name>iArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>rc</name>==<name>SQLITE_ERROR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_file_control</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr>"temp"</expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr>&amp;<name>iArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>rc</name>==<name>SQLITE_ERROR</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>


<comment type="block">/*
** tclcmd:   file_control_lasterrno_test DB
**
** This TCL command runs the sqlite3_file_control interface and
** verifies correct operation of the SQLITE_LAST_ERRNO verb.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>file_control_lasterrno_test</name><parameter_list>(
  <param><decl><type><name>ClientData</name></type> <name>clientData</name></decl></param>, <comment type="block">/* Pointer to sqlite3_enable_XXX function */</comment>
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>  <comment type="block">/* Command arguments */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>iArg</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=2</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>,
        <argument><expr><call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>" DB"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>getDbPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>db</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_file_control</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SQLITE_LAST_ERRNO</name></expr></argument>, <argument><expr>&amp;<name>iArg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>rc</name></expr> )</condition><then> <block>{ <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_NewIntObj</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>TCL_ERROR</name></expr>;</return> }</block></then></if>
  <if>if<condition>( <expr><name>iArg</name>!=0</expr> )</condition><then> <block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"Unexpected non-zero errno: "</expr></argument>,
                     <argument><expr><call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><call><name>Tcl_NewIntObj</name><argument_list>(<argument><expr><name>iArg</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>" "</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <return>return <expr><name>TCL_OK</name></expr>;</return>  
}</block></function>

<comment type="block">/*
** tclcmd:   file_control_lockproxy_test DB
**
** This TCL command runs the sqlite3_file_control interface and
** verifies correct operation of the SQLITE_GET_LOCKPROXYFILE and
** SQLITE_SET_LOCKPROXYFILE verbs.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>file_control_lockproxy_test</name><parameter_list>(
  <param><decl><type><name>ClientData</name></type> <name>clientData</name></decl></param>, <comment type="block">/* Pointer to sqlite3_enable_XXX function */</comment>
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>  <comment type="block">/* Command arguments */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>
  
  <if>if<condition>( <expr><name>objc</name>!=2</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>,
                     <argument><expr><call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>" DB"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>getDbPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>db</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_ENABLE_LOCKING_STYLE</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:if>#  <cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
<cpp:define>#    <cpp:directive>define</cpp:directive> <name>SQLITE_ENABLE_LOCKING_STYLE</name> 1</cpp:define>
<cpp:else>#  <cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#    <cpp:directive>define</cpp:directive> <name>SQLITE_ENABLE_LOCKING_STYLE</name> 0</cpp:define>
<cpp:endif>#  <cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_ENABLE_LOCKING_STYLE</name> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>proxyPath</name> =<init> <expr>"test.proxy"</expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> *</type><name>testPath</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
    <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_file_control</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SQLITE_SET_LOCKPROXYFILE</name></expr></argument>, <argument><expr><name>proxyPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>( <expr><name>rc</name></expr> )</condition><then><block>{
      <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_NewIntObj</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt> <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_file_control</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SQLITE_GET_LOCKPROXYFILE</name></expr></argument>, <argument><expr>&amp;<name>testPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>( <expr><call><name>strncmp</name><argument_list>(<argument><expr><name>proxyPath</name></expr></argument>,<argument><expr><name>testPath</name></expr></argument>,<argument><expr>11</expr></argument>)</argument_list></call></expr> )</condition><then> <block>{
      <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"Lock proxy file did not match the "
                               "previously assigned value"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    }</block></then></if>
    <if>if<condition>( <expr><name>rc</name></expr> )</condition><then><block>{
      <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_NewIntObj</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    }</block></then></if>
    <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_file_control</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>SQLITE_SET_LOCKPROXYFILE</name></expr></argument>, <argument><expr><name>proxyPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>( <expr><name>rc</name></expr> )</condition><then><block>{
      <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_NewIntObj</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <return>return <expr><name>TCL_ERROR</name></expr>;</return>
    }</block></then></if>
  }</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>TCL_OK</name></expr>;</return>  
}</block></function>


<comment type="block">/*
** tclcmd:   sqlite3_vfs_list
**
**   Return a tcl list containing the names of all registered vfs's.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>vfs_list</name><parameter_list>(
  <param><decl><type><name>ClientData</name></type> <name>clientData</name></decl></param>, <comment type="block">/* Pointer to sqlite3_enable_XXX function */</comment>
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>  <comment type="block">/* Command arguments */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3_vfs</name> *</type><name>pVfs</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Tcl_Obj</name> *</type><name>pRet</name> =<init> <expr><call><name>Tcl_NewObj</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>objc</name>!=1</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <for>for(<init><expr><name>pVfs</name>=<call><name>sqlite3_vfs_find</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>pVfs</name></expr>;</condition> <incr><expr><name>pVfs</name>=<name>pVfs</name>-&gt;<name>pNext</name></expr></incr>)<block>{
    <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>pRet</name></expr></argument>, <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr><name>pVfs</name>-&gt;<name>zName</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>pRet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>  
}</block></function>

<comment type="block">/*
** tclcmd:   sqlite3_limit DB ID VALUE
**
** This TCL command runs the sqlite3_limit interface and
** verifies correct operation of the same.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_limit</name><parameter_list>(
  <param><decl><type><name>ClientData</name></type> <name>clientData</name></decl></param>, <comment type="block">/* Pointer to sqlite3_enable_XXX function */</comment>
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>  <comment type="block">/* Command arguments */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>static</name> <name>const</name> <struct>struct <block>{<public type="default"/>
     <decl_stmt><decl><type><name>char</name> *</type><name>zName</name></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>int</name></type> <name>id</name></decl>;</decl_stmt>
  }</block> <decl><name><name>aId</name><index>[]</index></name> =<init> <expr><block>{
    <expr><block>{ <expr>"SQLITE_LIMIT_LENGTH"</expr>,              <expr><name>SQLITE_LIMIT_LENGTH</name></expr>               }</block></expr>,
    <expr><block>{ <expr>"SQLITE_LIMIT_SQL_LENGTH"</expr>,          <expr><name>SQLITE_LIMIT_SQL_LENGTH</name></expr>           }</block></expr>,
    <expr><block>{ <expr>"SQLITE_LIMIT_COLUMN"</expr>,              <expr><name>SQLITE_LIMIT_COLUMN</name></expr>               }</block></expr>,
    <expr><block>{ <expr>"SQLITE_LIMIT_EXPR_DEPTH"</expr>,          <expr><name>SQLITE_LIMIT_EXPR_DEPTH</name></expr>           }</block></expr>,
    <expr><block>{ <expr>"SQLITE_LIMIT_COMPOUND_SELECT"</expr>,     <expr><name>SQLITE_LIMIT_COMPOUND_SELECT</name></expr>      }</block></expr>,
    <expr><block>{ <expr>"SQLITE_LIMIT_VDBE_OP"</expr>,             <expr><name>SQLITE_LIMIT_VDBE_OP</name></expr>              }</block></expr>,
    <expr><block>{ <expr>"SQLITE_LIMIT_FUNCTION_ARG"</expr>,        <expr><name>SQLITE_LIMIT_FUNCTION_ARG</name></expr>         }</block></expr>,
    <expr><block>{ <expr>"SQLITE_LIMIT_ATTACHED"</expr>,            <expr><name>SQLITE_LIMIT_ATTACHED</name></expr>             }</block></expr>,
    <expr><block>{ <expr>"SQLITE_LIMIT_LIKE_PATTERN_LENGTH"</expr>, <expr><name>SQLITE_LIMIT_LIKE_PATTERN_LENGTH</name></expr>  }</block></expr>,
    <expr><block>{ <expr>"SQLITE_LIMIT_VARIABLE_NUMBER"</expr>,     <expr><name>SQLITE_LIMIT_VARIABLE_NUMBER</name></expr>      }</block></expr>,
    
    <comment type="block">/* Out of range test cases */</comment>
    <expr><block>{ <expr>"SQLITE_LIMIT_TOOSMALL"</expr>,            <expr>-1</expr>,                               }</block></expr>,
    <expr><block>{ <expr>"SQLITE_LIMIT_TOOBIG"</expr>,              <expr><name>SQLITE_LIMIT_VARIABLE_NUMBER</name>+1</expr>    }</block></expr>,
  }</block></expr></init></decl>;</struct></type></decl></decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name>, <name>id</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>val</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>zId</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=4</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"wrong # args: should be \""</expr></argument>,
        <argument><expr><call><name>Tcl_GetStringFromObj</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>0</expr>]</index></name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr></argument>, <argument><expr>" DB ID VALUE"</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>getDbPointer</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>1</expr>]</index></name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>db</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><name>zId</name> = <call><name>Tcl_GetString</name><argument_list>(<argument><expr><name><name>objv</name><index>[<expr>2</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<call><name>sizeof</name><argument_list>(<argument><expr><name>aId</name></expr></argument>)</argument_list></call>/<call><name>sizeof</name><argument_list>(<argument><expr><name><name>aId</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
    <if>if<condition>( <expr><call><name>strcmp</name><argument_list>(<argument><expr><name>zId</name></expr></argument>, <argument><expr><name><name>aId</name><index>[<expr><name>i</name></expr>]</index></name>.<name>zName</name></expr></argument>)</argument_list></call>==0</expr> )</condition><then><block>{
      <expr_stmt><expr><name>id</name> = <name><name>aId</name><index>[<expr><name>i</name></expr>]</index></name>.<name>id</name></expr>;</expr_stmt>
      <break>break;</break>
    }</block></then></if>
  }</block></for>
  <if>if<condition>( <expr><name>i</name>&gt;=<call><name>sizeof</name><argument_list>(<argument><expr><name>aId</name></expr></argument>)</argument_list></call>/<call><name>sizeof</name><argument_list>(<argument><expr><name><name>aId</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"unknown limit type: "</expr></argument>, <argument><expr><name>zId</name></expr></argument>, <argument><expr>(<name>char</name>*)0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><call><name>Tcl_GetIntFromObj</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>objv</name><index>[<expr>3</expr>]</index></name></expr></argument>, <argument><expr>&amp;<name>val</name></expr></argument>)</argument_list></call></expr> )</condition><then> <return>return <expr><name>TCL_ERROR</name></expr>;</return></then></if>
  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_limit</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>id</name></expr></argument>, <argument><expr><name>val</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><call><name>Tcl_NewIntObj</name><argument_list>(<argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>  
}</block></function>

<comment type="block">/*
** tclcmd:  save_prng_state
**
** Save the state of the pseudo-random number generator.
** At the same time, verify that sqlite3_test_control works even when
** called with an out-of-range opcode.
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>save_prng_state</name><parameter_list>(
  <param><decl><type><name>ClientData</name></type> <name>clientData</name></decl></param>, <comment type="block">/* Pointer to sqlite3_enable_XXX function */</comment>
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>  <comment type="block">/* Command arguments */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> =<init> <expr><call><name>sqlite3_test_control</name><argument_list>(<argument><expr>9999</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>rc</name>==0</expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_test_control</name><argument_list>(<argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>rc</name>==0</expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_test_control</name><argument_list>(<argument><expr><name>SQLITE_TESTCTRL_PRNG_SAVE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>
<comment type="block">/*
** tclcmd:  restore_prng_state
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>restore_prng_state</name><parameter_list>(
  <param><decl><type><name>ClientData</name></type> <name>clientData</name></decl></param>, <comment type="block">/* Pointer to sqlite3_enable_XXX function */</comment>
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>  <comment type="block">/* Command arguments */</comment>
)</parameter_list><block>{
  <expr_stmt><expr><call><name>sqlite3_test_control</name><argument_list>(<argument><expr><name>SQLITE_TESTCTRL_PRNG_RESTORE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>
<comment type="block">/*
** tclcmd:  reset_prng_state
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>reset_prng_state</name><parameter_list>(
  <param><decl><type><name>ClientData</name></type> <name>clientData</name></decl></param>, <comment type="block">/* Pointer to sqlite3_enable_XXX function */</comment>
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>  <comment type="block">/* Command arguments */</comment>
)</parameter_list><block>{
  <expr_stmt><expr><call><name>sqlite3_test_control</name><argument_list>(<argument><expr><name>SQLITE_TESTCTRL_PRNG_RESET</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>

<comment type="block">/*
** tclcmd:  pcache_stats
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>test_pcache_stats</name><parameter_list>(
  <param><decl><type><name>ClientData</name></type> <name>clientData</name></decl></param>, <comment type="block">/* Pointer to sqlite3_enable_XXX function */</comment>
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>  <comment type="block">/* Command arguments */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>nMin</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nMax</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nCurrent</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nRecyclable</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>Tcl_Obj</name> *</type><name>pRet</name></decl>;</decl_stmt>

  <expr_stmt><expr><call><name>sqlite3PcacheStats</name><argument_list>(<argument><expr>&amp;<name>nCurrent</name></expr></argument>, <argument><expr>&amp;<name>nMax</name></expr></argument>, <argument><expr>&amp;<name>nMin</name></expr></argument>, <argument><expr>&amp;<name>nRecyclable</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>pRet</name> = <call><name>Tcl_NewObj</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>pRet</name></expr></argument>, <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr>"current"</expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>pRet</name></expr></argument>, <argument><expr><call><name>Tcl_NewIntObj</name><argument_list>(<argument><expr><name>nCurrent</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>pRet</name></expr></argument>, <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr>"max"</expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>pRet</name></expr></argument>, <argument><expr><call><name>Tcl_NewIntObj</name><argument_list>(<argument><expr><name>nMax</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>pRet</name></expr></argument>, <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr>"min"</expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>pRet</name></expr></argument>, <argument><expr><call><name>Tcl_NewIntObj</name><argument_list>(<argument><expr><name>nMin</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>pRet</name></expr></argument>, <argument><expr><call><name>Tcl_NewStringObj</name><argument_list>(<argument><expr>"recyclable"</expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_ListObjAppendElement</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>pRet</name></expr></argument>, <argument><expr><call><name>Tcl_NewIntObj</name><argument_list>(<argument><expr><name>nRecyclable</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><call><name>Tcl_SetObjResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name>pRet</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>


<comment type="block">/*
** Register commands with the TCL interpreter.
*/</comment>
<function><type><name>int</name></type> <name>Sqlitetest1_Init</name><parameter_list>(<param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>extern</name> <name>int</name></type> <name>sqlite3_search_count</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>extern</name> <name>int</name></type> <name>sqlite3_interrupt_count</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>extern</name> <name>int</name></type> <name>sqlite3_open_file_count</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>extern</name> <name>int</name></type> <name>sqlite3_sort_count</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>extern</name> <name>int</name></type> <name>sqlite3_current_time</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_OS_UNIX</name> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <decl_stmt><decl><type><name>extern</name> <name>int</name></type> <name>sqlite3_hostid_num</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <decl_stmt><decl><type><name>extern</name> <name>int</name></type> <name>sqlite3_max_blobsize</name></decl>;</decl_stmt>
  <function_decl><type><name>extern</name> <name>int</name></type> <name>sqlite3BtreeSharedCacheReport</name><parameter_list>(<param><decl><type><name>void</name>*</type></decl></param>,
                                          <param><decl><type><name>Tcl_Interp</name>*</type></decl></param>,<param><decl><type><name>int</name></type></decl></param>,<param><decl><type><name>Tcl_Obj</name>*<name>CONST</name>*</type></decl></param>)</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>static</name> <struct>struct <block>{<public type="default"/>
     <decl_stmt><decl><type><name>char</name> *</type><name>zName</name></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>Tcl_CmdProc</name> *</type><name>xProc</name></decl>;</decl_stmt>
  }</block> <decl><name><name>aCmd</name><index>[]</index></name> =<init> <expr><block>{
     <expr><block>{ <expr>"db_enter"</expr>,                      <expr>(<name>Tcl_CmdProc</name>*)<name>db_enter</name></expr>               }</block></expr>,
     <expr><block>{ <expr>"db_leave"</expr>,                      <expr>(<name>Tcl_CmdProc</name>*)<name>db_leave</name></expr>               }</block></expr>,
     <expr><block>{ <expr>"sqlite3_mprintf_int"</expr>,           <expr>(<name>Tcl_CmdProc</name>*)<name>sqlite3_mprintf_int</name></expr>    }</block></expr>,
     <expr><block>{ <expr>"sqlite3_mprintf_int64"</expr>,         <expr>(<name>Tcl_CmdProc</name>*)<name>sqlite3_mprintf_int64</name></expr>  }</block></expr>,
     <expr><block>{ <expr>"sqlite3_mprintf_str"</expr>,           <expr>(<name>Tcl_CmdProc</name>*)<name>sqlite3_mprintf_str</name></expr>    }</block></expr>,
     <expr><block>{ <expr>"sqlite3_snprintf_str"</expr>,          <expr>(<name>Tcl_CmdProc</name>*)<name>sqlite3_snprintf_str</name></expr>   }</block></expr>,
     <expr><block>{ <expr>"sqlite3_mprintf_stronly"</expr>,       <expr>(<name>Tcl_CmdProc</name>*)<name>sqlite3_mprintf_stronly</name></expr>}</block></expr>,
     <expr><block>{ <expr>"sqlite3_mprintf_double"</expr>,        <expr>(<name>Tcl_CmdProc</name>*)<name>sqlite3_mprintf_double</name></expr> }</block></expr>,
     <expr><block>{ <expr>"sqlite3_mprintf_scaled"</expr>,        <expr>(<name>Tcl_CmdProc</name>*)<name>sqlite3_mprintf_scaled</name></expr> }</block></expr>,
     <expr><block>{ <expr>"sqlite3_mprintf_hexdouble"</expr>,   <expr>(<name>Tcl_CmdProc</name>*)<name>sqlite3_mprintf_hexdouble</name></expr>}</block></expr>,
     <expr><block>{ <expr>"sqlite3_mprintf_z_test"</expr>,        <expr>(<name>Tcl_CmdProc</name>*)<name>test_mprintf_z</name></expr>        }</block></expr>,
     <expr><block>{ <expr>"sqlite3_mprintf_n_test"</expr>,        <expr>(<name>Tcl_CmdProc</name>*)<name>test_mprintf_n</name></expr>        }</block></expr>,
     <expr><block>{ <expr>"sqlite3_snprintf_int"</expr>,          <expr>(<name>Tcl_CmdProc</name>*)<name>test_snprintf_int</name></expr>     }</block></expr>,
     <expr><block>{ <expr>"sqlite3_last_insert_rowid"</expr>,     <expr>(<name>Tcl_CmdProc</name>*)<name>test_last_rowid</name></expr>       }</block></expr>,
     <expr><block>{ <expr>"sqlite3_exec_printf"</expr>,           <expr>(<name>Tcl_CmdProc</name>*)<name>test_exec_printf</name></expr>      }</block></expr>,
     <expr><block>{ <expr>"sqlite3_exec_hex"</expr>,              <expr>(<name>Tcl_CmdProc</name>*)<name>test_exec_hex</name></expr>         }</block></expr>,
     <expr><block>{ <expr>"sqlite3_exec"</expr>,                  <expr>(<name>Tcl_CmdProc</name>*)<name>test_exec</name></expr>             }</block></expr>,
     <expr><block>{ <expr>"sqlite3_exec_nr"</expr>,               <expr>(<name>Tcl_CmdProc</name>*)<name>test_exec_nr</name></expr>          }</block></expr>,
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_GET_TABLE</name></cpp:ifndef>
     <expr><block>{ <expr>"sqlite3_get_table_printf"</expr>,      <expr>(<name>Tcl_CmdProc</name>*)<name>test_get_table_printf</name></expr> }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
     <expr><block>{ <expr>"sqlite3_close"</expr>,                 <expr>(<name>Tcl_CmdProc</name>*)<name>sqlite_test_close</name></expr>     }</block></expr>,
     <expr><block>{ <expr>"sqlite3_create_function"</expr>,       <expr>(<name>Tcl_CmdProc</name>*)<name>test_create_function</name></expr>  }</block></expr>,
     <expr><block>{ <expr>"sqlite3_create_aggregate"</expr>,      <expr>(<name>Tcl_CmdProc</name>*)<name>test_create_aggregate</name></expr> }</block></expr>,
     <expr><block>{ <expr>"sqlite_register_test_function"</expr>, <expr>(<name>Tcl_CmdProc</name>*)<name>test_register_func</name></expr>    }</block></expr>,
     <expr><block>{ <expr>"sqlite_abort"</expr>,                  <expr>(<name>Tcl_CmdProc</name>*)<name>sqlite_abort</name></expr>          }</block></expr>,
     <expr><block>{ <expr>"sqlite_bind"</expr>,                   <expr>(<name>Tcl_CmdProc</name>*)<name>test_bind</name></expr>             }</block></expr>,
     <expr><block>{ <expr>"breakpoint"</expr>,                    <expr>(<name>Tcl_CmdProc</name>*)<name>test_breakpoint</name></expr>       }</block></expr>,
     <expr><block>{ <expr>"sqlite3_key"</expr>,                   <expr>(<name>Tcl_CmdProc</name>*)<name>test_key</name></expr>              }</block></expr>,
     <expr><block>{ <expr>"sqlite3_rekey"</expr>,                 <expr>(<name>Tcl_CmdProc</name>*)<name>test_rekey</name></expr>            }</block></expr>,
     <expr><block>{ <expr>"sqlite_set_magic"</expr>,              <expr>(<name>Tcl_CmdProc</name>*)<name>sqlite_set_magic</name></expr>      }</block></expr>,
     <expr><block>{ <expr>"sqlite3_interrupt"</expr>,             <expr>(<name>Tcl_CmdProc</name>*)<name>test_interrupt</name></expr>        }</block></expr>,
     <expr><block>{ <expr>"sqlite_delete_function"</expr>,        <expr>(<name>Tcl_CmdProc</name>*)<name>delete_function</name></expr>       }</block></expr>,
     <expr><block>{ <expr>"sqlite_delete_collation"</expr>,       <expr>(<name>Tcl_CmdProc</name>*)<name>delete_collation</name></expr>      }</block></expr>,
     <expr><block>{ <expr>"sqlite3_get_autocommit"</expr>,        <expr>(<name>Tcl_CmdProc</name>*)<name>get_autocommit</name></expr>        }</block></expr>,
     <expr><block>{ <expr>"sqlite3_stack_used"</expr>,            <expr>(<name>Tcl_CmdProc</name>*)<name>test_stack_used</name></expr>       }</block></expr>,
     <expr><block>{ <expr>"sqlite3_busy_timeout"</expr>,          <expr>(<name>Tcl_CmdProc</name>*)<name>test_busy_timeout</name></expr>     }</block></expr>,
     <expr><block>{ <expr>"printf"</expr>,                        <expr>(<name>Tcl_CmdProc</name>*)<name>test_printf</name></expr>           }</block></expr>,
     <expr><block>{ <expr>"sqlite3IoTrace"</expr>,              <expr>(<name>Tcl_CmdProc</name>*)<name>test_io_trace</name></expr>         }</block></expr>,
  }</block></expr></init></decl>;</struct></type></decl></decl_stmt>
  <decl_stmt><decl><type><name>static</name> <struct>struct <block>{<public type="default"/>
     <decl_stmt><decl><type><name>char</name> *</type><name>zName</name></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>Tcl_ObjCmdProc</name> *</type><name>xProc</name></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>void</name> *</type><name>clientData</name></decl>;</decl_stmt>
  }</block> <decl><name><name>aObjCmd</name><index>[]</index></name> =<init> <expr><block>{
     <expr><block>{ <expr>"sqlite3_connection_pointer"</expr>,    <expr><name>get_sqlite_pointer</name></expr>, <expr>0</expr> }</block></expr>,
     <expr><block>{ <expr>"sqlite3_bind_int"</expr>,              <expr><name>test_bind_int</name></expr>,      <expr>0</expr> }</block></expr>,
     <expr><block>{ <expr>"sqlite3_bind_zeroblob"</expr>,         <expr><name>test_bind_zeroblob</name></expr>, <expr>0</expr> }</block></expr>,
     <expr><block>{ <expr>"sqlite3_bind_int64"</expr>,            <expr><name>test_bind_int64</name></expr>,    <expr>0</expr> }</block></expr>,
     <expr><block>{ <expr>"sqlite3_bind_double"</expr>,           <expr><name>test_bind_double</name></expr>,   <expr>0</expr> }</block></expr>,
     <expr><block>{ <expr>"sqlite3_bind_null"</expr>,             <expr><name>test_bind_null</name></expr>     ,<expr>0</expr> }</block></expr>,
     <expr><block>{ <expr>"sqlite3_bind_text"</expr>,             <expr><name>test_bind_text</name></expr>     ,<expr>0</expr> }</block></expr>,
     <expr><block>{ <expr>"sqlite3_bind_text16"</expr>,           <expr><name>test_bind_text16</name></expr>   ,<expr>0</expr> }</block></expr>,
     <expr><block>{ <expr>"sqlite3_bind_blob"</expr>,             <expr><name>test_bind_blob</name></expr>     ,<expr>0</expr> }</block></expr>,
     <expr><block>{ <expr>"sqlite3_bind_parameter_count"</expr>,  <expr><name>test_bind_parameter_count</name></expr>, <expr>0</expr>}</block></expr>,
     <expr><block>{ <expr>"sqlite3_bind_parameter_name"</expr>,   <expr><name>test_bind_parameter_name</name></expr>,  <expr>0</expr>}</block></expr>,
     <expr><block>{ <expr>"sqlite3_bind_parameter_index"</expr>,  <expr><name>test_bind_parameter_index</name></expr>, <expr>0</expr>}</block></expr>,
     <expr><block>{ <expr>"sqlite3_clear_bindings"</expr>,        <expr><name>test_clear_bindings</name></expr>, <expr>0</expr>}</block></expr>,
     <expr><block>{ <expr>"sqlite3_sleep"</expr>,                 <expr><name>test_sleep</name></expr>,          <expr>0</expr>}</block></expr>,
     <expr><block>{ <expr>"sqlite3_errcode"</expr>,               <expr><name>test_errcode</name></expr>       ,<expr>0</expr> }</block></expr>,
     <expr><block>{ <expr>"sqlite3_extended_errcode"</expr>,      <expr><name>test_ex_errcode</name></expr>    ,<expr>0</expr> }</block></expr>,
     <expr><block>{ <expr>"sqlite3_errmsg"</expr>,                <expr><name>test_errmsg</name></expr>        ,<expr>0</expr> }</block></expr>,
     <expr><block>{ <expr>"sqlite3_errmsg16"</expr>,              <expr><name>test_errmsg16</name></expr>      ,<expr>0</expr> }</block></expr>,
     <expr><block>{ <expr>"sqlite3_open"</expr>,                  <expr><name>test_open</name></expr>          ,<expr>0</expr> }</block></expr>,
     <expr><block>{ <expr>"sqlite3_open16"</expr>,                <expr><name>test_open16</name></expr>        ,<expr>0</expr> }</block></expr>,
     <expr><block>{ <expr>"sqlite3_complete16"</expr>,            <expr><name>test_complete16</name></expr>    ,<expr>0</expr> }</block></expr>,

     <expr><block>{ <expr>"sqlite3_prepare"</expr>,               <expr><name>test_prepare</name></expr>       ,<expr>0</expr> }</block></expr>,
     <expr><block>{ <expr>"sqlite3_prepare16"</expr>,             <expr><name>test_prepare16</name></expr>     ,<expr>0</expr> }</block></expr>,
     <expr><block>{ <expr>"sqlite3_prepare_v2"</expr>,            <expr><name>test_prepare_v2</name></expr>    ,<expr>0</expr> }</block></expr>,
     <expr><block>{ <expr>"sqlite3_prepare_tkt3134"</expr>,       <expr><name>test_prepare_tkt3134</name></expr>, <expr>0</expr>}</block></expr>,
     <expr><block>{ <expr>"sqlite3_prepare16_v2"</expr>,          <expr><name>test_prepare16_v2</name></expr>  ,<expr>0</expr> }</block></expr>,
     <expr><block>{ <expr>"sqlite3_finalize"</expr>,              <expr><name>test_finalize</name></expr>      ,<expr>0</expr> }</block></expr>,
     <expr><block>{ <expr>"sqlite3_stmt_status"</expr>,           <expr><name>test_stmt_status</name></expr>   ,<expr>0</expr> }</block></expr>,
     <expr><block>{ <expr>"sqlite3_reset"</expr>,                 <expr><name>test_reset</name></expr>         ,<expr>0</expr> }</block></expr>,
     <expr><block>{ <expr>"sqlite3_expired"</expr>,               <expr><name>test_expired</name></expr>       ,<expr>0</expr> }</block></expr>,
     <expr><block>{ <expr>"sqlite3_transfer_bindings"</expr>,     <expr><name>test_transfer_bind</name></expr> ,<expr>0</expr> }</block></expr>,
     <expr><block>{ <expr>"sqlite3_changes"</expr>,               <expr><name>test_changes</name></expr>       ,<expr>0</expr> }</block></expr>,
     <expr><block>{ <expr>"sqlite3_step"</expr>,                  <expr><name>test_step</name></expr>          ,<expr>0</expr> }</block></expr>,
     <expr><block>{ <expr>"sqlite3_next_stmt"</expr>,             <expr><name>test_next_stmt</name></expr>     ,<expr>0</expr> }</block></expr>,

     <expr><block>{ <expr>"sqlite3_release_memory"</expr>,        <expr><name>test_release_memory</name></expr>,     <expr>0</expr>}</block></expr>,
     <expr><block>{ <expr>"sqlite3_soft_heap_limit"</expr>,       <expr><name>test_soft_heap_limit</name></expr>,    <expr>0</expr>}</block></expr>,
     <expr><block>{ <expr>"sqlite3_thread_cleanup"</expr>,        <expr><name>test_thread_cleanup</name></expr>,     <expr>0</expr>}</block></expr>,
     <expr><block>{ <expr>"sqlite3_pager_refcounts"</expr>,       <expr><name>test_pager_refcounts</name></expr>,    <expr>0</expr>}</block></expr>,

     <expr><block>{ <expr>"sqlite3_load_extension"</expr>,        <expr><name>test_load_extension</name></expr>,     <expr>0</expr>}</block></expr>,
     <expr><block>{ <expr>"sqlite3_enable_load_extension"</expr>, <expr><name>test_enable_load</name></expr>,        <expr>0</expr>}</block></expr>,
     <expr><block>{ <expr>"sqlite3_extended_result_codes"</expr>, <expr><name>test_extended_result_codes</name></expr>, <expr>0</expr>}</block></expr>,
     <expr><block>{ <expr>"sqlite3_limit"</expr>,                 <expr><name>test_limit</name></expr>,                 <expr>0</expr>}</block></expr>,

     <expr><block>{ <expr>"save_prng_state"</expr>,               <expr><name>save_prng_state</name></expr>,    <expr>0</expr> }</block></expr>,
     <expr><block>{ <expr>"restore_prng_state"</expr>,            <expr><name>restore_prng_state</name></expr>, <expr>0</expr> }</block></expr>,
     <expr><block>{ <expr>"reset_prng_state"</expr>,              <expr><name>reset_prng_state</name></expr>,   <expr>0</expr> }</block></expr>,

     <comment type="block">/* sqlite3_column_*() API */</comment>
     <expr><block>{ <expr>"sqlite3_column_count"</expr>,          <expr><name>test_column_count</name></expr>  ,<expr>0</expr> }</block></expr>,
     <expr><block>{ <expr>"sqlite3_data_count"</expr>,            <expr><name>test_data_count</name></expr>    ,<expr>0</expr> }</block></expr>,
     <expr><block>{ <expr>"sqlite3_column_type"</expr>,           <expr><name>test_column_type</name></expr>   ,<expr>0</expr> }</block></expr>,
     <expr><block>{ <expr>"sqlite3_column_blob"</expr>,           <expr><name>test_column_blob</name></expr>   ,<expr>0</expr> }</block></expr>,
     <expr><block>{ <expr>"sqlite3_column_double"</expr>,         <expr><name>test_column_double</name></expr> ,<expr>0</expr> }</block></expr>,
     <expr><block>{ <expr>"sqlite3_column_int64"</expr>,          <expr><name>test_column_int64</name></expr>  ,<expr>0</expr> }</block></expr>,
     <expr><block>{ <expr>"sqlite3_column_text"</expr>,   <expr><name>test_stmt_utf8</name></expr>,  <expr>(<name>void</name>*)<name>sqlite3_column_text</name></expr> }</block></expr>,
     <expr><block>{ <expr>"sqlite3_column_name"</expr>,   <expr><name>test_stmt_utf8</name></expr>,  <expr>(<name>void</name>*)<name>sqlite3_column_name</name></expr> }</block></expr>,
     <expr><block>{ <expr>"sqlite3_column_int"</expr>,    <expr><name>test_stmt_int</name></expr>,   <expr>(<name>void</name>*)<name>sqlite3_column_int</name></expr>  }</block></expr>,
     <expr><block>{ <expr>"sqlite3_column_bytes"</expr>,  <expr><name>test_stmt_int</name></expr>,   <expr>(<name>void</name>*)<name>sqlite3_column_bytes</name></expr>}</block></expr>,
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_DECLTYPE</name></cpp:ifndef>
     <expr><block>{ <expr>"sqlite3_column_decltype"</expr>,<expr><name>test_stmt_utf8</name></expr>,<expr>(<name>void</name>*)<name>sqlite3_column_decltype</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_COLUMN_METADATA</name></cpp:ifdef>
<expr><block>{ <expr>"sqlite3_column_database_name"</expr>,<expr><name>test_stmt_utf8</name></expr>,<expr>(<name>void</name>*)<name>sqlite3_column_database_name</name></expr>}</block></expr>,
<expr><block>{ <expr>"sqlite3_column_table_name"</expr>,<expr><name>test_stmt_utf8</name></expr>,<expr>(<name>void</name>*)<name>sqlite3_column_table_name</name></expr>}</block></expr>,
<expr><block>{ <expr>"sqlite3_column_origin_name"</expr>,<expr><name>test_stmt_utf8</name></expr>,<expr>(<name>void</name>*)<name>sqlite3_column_origin_name</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_UTF16</name></cpp:ifndef>
     <expr><block>{ <expr>"sqlite3_column_bytes16"</expr>, <expr><name>test_stmt_int</name></expr>, <expr>(<name>void</name>*)<name>sqlite3_column_bytes16</name></expr> }</block></expr>,
     <expr><block>{ <expr>"sqlite3_column_text16"</expr>,  <expr><name>test_stmt_utf16</name></expr>, <expr>(<name>void</name>*)<name>sqlite3_column_text16</name></expr>}</block></expr>,
     <expr><block>{ <expr>"sqlite3_column_name16"</expr>,  <expr><name>test_stmt_utf16</name></expr>, <expr>(<name>void</name>*)<name>sqlite3_column_name16</name></expr>}</block></expr>,
     <expr><block>{ <expr>"add_alignment_test_collations"</expr>, <expr><name>add_alignment_test_collations</name></expr>, <expr>0</expr>      }</block></expr>,
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_DECLTYPE</name></cpp:ifndef>
     <expr><block>{ <expr>"sqlite3_column_decltype16"</expr>,<expr><name>test_stmt_utf16</name></expr>,<expr>(<name>void</name>*)<name>sqlite3_column_decltype16</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_COLUMN_METADATA</name></cpp:ifdef>
<expr><block>{<expr>"sqlite3_column_database_name16"</expr>,
  <expr><name>test_stmt_utf16</name></expr>, <expr><name>sqlite3_column_database_name16</name></expr>}</block></expr>,
<expr><block>{<expr>"sqlite3_column_table_name16"</expr>, <expr><name>test_stmt_utf16</name></expr>, <expr>(<name>void</name>*)<name>sqlite3_column_table_name16</name></expr>}</block></expr>,
<expr><block>{<expr>"sqlite3_column_origin_name16"</expr>, <expr><name>test_stmt_utf16</name></expr>, <expr>(<name>void</name>*)<name>sqlite3_column_origin_name16</name></expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
     <expr><block>{ <expr>"sqlite3_create_collation_v2"</expr>, <expr><name>test_create_collation_v2</name></expr>, <expr>0</expr> }</block></expr>,
     <expr><block>{ <expr>"sqlite3_global_recover"</expr>,     <expr><name>test_global_recover</name></expr>, <expr>0</expr>   }</block></expr>,
     <expr><block>{ <expr>"working_64bit_int"</expr>,          <expr><name>working_64bit_int</name></expr>,   <expr>0</expr>   }</block></expr>,
     <expr><block>{ <expr>"vfs_unlink_test"</expr>,            <expr><name>vfs_unlink_test</name></expr>,     <expr>0</expr>   }</block></expr>,
     <expr><block>{ <expr>"vfs_initfail_test"</expr>,          <expr><name>vfs_initfail_test</name></expr>,   <expr>0</expr>   }</block></expr>,
     <expr><block>{ <expr>"vfs_unregister_all"</expr>,         <expr><name>vfs_unregister_all</name></expr>,  <expr>0</expr>   }</block></expr>,
     <expr><block>{ <expr>"vfs_reregister_all"</expr>,         <expr><name>vfs_reregister_all</name></expr>,  <expr>0</expr>   }</block></expr>,
     <expr><block>{ <expr>"file_control_test"</expr>,          <expr><name>file_control_test</name></expr>,   <expr>0</expr>   }</block></expr>,
     <expr><block>{ <expr>"file_control_lasterrno_test"</expr>, <expr><name>file_control_lasterrno_test</name></expr>,  <expr>0</expr>   }</block></expr>,
     <expr><block>{ <expr>"file_control_lockproxy_test"</expr>, <expr><name>file_control_lockproxy_test</name></expr>,  <expr>0</expr>   }</block></expr>,
     <expr><block>{ <expr>"sqlite3_vfs_list"</expr>,           <expr><name>vfs_list</name></expr>,     <expr>0</expr>   }</block></expr>,

     <comment type="block">/* Functions from os.h */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_UTF16</name></cpp:ifndef>
     <expr><block>{ <expr>"add_test_collate"</expr>,        <expr><name>test_collate</name></expr>, <expr>0</expr>            }</block></expr>,
     <expr><block>{ <expr>"add_test_collate_needed"</expr>, <expr><name>test_collate_needed</name></expr>, <expr>0</expr>     }</block></expr>,
     <expr><block>{ <expr>"add_test_function"</expr>,       <expr><name>test_function</name></expr>, <expr>0</expr>           }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
     <expr><block>{ <expr>"sqlite3_test_errstr"</expr>,     <expr><name>test_errstr</name></expr>, <expr>0</expr>             }</block></expr>,
     <expr><block>{ <expr>"tcl_variable_type"</expr>,       <expr><name>tcl_variable_type</name></expr>, <expr>0</expr>       }</block></expr>,
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_SHARED_CACHE</name></cpp:ifndef>
     <expr><block>{ <expr>"sqlite3_enable_shared_cache"</expr>, <expr><name>test_enable_shared</name></expr>, <expr>0</expr>  }</block></expr>,
     <expr><block>{ <expr>"sqlite3_shared_cache_report"</expr>, <expr><name>sqlite3BtreeSharedCacheReport</name></expr>, <expr>0</expr>}</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
     <expr><block>{ <expr>"sqlite3_libversion_number"</expr>, <expr><name>test_libversion_number</name></expr>, <expr>0</expr>  }</block></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_COLUMN_METADATA</name></cpp:ifdef>
     <expr><block>{ <expr>"sqlite3_table_column_metadata"</expr>, <expr><name>test_table_column_metadata</name></expr>, <expr>0</expr>  }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_INCRBLOB</name></cpp:ifndef>
     <expr><block>{ <expr>"sqlite3_blob_read"</expr>,  <expr><name>test_blob_read</name></expr>, <expr>0</expr>  }</block></expr>,
     <expr><block>{ <expr>"sqlite3_blob_write"</expr>, <expr><name>test_blob_write</name></expr>, <expr>0</expr>  }</block></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
     <expr><block>{ <expr>"pcache_stats"</expr>,       <expr><name>test_pcache_stats</name></expr>, <expr>0</expr>  }</block></expr>,
  }</block></expr></init></decl>;</struct></type></decl></decl_stmt>
  <decl_stmt><decl><type><name>static</name> <name>int</name></type> <name>bitmask_size</name> =<init> <expr><call><name>sizeof</name><argument_list>(<argument><expr><name>Bitmask</name></expr></argument>)</argument_list></call>*8</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>extern</name> <name>int</name></type> <name>sqlite3_sync_count</name>, <name>sqlite3_fullsync_count</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>extern</name> <name>int</name></type> <name>sqlite3_opentemp_count</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>extern</name> <name>int</name></type> <name>sqlite3_like_count</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>extern</name> <name>int</name></type> <name>sqlite3_xferopt_count</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>extern</name> <name>int</name></type> <name>sqlite3_pager_readdb_count</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>extern</name> <name>int</name></type> <name>sqlite3_pager_writedb_count</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>extern</name> <name>int</name></type> <name>sqlite3_pager_writej_count</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_TEST</name></expr></argument>)</argument_list></call> &amp;&amp; <name>SQLITE_THREADSAFE</name></expr></cpp:if>
  <decl_stmt><decl><type><name>extern</name> <name>int</name></type> <name>threadsOverrideEachOthersLocks</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_OS_WIN</name></expr></cpp:if>
  <decl_stmt><decl><type><name>extern</name> <name>int</name></type> <name>sqlite3_os_type</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_DEBUG</name></cpp:ifdef>
  <decl_stmt><decl><type><name>extern</name> <name>int</name></type> <name>sqlite3WhereTrace</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>extern</name> <name>int</name></type> <name>sqlite3OSTrace</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>extern</name> <name>int</name></type> <name>sqlite3VdbeAddopTrace</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_TEST</name></cpp:ifdef>
  <decl_stmt><decl><type><name>extern</name> <name>char</name></type> <name><name>sqlite3_query_plan</name><index>[]</index></name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>static</name> <name>char</name> *</type><name>query_plan</name> =<init> <expr><name>sqlite3_query_plan</name></expr></init></decl>;</decl_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_ENABLE_FTS3</name></cpp:ifdef>
  <decl_stmt><decl><type><name>extern</name> <name>int</name></type> <name>sqlite3_fts3_enable_parentheses</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<call><name>sizeof</name><argument_list>(<argument><expr><name>aCmd</name></expr></argument>)</argument_list></call>/<call><name>sizeof</name><argument_list>(<argument><expr><name><name>aCmd</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
    <expr_stmt><expr><call><name>Tcl_CreateCommand</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>aCmd</name><index>[<expr><name>i</name></expr>]</index></name>.<name>zName</name></expr></argument>, <argument><expr><name><name>aCmd</name><index>[<expr><name>i</name></expr>]</index></name>.<name>xProc</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<call><name>sizeof</name><argument_list>(<argument><expr><name>aObjCmd</name></expr></argument>)</argument_list></call>/<call><name>sizeof</name><argument_list>(<argument><expr><name><name>aObjCmd</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
    <expr_stmt><expr><call><name>Tcl_CreateObjCommand</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>aObjCmd</name><index>[<expr><name>i</name></expr>]</index></name>.<name>zName</name></expr></argument>, 
        <argument><expr><name><name>aObjCmd</name><index>[<expr><name>i</name></expr>]</index></name>.<name>xProc</name></expr></argument>, <argument><expr><name><name>aObjCmd</name><index>[<expr><name>i</name></expr>]</index></name>.<name>clientData</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <expr_stmt><expr><call><name>Tcl_LinkVar</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"sqlite_search_count"</expr></argument>, 
      <argument><expr>(<name>char</name>*)&amp;<name>sqlite3_search_count</name></expr></argument>, <argument><expr><name>TCL_LINK_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_LinkVar</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"sqlite_sort_count"</expr></argument>, 
      <argument><expr>(<name>char</name>*)&amp;<name>sqlite3_sort_count</name></expr></argument>, <argument><expr><name>TCL_LINK_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_LinkVar</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"sqlite3_max_blobsize"</expr></argument>, 
      <argument><expr>(<name>char</name>*)&amp;<name>sqlite3_max_blobsize</name></expr></argument>, <argument><expr><name>TCL_LINK_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_LinkVar</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"sqlite_like_count"</expr></argument>, 
      <argument><expr>(<name>char</name>*)&amp;<name>sqlite3_like_count</name></expr></argument>, <argument><expr><name>TCL_LINK_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_LinkVar</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"sqlite_interrupt_count"</expr></argument>, 
      <argument><expr>(<name>char</name>*)&amp;<name>sqlite3_interrupt_count</name></expr></argument>, <argument><expr><name>TCL_LINK_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_LinkVar</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"sqlite_open_file_count"</expr></argument>, 
      <argument><expr>(<name>char</name>*)&amp;<name>sqlite3_open_file_count</name></expr></argument>, <argument><expr><name>TCL_LINK_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_LinkVar</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"sqlite_current_time"</expr></argument>, 
      <argument><expr>(<name>char</name>*)&amp;<name>sqlite3_current_time</name></expr></argument>, <argument><expr><name>TCL_LINK_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_OS_UNIX</name> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>__APPLE__</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>Tcl_LinkVar</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"sqlite_hostid_num"</expr></argument>, 
      <argument><expr>(<name>char</name>*)&amp;<name>sqlite3_hostid_num</name></expr></argument>, <argument><expr><name>TCL_LINK_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>Tcl_LinkVar</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"sqlite3_xferopt_count"</expr></argument>,
      <argument><expr>(<name>char</name>*)&amp;<name>sqlite3_xferopt_count</name></expr></argument>, <argument><expr><name>TCL_LINK_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_LinkVar</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"sqlite3_pager_readdb_count"</expr></argument>,
      <argument><expr>(<name>char</name>*)&amp;<name>sqlite3_pager_readdb_count</name></expr></argument>, <argument><expr><name>TCL_LINK_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_LinkVar</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"sqlite3_pager_writedb_count"</expr></argument>,
      <argument><expr>(<name>char</name>*)&amp;<name>sqlite3_pager_writedb_count</name></expr></argument>, <argument><expr><name>TCL_LINK_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_LinkVar</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"sqlite3_pager_writej_count"</expr></argument>,
      <argument><expr>(<name>char</name>*)&amp;<name>sqlite3_pager_writej_count</name></expr></argument>, <argument><expr><name>TCL_LINK_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_UTF16</name></cpp:ifndef>
  <expr_stmt><expr><call><name>Tcl_LinkVar</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"unaligned_string_counter"</expr></argument>,
      <argument><expr>(<name>char</name>*)&amp;<name>unaligned_string_counter</name></expr></argument>, <argument><expr><name>TCL_LINK_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>__linux__</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_TEST</name></expr></argument>)</argument_list></call> &amp;&amp; <name>SQLITE_THREADSAFE</name></expr></cpp:if>
  <expr_stmt><expr><call><name>Tcl_LinkVar</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"threadsOverrideEachOthersLocks"</expr></argument>,
      <argument><expr>(<name>char</name>*)&amp;<name>threadsOverrideEachOthersLocks</name></expr></argument>, <argument><expr><name>TCL_LINK_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_UTF16</name></cpp:ifndef>
  <expr_stmt><expr><call><name>Tcl_LinkVar</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"sqlite_last_needed_collation"</expr></argument>,
      <argument><expr>(<name>char</name>*)&amp;<name>pzNeededCollation</name></expr></argument>, <argument><expr><name>TCL_LINK_STRING</name>|<name>TCL_LINK_READ_ONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_OS_WIN</name></expr></cpp:if>
  <expr_stmt><expr><call><name>Tcl_LinkVar</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"sqlite_os_type"</expr></argument>,
      <argument><expr>(<name>char</name>*)&amp;<name>sqlite3_os_type</name></expr></argument>, <argument><expr><name>TCL_LINK_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_TEST</name></cpp:ifdef>
  <expr_stmt><expr><call><name>Tcl_LinkVar</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"sqlite_query_plan"</expr></argument>,
      <argument><expr>(<name>char</name>*)&amp;<name>query_plan</name></expr></argument>, <argument><expr><name>TCL_LINK_STRING</name>|<name>TCL_LINK_READ_ONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_DEBUG</name></cpp:ifdef>
  <expr_stmt><expr><call><name>Tcl_LinkVar</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"sqlite_addop_trace"</expr></argument>,
      <argument><expr>(<name>char</name>*)&amp;<name>sqlite3VdbeAddopTrace</name></expr></argument>, <argument><expr><name>TCL_LINK_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_LinkVar</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"sqlite_where_trace"</expr></argument>,
      <argument><expr>(<name>char</name>*)&amp;<name>sqlite3WhereTrace</name></expr></argument>, <argument><expr><name>TCL_LINK_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_LinkVar</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"sqlite_os_trace"</expr></argument>,
      <argument><expr>(<name>char</name>*)&amp;<name>sqlite3OSTrace</name></expr></argument>, <argument><expr><name>TCL_LINK_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_DISKIO</name></cpp:ifndef>
  <expr_stmt><expr><call><name>Tcl_LinkVar</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"sqlite_opentemp_count"</expr></argument>,
      <argument><expr>(<name>char</name>*)&amp;<name>sqlite3_opentemp_count</name></expr></argument>, <argument><expr><name>TCL_LINK_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr_stmt><expr><call><name>Tcl_LinkVar</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"sqlite_static_bind_value"</expr></argument>,
      <argument><expr>(<name>char</name>*)&amp;<name>sqlite_static_bind_value</name></expr></argument>, <argument><expr><name>TCL_LINK_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_LinkVar</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"sqlite_static_bind_nbyte"</expr></argument>,
      <argument><expr>(<name>char</name>*)&amp;<name>sqlite_static_bind_nbyte</name></expr></argument>, <argument><expr><name>TCL_LINK_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_LinkVar</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"sqlite_temp_directory"</expr></argument>,
      <argument><expr>(<name>char</name>*)&amp;<name>sqlite3_temp_directory</name></expr></argument>, <argument><expr><name>TCL_LINK_STRING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_LinkVar</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"bitmask_size"</expr></argument>,
      <argument><expr>(<name>char</name>*)&amp;<name>bitmask_size</name></expr></argument>, <argument><expr><name>TCL_LINK_INT</name>|<name>TCL_LINK_READ_ONLY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_LinkVar</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"sqlite_sync_count"</expr></argument>,
      <argument><expr>(<name>char</name>*)&amp;<name>sqlite3_sync_count</name></expr></argument>, <argument><expr><name>TCL_LINK_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_LinkVar</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"sqlite_fullsync_count"</expr></argument>,
      <argument><expr>(<name>char</name>*)&amp;<name>sqlite3_fullsync_count</name></expr></argument>, <argument><expr><name>TCL_LINK_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_ENABLE_FTS3</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>SQLITE_TEST</name></expr></argument>)</argument_list></call></expr></cpp:if>
  <expr_stmt><expr><call><name>Tcl_LinkVar</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"sqlite_fts3_enable_parentheses"</expr></argument>,
      <argument><expr>(<name>char</name>*)&amp;<name>sqlite3_fts3_enable_parentheses</name></expr></argument>, <argument><expr><name>TCL_LINK_INT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>
</unit>
