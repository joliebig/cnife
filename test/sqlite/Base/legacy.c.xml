<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="legacy.c" filename=""><comment type="block">/*
** 2001 September 15
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** Main file for the SQLite library.  The routines in this file
** implement the programmer interface to the library.  Routines in
** other files are for internal use by SQLite and should not be
** accessed by users of the library.
**
** $Id: legacy.c,v 1.30 2008/12/10 19:26:24 drh Exp $
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<comment type="block">/*
** Execute SQL code.  Return one of the SQLITE_ success/failure
** codes.  Also write an error message into memory obtained from
** malloc() and make *pzErrMsg point to that message.
**
** If the SQL is a query, then for each row in the query result
** the xCallback() function is called.  pArg becomes the first
** argument to xCallback().  If xCallback=NULL then no callback
** is invoked, even for queries.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3_exec</name><parameter_list>(
  <param><decl><type><name>sqlite3</name> *</type><name>db</name></decl></param>,                <comment type="block">/* The database on which the SQL executes */</comment>
  <param><decl><type><name>const</name> <name>char</name> *</type><name>zSql</name></decl></param>,           <comment type="block">/* The SQL to be executed */</comment>
  <param><decl><type><name>sqlite3_callback</name></type> <name>xCallback</name></decl></param>, <comment type="block">/* Invoke this callback routine */</comment>
  <param><decl><type><name>void</name> *</type><name>pArg</name></decl></param>,                 <comment type="block">/* First argument to xCallback() */</comment>
  <param><decl><type><name>char</name> **</type><name>pzErrMsg</name></decl></param>             <comment type="block">/* Write error messages here */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> =<init> <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>zLeftover</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3_stmt</name> *</type><name>pStmt</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>char</name> **</type><name>azCols</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>nRetry</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>nCallback</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>zSql</name>==0</expr> )</condition><then> <expr_stmt><expr><name>zSql</name> = ""</expr>;</expr_stmt></then></if>

  <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name>db</name>-&gt;<name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3Error</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>SQLITE_OK</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <while>while<condition>( <expr>(<name>rc</name>==<name>SQLITE_OK</name> || (<name>rc</name>==<name>SQLITE_SCHEMA</name> &amp;&amp; (++<name>nRetry</name>)&lt;2)) &amp;&amp; <name><name>zSql</name><index>[<expr>0</expr>]</index></name></expr> )</condition><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>nCol</name></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>char</name> **</type><name>azVals</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>

    <expr_stmt><expr><name>pStmt</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_prepare</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zSql</name></expr></argument>, <argument><expr>-1</expr></argument>, <argument><expr>&amp;<name>pStmt</name></expr></argument>, <argument><expr>&amp;<name>zLeftover</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name>rc</name>==<name>SQLITE_OK</name> || <name>pStmt</name>==0</expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_OK</name></expr> )</condition><then><block>{
      <continue>continue;</continue>
    }</block></then></if>
    <if>if<condition>( <expr>!<name>pStmt</name></expr> )</condition><then><block>{
      <comment type="block">/* this happens for a comment or white-space */</comment>
      <expr_stmt><expr><name>zSql</name> = <name>zLeftover</name></expr>;</expr_stmt>
      <continue>continue;</continue>
    }</block></then></if>

    <expr_stmt><expr><name>nCallback</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>nCol</name> = <call><name>sqlite3_column_count</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

    <while>while<condition>( <expr>1</expr> )</condition><block>{
      <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
      <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_step</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <comment type="block">/* Invoke the callback function if required */</comment>
      <if>if<condition>( <expr><name>xCallback</name> &amp;&amp; (<name>SQLITE_ROW</name>==<name>rc</name> || 
          (<name>SQLITE_DONE</name>==<name>rc</name> &amp;&amp; !<name>nCallback</name> &amp;&amp; <name>db</name>-&gt;<name>flags</name>&amp;<name>SQLITE_NullCallback</name>))</expr> )</condition><then><block>{
        <if>if<condition>( <expr>0==<name>nCallback</name></expr> )</condition><then><block>{
          <if>if<condition>( <expr><name>azCols</name>==0</expr> )</condition><then><block>{
            <expr_stmt><expr><name>azCols</name> = <call><name>sqlite3DbMallocZero</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr>2*<name>nCol</name>*<call><name>sizeof</name><argument_list>(<argument><expr><name>const</name> <name>char</name>*</expr></argument>)</argument_list></call> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>( <expr><name>azCols</name>==0</expr> )</condition><then><block>{
              <goto>goto <name>exec_out</name>;</goto>
            }</block></then></if>
          }</block></then></if>
          <for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<name>nCol</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
            <expr_stmt><expr><name><name>azCols</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>char</name> *)<call><name>sqlite3_column_name</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <comment type="block">/* sqlite3VdbeSetColName() installs column names as UTF8
            ** strings so there is no way for sqlite3_column_name() to fail. */</comment>
            <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><name><name>azCols</name><index>[<expr><name>i</name></expr>]</index></name>!=0</expr></argument> )</argument_list></call></expr>;</expr_stmt>
          }</block></for>
          <expr_stmt><expr><name>nCallback</name>++</expr>;</expr_stmt>
        }</block></then></if>
        <if>if<condition>( <expr><name>rc</name>==<name>SQLITE_ROW</name></expr> )</condition><then><block>{
          <expr_stmt><expr><name>azVals</name> = &amp;<name><name>azCols</name><index>[<expr><name>nCol</name></expr>]</index></name></expr>;</expr_stmt>
          <for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<name>nCol</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
            <expr_stmt><expr><name><name>azVals</name><index>[<expr><name>i</name></expr>]</index></name> = (<name>char</name> *)<call><name>sqlite3_column_text</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if<condition>( <expr>!<name><name>azVals</name><index>[<expr><name>i</name></expr>]</index></name> &amp;&amp; <call><name>sqlite3_column_type</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>, <argument><expr><name>i</name></expr></argument>)</argument_list></call>!=<name>SQLITE_NULL</name></expr> )</condition><then><block>{
              <expr_stmt><expr><name>db</name>-&gt;<name>mallocFailed</name> = 1</expr>;</expr_stmt>
              <goto>goto <name>exec_out</name>;</goto>
            }</block></then></if>
          }</block></for>
        }</block></then></if>
        <if>if<condition>( <expr><call><name>xCallback</name><argument_list>(<argument><expr><name>pArg</name></expr></argument>, <argument><expr><name>nCol</name></expr></argument>, <argument><expr><name>azVals</name></expr></argument>, <argument><expr><name>azCols</name></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
          <expr_stmt><expr><name>rc</name> = <name>SQLITE_ABORT</name></expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <expr_stmt><expr><name>pStmt</name> = 0</expr>;</expr_stmt>
          <expr_stmt><expr><call><name>sqlite3Error</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>SQLITE_ABORT</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
          <goto>goto <name>exec_out</name>;</goto>
        }</block></then></if>
      }</block></then></if>

      <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_ROW</name></expr> )</condition><then><block>{
        <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>pStmt</name> = 0</expr>;</expr_stmt>
        <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_SCHEMA</name></expr> )</condition><then><block>{
          <expr_stmt><expr><name>nRetry</name> = 0</expr>;</expr_stmt>
          <expr_stmt><expr><name>zSql</name> = <name>zLeftover</name></expr>;</expr_stmt>
          <while>while<condition>( <macro><name>isspace</name><argument_list>(<argument>(unsigned char)zSql[0]</argument>)</argument_list></macro> )</condition> <expr_stmt><expr><name>zSql</name>++</expr>;</expr_stmt></while>
        }</block></then></if>
        <break>break;</break>
      }</block></then></if>
    }</block></while>

    <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>azCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>azCols</name> = 0</expr>;</expr_stmt>
  }</block></while>

<label><name>exec_out</name>:</label>
  <if>if<condition>( <expr><name>pStmt</name></expr> )</condition><then> <expr_stmt><expr><call><name>sqlite3_finalize</name><argument_list>(<argument><expr><name>pStmt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
  <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>azCols</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3ApiExit</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>rc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_OK</name> &amp;&amp; <name>rc</name>==<call><name>sqlite3_errcode</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call> &amp;&amp; <name>pzErrMsg</name></expr> )</condition><then><block>{
    <decl_stmt><decl><type><name>int</name></type> <name>nErrMsg</name> =<init> <expr>1 + <call><name>sqlite3Strlen30</name><argument_list>(<argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr>*<name>pzErrMsg</name> = <call><name>sqlite3Malloc</name><argument_list>(<argument><expr><name>nErrMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>( <expr>*<name>pzErrMsg</name></expr> )</condition><then><block>{
      <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr>*<name>pzErrMsg</name></expr></argument>, <argument><expr><call><name>sqlite3_errmsg</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>nErrMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></then><else>else <if>if<condition>( <expr><name>pzErrMsg</name></expr> )</condition><then><block>{
    <expr_stmt><expr>*<name>pzErrMsg</name> = 0</expr>;</expr_stmt>
  }</block></then></if></else></if>

  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr>(<name>rc</name>&amp;<name>db</name>-&gt;<name>errMask</name>)==<name>rc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name>db</name>-&gt;<name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
}</block></function>
</unit>
