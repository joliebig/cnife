<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="test9.c" filename=""><comment type="block">/*
** 2007 March 29
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
**
** This file contains obscure tests of the C-interface required
** for completeness. Test code is written in C for these cases
** as there is not much point in binding to Tcl.
**
** $Id: test9.c,v 1.6 2008/07/11 13:53:55 drh Exp $
*/</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"tcl.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>

<comment type="block">/*
** c_collation_test
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>c_collation_test</name><parameter_list>(
  <param><decl><type><name>ClientData</name></type> <name>clientData</name></decl></param>, <comment type="block">/* Pointer to sqlite3_enable_XXX function */</comment>
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>  <comment type="block">/* Command arguments */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>zErrFunction</name> =<init> <expr>"N/A"</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name></decl>;</decl_stmt>

  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <if>if<condition>( <expr><name>objc</name>!=1</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>

  <comment type="block">/* Open a database. */</comment>
  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_open</name><argument_list>(<argument><expr>":memory:"</expr></argument>, <argument><expr>&amp;<name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_OK</name></expr> )</condition><then><block>{
    <expr_stmt><expr><name>zErrFunction</name> = "sqlite3_open"</expr>;</expr_stmt>
    <goto>goto <name>error_out</name>;</goto>
  }</block></then></if>

  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_create_collation</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr>"collate"</expr></argument>, <argument><expr>456</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_MISUSE</name></expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>zErrFunction</name> = "sqlite3_create_collation"</expr>;</expr_stmt>
    <goto>goto <name>error_out</name>;</goto>
  }</block></then></if>

  <expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_OK</name></expr>;</return>

<label><name>error_out</name>:</label>
  <expr_stmt><expr><call><name>Tcl_ResetResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"Error testing function: "</expr></argument>, <argument><expr><name>zErrFunction</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/*
** c_realloc_test
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>c_realloc_test</name><parameter_list>(
  <param><decl><type><name>ClientData</name></type> <name>clientData</name></decl></param>, <comment type="block">/* Pointer to sqlite3_enable_XXX function */</comment>
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>  <comment type="block">/* Command arguments */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>void</name> *</type><name>p</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>zErrFunction</name> =<init> <expr>"N/A"</expr></init></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=1</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>

  <expr_stmt><expr><name>p</name> = <call><name>sqlite3_malloc</name><argument_list>(<argument><expr>5</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr>!<name>p</name></expr> )</condition><then><block>{
    <expr_stmt><expr><name>zErrFunction</name> = "sqlite3_malloc"</expr>;</expr_stmt>
    <goto>goto <name>error_out</name>;</goto>
  }</block></then></if>

  <comment type="block">/* Test that realloc()ing a block of memory to a negative size is
  ** the same as free()ing that memory.
  */</comment>
  <expr_stmt><expr><name>p</name> = <call><name>sqlite3_realloc</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>-1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>p</name></expr> )</condition><then><block>{
    <expr_stmt><expr><name>zErrFunction</name> = "sqlite3_realloc"</expr>;</expr_stmt>
    <goto>goto <name>error_out</name>;</goto>
  }</block></then></if>

  <return>return <expr><name>TCL_OK</name></expr>;</return>

<label><name>error_out</name>:</label>
  <expr_stmt><expr><call><name>Tcl_ResetResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"Error testing function: "</expr></argument>, <argument><expr><name>zErrFunction</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_ERROR</name></expr>;</return>
}</block></function>


<comment type="block">/*
** c_misuse_test
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>c_misuse_test</name><parameter_list>(
  <param><decl><type><name>ClientData</name></type> <name>clientData</name></decl></param>, <comment type="block">/* Pointer to sqlite3_enable_XXX function */</comment>
  <param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>,    <comment type="block">/* The TCL interpreter that invoked this command */</comment>
  <param><decl><type><name>int</name></type> <name>objc</name></decl></param>,              <comment type="block">/* Number of arguments */</comment>
  <param><decl><type><name>Tcl_Obj</name> *<name>CONST</name></type> <name><name>objv</name><index>[]</index></name></decl></param>  <comment type="block">/* Command arguments */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>zErrFunction</name> =<init> <expr>"N/A"</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>sqlite3</name> *</type><name>db</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>

  <if>if<condition>( <expr><name>objc</name>!=1</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>Tcl_WrongNumArgs</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>objv</name></expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>TCL_ERROR</name></expr>;</return>
  }</block></then></if>

  <comment type="block">/* Open a database. Then close it again. We need to do this so that
  ** we have a "closed database handle" to pass to various API functions.
  */</comment>
  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_open</name><argument_list>(<argument><expr>":memory:"</expr></argument>, <argument><expr>&amp;<name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_OK</name></expr> )</condition><then><block>{
    <expr_stmt><expr><name>zErrFunction</name> = "sqlite3_open"</expr>;</expr_stmt>
    <goto>goto <name>error_out</name>;</goto>
  }</block></then></if>
  <expr_stmt><expr><call><name>sqlite3_close</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>


  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_errcode</name><argument_list>(<argument><expr><name>db</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_MISUSE</name></expr> )</condition><then><block>{
    <expr_stmt><expr><name>zErrFunction</name> = "sqlite3_errcode"</expr>;</expr_stmt>
    <goto>goto <name>error_out</name>;</goto>
  }</block></then></if>

  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_prepare</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_MISUSE</name></expr> )</condition><then><block>{
    <expr_stmt><expr><name>zErrFunction</name> = "sqlite3_prepare"</expr>;</expr_stmt>
    <goto>goto <name>error_out</name>;</goto>
  }</block></then></if>

  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_prepare_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_MISUSE</name></expr> )</condition><then><block>{
    <expr_stmt><expr><name>zErrFunction</name> = "sqlite3_prepare_v2"</expr>;</expr_stmt>
    <goto>goto <name>error_out</name>;</goto>
  }</block></then></if>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_UTF16</name></cpp:ifndef>
  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_prepare16</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_MISUSE</name></expr> )</condition><then><block>{
    <expr_stmt><expr><name>zErrFunction</name> = "sqlite3_prepare16"</expr>;</expr_stmt>
    <goto>goto <name>error_out</name>;</goto>
  }</block></then></if>
  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_prepare16_v2</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>rc</name>!=<name>SQLITE_MISUSE</name></expr> )</condition><then><block>{
    <expr_stmt><expr><name>zErrFunction</name> = "sqlite3_prepare16_v2"</expr>;</expr_stmt>
    <goto>goto <name>error_out</name>;</goto>
  }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

  <return>return <expr><name>TCL_OK</name></expr>;</return>

<label><name>error_out</name>:</label>
  <expr_stmt><expr><call><name>Tcl_ResetResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>Tcl_AppendResult</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr>"Error testing function: "</expr></argument>, <argument><expr><name>zErrFunction</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>TCL_ERROR</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Register commands with the TCL interpreter.
*/</comment>
<function><type><name>int</name></type> <name>Sqlitetest9_Init</name><parameter_list>(<param><decl><type><name>Tcl_Interp</name> *</type><name>interp</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>static</name> <struct>struct <block>{<public type="default"/>
     <decl_stmt><decl><type><name>char</name> *</type><name>zName</name></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>Tcl_ObjCmdProc</name> *</type><name>xProc</name></decl>;</decl_stmt>
     <decl_stmt><decl><type><name>void</name> *</type><name>clientData</name></decl>;</decl_stmt>
  }</block> <decl><name><name>aObjCmd</name><index>[]</index></name> =<init> <expr><block>{
     <expr><block>{ <expr>"c_misuse_test"</expr>,    <expr><name>c_misuse_test</name></expr>, <expr>0</expr> }</block></expr>,
     <expr><block>{ <expr>"c_realloc_test"</expr>,   <expr><name>c_realloc_test</name></expr>, <expr>0</expr> }</block></expr>,
     <expr><block>{ <expr>"c_collation_test"</expr>, <expr><name>c_collation_test</name></expr>, <expr>0</expr> }</block></expr>,
  }</block></expr></init></decl>;</struct></type></decl></decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<call><name>sizeof</name><argument_list>(<argument><expr><name>aObjCmd</name></expr></argument>)</argument_list></call>/<call><name>sizeof</name><argument_list>(<argument><expr><name><name>aObjCmd</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
    <expr_stmt><expr><call><name>Tcl_CreateObjCommand</name><argument_list>(<argument><expr><name>interp</name></expr></argument>, <argument><expr><name><name>aObjCmd</name><index>[<expr><name>i</name></expr>]</index></name>.<name>zName</name></expr></argument>, 
        <argument><expr><name><name>aObjCmd</name><index>[<expr><name>i</name></expr>]</index></name>.<name>xProc</name></expr></argument>, <argument><expr><name><name>aObjCmd</name><index>[<expr><name>i</name></expr>]</index></name>.<name>clientData</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <return>return <expr><name>TCL_OK</name></expr>;</return>
}</block></function>
</unit>
