<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="loadext.c" filename=""><comment type="block">/*
** 2006 June 7
**
** The author disclaims copyright to this source code.  In place of
** a legal notice, here is a blessing:
**
**    May you do good and not evil.
**    May you find forgiveness for yourself and forgive others.
**    May you share freely, never taking more than you give.
**
*************************************************************************
** This file contains code used to dynamically load extensions into
** the SQLite library.
**
** $Id: loadext.c,v 1.57 2008/12/08 18:19:18 drh Exp $
*/</comment>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_CORE</name></cpp:ifndef>
  <cpp:define>#<cpp:directive>define</cpp:directive> <name>SQLITE_CORE</name> 1</cpp:define>  <comment type="block">/* Disable the API redefinition in sqlite3ext.h */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqlite3ext.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"sqliteInt.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;ctype.h&gt;</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_LOAD_EXTENSION</name></cpp:ifndef>

<comment type="block">/*
** Some API routines are omitted when various features are
** excluded from a build of SQLite.  Substitute a NULL pointer
** for any missing APIs.
*/</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_ENABLE_COLUMN_METADATA</name></cpp:ifndef>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3_column_database_name</name>   0</cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3_column_database_name16</name> 0</cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3_column_table_name</name>      0</cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3_column_table_name16</name>    0</cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3_column_origin_name</name>     0</cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3_column_origin_name16</name>   0</cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3_table_column_metadata</name>  0</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_AUTHORIZATION</name></cpp:ifdef>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3_set_authorizer</name>         0</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_UTF16</name></cpp:ifdef>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3_bind_text16</name>            0</cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3_collation_needed16</name>     0</cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3_column_decltype16</name>      0</cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3_column_name16</name>          0</cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3_column_text16</name>          0</cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3_complete16</name>             0</cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3_create_collation16</name>     0</cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3_create_function16</name>      0</cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3_errmsg16</name>               0</cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3_open16</name>                 0</cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3_prepare16</name>              0</cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3_prepare16_v2</name>           0</cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3_result_error16</name>         0</cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3_result_text16</name>          0</cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3_result_text16be</name>        0</cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3_result_text16le</name>        0</cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3_value_text16</name>           0</cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3_value_text16be</name>         0</cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3_value_text16le</name>         0</cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3_column_database_name16</name> 0</cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3_column_table_name16</name>    0</cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3_column_origin_name16</name>   0</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_COMPLETE</name></cpp:ifdef>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3_complete</name> 0</cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3_complete16</name> 0</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_PROGRESS_CALLBACK</name></cpp:ifdef>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3_progress_handler</name> 0</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_VIRTUALTABLE</name></cpp:ifdef>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3_create_module</name> 0</cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3_create_module_v2</name> 0</cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3_declare_vtab</name> 0</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_SHARED_CACHE</name></cpp:ifdef>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3_enable_shared_cache</name> 0</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_TRACE</name></cpp:ifdef>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3_profile</name>       0</cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3_trace</name>         0</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_GET_TABLE</name></cpp:ifdef>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3_free_table</name>    0</cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <name>sqlite3_get_table</name>     0</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_INCRBLOB</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>sqlite3_bind_zeroblob</name>  0</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>sqlite3_blob_bytes</name>     0</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>sqlite3_blob_close</name>     0</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>sqlite3_blob_open</name>      0</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>sqlite3_blob_read</name>      0</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>sqlite3_blob_write</name>     0</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<comment type="block">/*
** The following structure contains pointers to all SQLite API routines.
** A pointer to this structure is passed into extensions when they are
** loaded so that the extension can make calls back into the SQLite
** library.
**
** When adding new APIs, add them to the bottom of this structure
** in order to preserve backwards compatibility.
**
** Extensions that use newer APIs should first call the
** sqlite3_libversion_number() to make sure that the API they
** intend to use is supported by the library.  Extensions should
** also check to make sure that the pointer to the function is
** not NULL before calling it.
*/</comment>
<decl_stmt><decl><type><name>static</name> <name>const</name> <name>sqlite3_api_routines</name></type> <name>sqlite3Apis</name> =<init> <expr><block>{
  <expr><name>sqlite3_aggregate_context</name></expr>,
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_DEPRECATED</name></cpp:ifndef>
  <expr><name>sqlite3_aggregate_count</name></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr>0</expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr><name>sqlite3_bind_blob</name></expr>,
  <expr><name>sqlite3_bind_double</name></expr>,
  <expr><name>sqlite3_bind_int</name></expr>,
  <expr><name>sqlite3_bind_int64</name></expr>,
  <expr><name>sqlite3_bind_null</name></expr>,
  <expr><name>sqlite3_bind_parameter_count</name></expr>,
  <expr><name>sqlite3_bind_parameter_index</name></expr>,
  <expr><name>sqlite3_bind_parameter_name</name></expr>,
  <expr><name>sqlite3_bind_text</name></expr>,
  <expr><name>sqlite3_bind_text16</name></expr>,
  <expr><name>sqlite3_bind_value</name></expr>,
  <expr><name>sqlite3_busy_handler</name></expr>,
  <expr><name>sqlite3_busy_timeout</name></expr>,
  <expr><name>sqlite3_changes</name></expr>,
  <expr><name>sqlite3_close</name></expr>,
  <expr><name>sqlite3_collation_needed</name></expr>,
  <expr><name>sqlite3_collation_needed16</name></expr>,
  <expr><name>sqlite3_column_blob</name></expr>,
  <expr><name>sqlite3_column_bytes</name></expr>,
  <expr><name>sqlite3_column_bytes16</name></expr>,
  <expr><name>sqlite3_column_count</name></expr>,
  <expr><name>sqlite3_column_database_name</name></expr>,
  <expr><name>sqlite3_column_database_name16</name></expr>,
  <expr><name>sqlite3_column_decltype</name></expr>,
  <expr><name>sqlite3_column_decltype16</name></expr>,
  <expr><name>sqlite3_column_double</name></expr>,
  <expr><name>sqlite3_column_int</name></expr>,
  <expr><name>sqlite3_column_int64</name></expr>,
  <expr><name>sqlite3_column_name</name></expr>,
  <expr><name>sqlite3_column_name16</name></expr>,
  <expr><name>sqlite3_column_origin_name</name></expr>,
  <expr><name>sqlite3_column_origin_name16</name></expr>,
  <expr><name>sqlite3_column_table_name</name></expr>,
  <expr><name>sqlite3_column_table_name16</name></expr>,
  <expr><name>sqlite3_column_text</name></expr>,
  <expr><name>sqlite3_column_text16</name></expr>,
  <expr><name>sqlite3_column_type</name></expr>,
  <expr><name>sqlite3_column_value</name></expr>,
  <expr><name>sqlite3_commit_hook</name></expr>,
  <expr><name>sqlite3_complete</name></expr>,
  <expr><name>sqlite3_complete16</name></expr>,
  <expr><name>sqlite3_create_collation</name></expr>,
  <expr><name>sqlite3_create_collation16</name></expr>,
  <expr><name>sqlite3_create_function</name></expr>,
  <expr><name>sqlite3_create_function16</name></expr>,
  <expr><name>sqlite3_create_module</name></expr>,
  <expr><name>sqlite3_data_count</name></expr>,
  <expr><name>sqlite3_db_handle</name></expr>,
  <expr><name>sqlite3_declare_vtab</name></expr>,
  <expr><name>sqlite3_enable_shared_cache</name></expr>,
  <expr><name>sqlite3_errcode</name></expr>,
  <expr><name>sqlite3_errmsg</name></expr>,
  <expr><name>sqlite3_errmsg16</name></expr>,
  <expr><name>sqlite3_exec</name></expr>,
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_DEPRECATED</name></cpp:ifndef>
  <expr><name>sqlite3_expired</name></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr>0</expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr><name>sqlite3_finalize</name></expr>,
  <expr><name>sqlite3_free</name></expr>,
  <expr><name>sqlite3_free_table</name></expr>,
  <expr><name>sqlite3_get_autocommit</name></expr>,
  <expr><name>sqlite3_get_auxdata</name></expr>,
  <expr><name>sqlite3_get_table</name></expr>,
  <expr>0</expr>,     <comment type="block">/* Was sqlite3_global_recover(), but that function is deprecated */</comment>
  <expr><name>sqlite3_interrupt</name></expr>,
  <expr><name>sqlite3_last_insert_rowid</name></expr>,
  <expr><name>sqlite3_libversion</name></expr>,
  <expr><name>sqlite3_libversion_number</name></expr>,
  <expr><name>sqlite3_malloc</name></expr>,
  <expr><name>sqlite3_mprintf</name></expr>,
  <expr><name>sqlite3_open</name></expr>,
  <expr><name>sqlite3_open16</name></expr>,
  <expr><name>sqlite3_prepare</name></expr>,
  <expr><name>sqlite3_prepare16</name></expr>,
  <expr><name>sqlite3_profile</name></expr>,
  <expr><name>sqlite3_progress_handler</name></expr>,
  <expr><name>sqlite3_realloc</name></expr>,
  <expr><name>sqlite3_reset</name></expr>,
  <expr><name>sqlite3_result_blob</name></expr>,
  <expr><name>sqlite3_result_double</name></expr>,
  <expr><name>sqlite3_result_error</name></expr>,
  <expr><name>sqlite3_result_error16</name></expr>,
  <expr><name>sqlite3_result_int</name></expr>,
  <expr><name>sqlite3_result_int64</name></expr>,
  <expr><name>sqlite3_result_null</name></expr>,
  <expr><name>sqlite3_result_text</name></expr>,
  <expr><name>sqlite3_result_text16</name></expr>,
  <expr><name>sqlite3_result_text16be</name></expr>,
  <expr><name>sqlite3_result_text16le</name></expr>,
  <expr><name>sqlite3_result_value</name></expr>,
  <expr><name>sqlite3_rollback_hook</name></expr>,
  <expr><name>sqlite3_set_authorizer</name></expr>,
  <expr><name>sqlite3_set_auxdata</name></expr>,
  <expr><name>sqlite3_snprintf</name></expr>,
  <expr><name>sqlite3_step</name></expr>,
  <expr><name>sqlite3_table_column_metadata</name></expr>,
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_DEPRECATED</name></cpp:ifndef>
  <expr><name>sqlite3_thread_cleanup</name></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr>0</expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr><name>sqlite3_total_changes</name></expr>,
  <expr><name>sqlite3_trace</name></expr>,
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_DEPRECATED</name></cpp:ifndef>
  <expr><name>sqlite3_transfer_bindings</name></expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr>0</expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr><name>sqlite3_update_hook</name></expr>,
  <expr><name>sqlite3_user_data</name></expr>,
  <expr><name>sqlite3_value_blob</name></expr>,
  <expr><name>sqlite3_value_bytes</name></expr>,
  <expr><name>sqlite3_value_bytes16</name></expr>,
  <expr><name>sqlite3_value_double</name></expr>,
  <expr><name>sqlite3_value_int</name></expr>,
  <expr><name>sqlite3_value_int64</name></expr>,
  <expr><name>sqlite3_value_numeric_type</name></expr>,
  <expr><name>sqlite3_value_text</name></expr>,
  <expr><name>sqlite3_value_text16</name></expr>,
  <expr><name>sqlite3_value_text16be</name></expr>,
  <expr><name>sqlite3_value_text16le</name></expr>,
  <expr><name>sqlite3_value_type</name></expr>,
  <expr><name>sqlite3_vmprintf</name></expr>,
  <comment type="block">/*
  ** The original API set ends here.  All extensions can call any
  ** of the APIs above provided that the pointer is not NULL.  But
  ** before calling APIs that follow, extension should check the
  ** sqlite3_libversion_number() to make sure they are dealing with
  ** a library that is new enough to support that API.
  *************************************************************************
  */</comment>
  <expr><name>sqlite3_overload_function</name></expr>,

  <comment type="block">/*
  ** Added after 3.3.13
  */</comment>
  <expr><name>sqlite3_prepare_v2</name></expr>,
  <expr><name>sqlite3_prepare16_v2</name></expr>,
  <expr><name>sqlite3_clear_bindings</name></expr>,

  <comment type="block">/*
  ** Added for 3.4.1
  */</comment>
  <expr><name>sqlite3_create_module_v2</name></expr>,

  <comment type="block">/*
  ** Added for 3.5.0
  */</comment>
  <expr><name>sqlite3_bind_zeroblob</name></expr>,
  <expr><name>sqlite3_blob_bytes</name></expr>,
  <expr><name>sqlite3_blob_close</name></expr>,
  <expr><name>sqlite3_blob_open</name></expr>,
  <expr><name>sqlite3_blob_read</name></expr>,
  <expr><name>sqlite3_blob_write</name></expr>,
  <expr><name>sqlite3_create_collation_v2</name></expr>,
  <expr><name>sqlite3_file_control</name></expr>,
  <expr><name>sqlite3_memory_highwater</name></expr>,
  <expr><name>sqlite3_memory_used</name></expr>,
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_MUTEX_OMIT</name></cpp:ifdef>
  <expr>0</expr>, 
  <expr>0</expr>, 
  <expr>0</expr>,
  <expr>0</expr>,
  <expr>0</expr>,
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
  <expr><name>sqlite3_mutex_alloc</name></expr>,
  <expr><name>sqlite3_mutex_enter</name></expr>,
  <expr><name>sqlite3_mutex_free</name></expr>,
  <expr><name>sqlite3_mutex_leave</name></expr>,
  <expr><name>sqlite3_mutex_try</name></expr>,
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <expr><name>sqlite3_open_v2</name></expr>,
  <expr><name>sqlite3_release_memory</name></expr>,
  <expr><name>sqlite3_result_error_nomem</name></expr>,
  <expr><name>sqlite3_result_error_toobig</name></expr>,
  <expr><name>sqlite3_sleep</name></expr>,
  <expr><name>sqlite3_soft_heap_limit</name></expr>,
  <expr><name>sqlite3_vfs_find</name></expr>,
  <expr><name>sqlite3_vfs_register</name></expr>,
  <expr><name>sqlite3_vfs_unregister</name></expr>,

  <comment type="block">/*
  ** Added for 3.5.8
  */</comment>
  <expr><name>sqlite3_threadsafe</name></expr>,
  <expr><name>sqlite3_result_zeroblob</name></expr>,
  <expr><name>sqlite3_result_error_code</name></expr>,
  <expr><name>sqlite3_test_control</name></expr>,
  <expr><name>sqlite3_randomness</name></expr>,
  <expr><name>sqlite3_context_db_handle</name></expr>,

  <comment type="block">/*
  ** Added for 3.6.0
  */</comment>
  <expr><name>sqlite3_extended_result_codes</name></expr>,
  <expr><name>sqlite3_limit</name></expr>,
  <expr><name>sqlite3_next_stmt</name></expr>,
  <expr><name>sqlite3_sql</name></expr>,
  <expr><name>sqlite3_status</name></expr>,
}</block></expr></init></decl>;</decl_stmt>

<comment type="block">/*
** Attempt to load an SQLite extension library contained in the file
** zFile.  The entry point is zProc.  zProc may be 0 in which case a
** default entry point name (sqlite3_extension_init) is used.  Use
** of the default name is recommended.
**
** Return SQLITE_OK on success and SQLITE_ERROR if something goes wrong.
**
** If an error occurs and pzErrMsg is not 0, then fill *pzErrMsg with 
** error message text.  The calling function should free this memory
** by calling sqlite3DbFree(db, ).
*/</comment>
<function><type><name>static</name> <name>int</name></type> <name>sqlite3LoadExtension</name><parameter_list>(
  <param><decl><type><name>sqlite3</name> *</type><name>db</name></decl></param>,          <comment type="block">/* Load the extension into this database connection */</comment>
  <param><decl><type><name>const</name> <name>char</name> *</type><name>zFile</name></decl></param>,    <comment type="block">/* Name of the shared library containing extension */</comment>
  <param><decl><type><name>const</name> <name>char</name> *</type><name>zProc</name></decl></param>,    <comment type="block">/* Entry point.  Use "sqlite3_extension_init" if 0 */</comment>
  <param><decl><type><name>char</name> **</type><name>pzErrMsg</name></decl></param>       <comment type="block">/* Put error message here if not 0 */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>sqlite3_vfs</name> *</type><name>pVfs</name> =<init> <expr><name>db</name>-&gt;<name>pVfs</name></expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> *</type><name>handle</name></decl>;</decl_stmt>
  <function_decl><type><name>int</name></type> (*<name>xInit</name>)<parameter_list>(<param><decl><type><name>sqlite3</name>*</type></decl></param>,<param><decl><type><name>char</name>**</type></decl></param>,<param><decl><type><name>const</name> <name>sqlite3_api_routines</name>*</type></decl></param>)</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>char</name> *</type><name>zErrmsg</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>void</name> **</type><name>aHandle</name></decl>;</decl_stmt>

  <comment type="block">/* Ticket #1863.  To avoid a creating security problems for older
  ** applications that relink against newer versions of SQLite, the
  ** ability to run load_extension is turned off by default.  One
  ** must call sqlite3_enable_load_extension() to turn on extension
  ** loading.  Otherwise you get the following error.
  */</comment>
  <if>if<condition>( <expr>(<name>db</name>-&gt;<name>flags</name> &amp; <name>SQLITE_LoadExtension</name>)==0</expr> )</condition><then><block>{
    <if>if<condition>( <expr><name>pzErrMsg</name></expr> )</condition><then><block>{
      <expr_stmt><expr>*<name>pzErrMsg</name> = <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr>"not authorized"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
  }</block></then></if>

  <if>if<condition>( <expr><name>zProc</name>==0</expr> )</condition><then><block>{
    <expr_stmt><expr><name>zProc</name> = "sqlite3_extension_init"</expr>;</expr_stmt>
  }</block></then></if>

  <expr_stmt><expr><name>handle</name> = <call><name>sqlite3OsDlOpen</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>, <argument><expr><name>zFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>handle</name>==0</expr> )</condition><then><block>{
    <if>if<condition>( <expr><name>pzErrMsg</name></expr> )</condition><then><block>{
      <decl_stmt><decl><type><name>char</name></type> <name><name>zErr</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>zErr</name><index>[<expr><call><name>sizeof</name><argument_list>(<argument><expr><name>zErr</name></expr></argument>)</argument_list></call>-1</expr>]</index></name> = '\0'</expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>zErr</name></expr></argument>)</argument_list></call>-1</expr></argument>, <argument><expr><name>zErr</name></expr></argument>, 
          <argument><expr>"unable to open shared library [%s]"</expr></argument>, <argument><expr><name>zFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3OsDlError</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>zErr</name></expr></argument>)</argument_list></call>-1</expr></argument>, <argument><expr><name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr>*<name>pzErrMsg</name> = <call><name>sqlite3DbStrDup</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
  }</block></then></if>
  <expr_stmt><expr><name>xInit</name> = (<call><name>int</name><argument_list>(<argument><expr>*</expr></argument>)</argument_list></call>(<name>sqlite3</name>*,<name>char</name>**,<name>const</name> <name>sqlite3_api_routines</name>*))
                   <call><name>sqlite3OsDlSym</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>, <argument><expr><name>zProc</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>xInit</name>==0</expr> )</condition><then><block>{
    <if>if<condition>( <expr><name>pzErrMsg</name></expr> )</condition><then><block>{
      <decl_stmt><decl><type><name>char</name></type> <name><name>zErr</name><index>[<expr>256</expr>]</index></name></decl>;</decl_stmt>
      <expr_stmt><expr><name><name>zErr</name><index>[<expr><call><name>sizeof</name><argument_list>(<argument><expr><name>zErr</name></expr></argument>)</argument_list></call>-1</expr>]</index></name> = '\0'</expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_snprintf</name><argument_list>(<argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>zErr</name></expr></argument>)</argument_list></call>-1</expr></argument>, <argument><expr><name>zErr</name></expr></argument>,
          <argument><expr>"no entry point [%s] in shared library [%s]"</expr></argument>, <argument><expr><name>zProc</name></expr></argument>,<argument><expr><name>zFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3OsDlError</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>zErr</name></expr></argument>)</argument_list></call>-1</expr></argument>, <argument><expr><name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr>*<name>pzErrMsg</name> = <call><name>sqlite3DbStrDup</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>zErr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3OsDlClose</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
  }</block></then><else>else <if>if<condition>( <expr><call><name>xInit</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr>&amp;<name>zErrmsg</name></expr></argument>, <argument><expr>&amp;<name>sqlite3Apis</name></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
    <if>if<condition>( <expr><name>pzErrMsg</name></expr> )</condition><then><block>{
      <expr_stmt><expr>*<name>pzErrMsg</name> = <call><name>sqlite3_mprintf</name><argument_list>(<argument><expr>"error during initialization: %s"</expr></argument>, <argument><expr><name>zErrmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zErrmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3OsDlClose</name><argument_list>(<argument><expr><name>pVfs</name></expr></argument>, <argument><expr><name>handle</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>SQLITE_ERROR</name></expr>;</return>
  }</block></then></if></else></if>

  <comment type="block">/* Append the new shared library handle to the db-&gt;aExtension array. */</comment>
  <expr_stmt><expr><name>aHandle</name> = <call><name>sqlite3DbMallocZero</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call>*(<name>db</name>-&gt;<name>nExtension</name>+1)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>aHandle</name>==0</expr> )</condition><then><block>{
    <return>return <expr><name>SQLITE_NOMEM</name></expr>;</return>
  }</block></then></if>
  <if>if<condition>( <expr><name>db</name>-&gt;<name>nExtension</name>&gt;0</expr> )</condition><then><block>{
    <expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>aHandle</name></expr></argument>, <argument><expr><name>db</name>-&gt;<name>aExtension</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>handle</name></expr></argument>)</argument_list></call>*<name>db</name>-&gt;<name>nExtension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
  <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>db</name>-&gt;<name>aExtension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>db</name>-&gt;<name>aExtension</name> = <name>aHandle</name></expr>;</expr_stmt>

  <expr_stmt><expr><name>db</name>-&gt;<name><name>aExtension</name><index>[<expr><name>db</name>-&gt;<name>nExtension</name>++</expr>]</index></name> = <name>handle</name></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
}</block></function>
<function><type><name>int</name></type> <name>sqlite3_load_extension</name><parameter_list>(
  <param><decl><type><name>sqlite3</name> *</type><name>db</name></decl></param>,          <comment type="block">/* Load the extension into this database connection */</comment>
  <param><decl><type><name>const</name> <name>char</name> *</type><name>zFile</name></decl></param>,    <comment type="block">/* Name of the shared library containing extension */</comment>
  <param><decl><type><name>const</name> <name>char</name> *</type><name>zProc</name></decl></param>,    <comment type="block">/* Entry point.  Use "sqlite3_extension_init" if 0 */</comment>
  <param><decl><type><name>char</name> **</type><name>pzErrMsg</name></decl></param>       <comment type="block">/* Put error message here if not 0 */</comment>
)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name>db</name>-&gt;<name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3LoadExtension</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>zFile</name></expr></argument>, <argument><expr><name>zProc</name></expr></argument>, <argument><expr><name>pzErrMsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name>db</name>-&gt;<name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>rc</name></expr>;</return>
}</block></function>

<comment type="block">/*
** Call this routine when the database connection is closing in order
** to clean up loaded extensions
*/</comment>
<function><type><name>void</name></type> <name>sqlite3CloseExtensions</name><parameter_list>(<param><decl><type><name>sqlite3</name> *</type><name>db</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr><call><name>sqlite3_mutex_held</name><argument_list>(<argument><expr><name>db</name>-&gt;<name>mutex</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
  <for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<name>db</name>-&gt;<name>nExtension</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
    <expr_stmt><expr><call><name>sqlite3OsDlClose</name><argument_list>(<argument><expr><name>db</name>-&gt;<name>pVfs</name></expr></argument>, <argument><expr><name>db</name>-&gt;<name><name>aExtension</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></for>
  <expr_stmt><expr><call><name>sqlite3DbFree</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>db</name>-&gt;<name>aExtension</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="block">/*
** Enable or disable extension loading.  Extension loading is disabled by
** default so as not to open security holes in older applications.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3_enable_load_extension</name><parameter_list>(<param><decl><type><name>sqlite3</name> *</type><name>db</name></decl></param>, <param><decl><type><name>int</name></type> <name>onoff</name></decl></param>)</parameter_list><block>{
  <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name>db</name>-&gt;<name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>onoff</name></expr> )</condition><then><block>{
    <expr_stmt><expr><name>db</name>-&gt;<name>flags</name> |= <name>SQLITE_LoadExtension</name></expr>;</expr_stmt>
  }</block></then><else>else<block>{
    <expr_stmt><expr><name>db</name>-&gt;<name>flags</name> &amp;= ~<name>SQLITE_LoadExtension</name></expr>;</expr_stmt>
  }</block></else></if>
  <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name>db</name>-&gt;<name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <return>return <expr><name>SQLITE_OK</name></expr>;</return>
}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* SQLITE_OMIT_LOAD_EXTENSION */</comment>

<comment type="block">/*
** The auto-extension code added regardless of whether or not extension
** loading is supported.  We need a dummy sqlite3Apis pointer for that
** code if regular extension loading is not available.  This is that
** dummy pointer.
*/</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_LOAD_EXTENSION</name></cpp:ifdef>
<decl_stmt><decl><type><name>static</name> <name>const</name> <name>sqlite3_api_routines</name></type> <name>sqlite3Apis</name> =<init> <expr><block>{ <expr>0</expr> }</block></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/*
** The following object holds the list of automatically loaded
** extensions.
**
** This list is shared across threads.  The SQLITE_MUTEX_STATIC_MASTER
** mutex must be held while accessing this list.
*/</comment>
<typedef>typedef <type><struct>struct <name>sqlite3AutoExtList</name> sqlite3AutoExtList;</struct></type></typedef>
<decl_stmt><decl><type><name>static</name> <name>SQLITE_WSD</name> struct</type> <name>sqlite3AutoExtList</name> <block>{
  <decl_stmt><decl><type><name>int</name></type> <name>nExt</name></decl>;</decl_stmt>              <comment type="block">/* Number of entries in aExt[] */</comment>          
  <expr_stmt><expr><call><name>void</name> <argument_list>(<argument><expr>**<name>aExt</name></expr></argument>)</argument_list></call>(<name>void</name>)</expr>;</expr_stmt>   <comment type="block">/* Pointers to the extension init functions */</comment>
}</block></decl></decl_stmt> <expr_stmt><expr><name>sqlite3Autoext</name> = <block>{ <expr>0</expr>, <expr>0</expr> }</block></expr>;</expr_stmt>

<comment type="block">/* The "wsdAutoext" macro will resolve to the autoextension
** state vector.  If writable static data is unsupported on the target,
** we have to locate the state vector at run-time.  In the more common
** case where writable static data is supported, wsdStat can refer directly
** to the "sqlite3Autoext" state vector declared above.
*/</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SQLITE_OMIT_WSD</name></cpp:ifdef>
<cpp:define># <cpp:directive>define</cpp:directive> <name>wsdAutoextInit</name> \
  <name>sqlite3AutoExtList</name> *x = &amp;GLOBAL(sqlite3AutoExtList,sqlite3Autoext)</cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <name>wsdAutoext</name> <name>x</name>[0]</cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define># <cpp:directive>define</cpp:directive> <name>wsdAutoextInit</name></cpp:define>
<cpp:define># <cpp:directive>define</cpp:directive> <name>wsdAutoext</name> <name>sqlite3Autoext</name></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<comment type="block">/*
** Register a statically linked extension that is automatically
** loaded by every new database connection.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3_auto_extension</name><parameter_list>(<param><function_decl><type><name>void</name></type> (*<name>xInit</name>)<parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list></function_decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> =<init> <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_AUTOINIT</name></cpp:ifndef>
  <expr_stmt><expr><name>rc</name> = <call><name>sqlite3_initialize</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>rc</name></expr> )</condition><then><block>{
    <return>return <expr><name>rc</name></expr>;</return>
  }</block></then><else>else
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <block>{
    <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_THREADSAFE</name></expr></cpp:if>
    <decl_stmt><decl><type><name>sqlite3_mutex</name> *</type><name>mutex</name> =<init> <expr><call><name>sqlite3MutexAlloc</name><argument_list>(<argument><expr><name>SQLITE_MUTEX_STATIC_MASTER</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>wsdAutoextInit</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>i</name>&lt;<name>wsdAutoext</name>.<name>nExt</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
      <if>if<condition>( <expr><name>wsdAutoext</name>.<name><name>aExt</name><index>[<expr><name>i</name></expr>]</index></name>==<name>xInit</name></expr> )</condition><then> <break>break;</break></then></if>
    }</block></for>
    <if>if<condition>( <expr><name>i</name>==<name>wsdAutoext</name>.<name>nExt</name></expr> )</condition><then><block>{
      <decl_stmt><decl><type><name>int</name></type> <name>nByte</name> =<init> <expr>(<name>wsdAutoext</name>.<name>nExt</name>+1)*<call><name>sizeof</name><argument_list>(<argument><expr><name>wsdAutoext</name>.<name><name>aExt</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>void</name> <argument_list>(<argument><expr>**<name>aNew</name></expr></argument>)</argument_list></call>(<name>void</name>)</expr>;</expr_stmt>
      <expr_stmt><expr><name>aNew</name> = <call><name>sqlite3_realloc</name><argument_list>(<argument><expr><name>wsdAutoext</name>.<name>aExt</name></expr></argument>, <argument><expr><name>nByte</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if<condition>( <expr><name>aNew</name>==0</expr> )</condition><then><block>{
        <expr_stmt><expr><name>rc</name> = <name>SQLITE_NOMEM</name></expr>;</expr_stmt>
      }</block></then><else>else<block>{
        <expr_stmt><expr><name>wsdAutoext</name>.<name>aExt</name> = <name>aNew</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>wsdAutoext</name>.<name><name>aExt</name><index>[<expr><name>wsdAutoext</name>.<name>nExt</name></expr>]</index></name> = <name>xInit</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>wsdAutoext</name>.<name>nExt</name>++</expr>;</expr_stmt>
      }</block></else></if>
    }</block></then></if>
    <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>assert</name><argument_list>( <argument><expr>(<name>rc</name>&amp;0xff)==<name>rc</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <return>return <expr><name>rc</name></expr>;</return>
  }</block></else></if>
}</block></function>

<comment type="block">/*
** Reset the automatic extension loading mechanism.
*/</comment>
<function><type><name>void</name></type> <name>sqlite3_reset_auto_extension</name><parameter_list>(<param><decl><type><name>void</name></type></decl></param>)</parameter_list><block>{
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>SQLITE_OMIT_AUTOINIT</name></cpp:ifndef>
  <if>if<condition>( <expr><call><name>sqlite3_initialize</name><argument_list>()</argument_list></call>==<name>SQLITE_OK</name></expr> )</condition><then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
  <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_THREADSAFE</name></expr></cpp:if>
    <decl_stmt><decl><type><name>sqlite3_mutex</name> *</type><name>mutex</name> =<init> <expr><call><name>sqlite3MutexAlloc</name><argument_list>(<argument><expr><name>SQLITE_MUTEX_STATIC_MASTER</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>wsdAutoextInit</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>wsdAutoext</name>.<name>aExt</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>wsdAutoext</name>.<name>aExt</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>wsdAutoext</name>.<name>nExt</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  }</block></then></if>
}</block></function>

<comment type="block">/*
** Load all automatic extensions.
*/</comment>
<function><type><name>int</name></type> <name>sqlite3AutoLoadExtensions</name><parameter_list>(<param><decl><type><name>sqlite3</name> *</type><name>db</name></decl></param>)</parameter_list><block>{
  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>go</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>
  <decl_stmt><decl><type><name>int</name></type> <name>rc</name> =<init> <expr><name>SQLITE_OK</name></expr></init></decl>;</decl_stmt>
  <function_decl><type><name>int</name></type> (*<name>xInit</name>)<parameter_list>(<param><decl><type><name>sqlite3</name>*</type></decl></param>,<param><decl><type><name>char</name>**</type></decl></param>,<param><decl><type><name>const</name> <name>sqlite3_api_routines</name>*</type></decl></param>)</parameter_list>;</function_decl>

  <expr_stmt><expr><name>wsdAutoextInit</name></expr>;</expr_stmt>
  <if>if<condition>( <expr><name>wsdAutoext</name>.<name>nExt</name>==0</expr> )</condition><then><block>{
    <comment type="block">/* Common case: early out without every having to acquire a mutex */</comment>
    <return>return <expr><name>SQLITE_OK</name></expr>;</return>
  }</block></then></if>
  <for>for(<init><expr><name>i</name>=0</expr>;</init> <condition><expr><name>go</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>zErrmsg</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SQLITE_THREADSAFE</name></expr></cpp:if>
    <decl_stmt><decl><type><name>sqlite3_mutex</name> *</type><name>mutex</name> =<init> <expr><call><name>sqlite3MutexAlloc</name><argument_list>(<argument><expr><name>SQLITE_MUTEX_STATIC_MASTER</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><call><name>sqlite3_mutex_enter</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>( <expr><name>i</name>&gt;=<name>wsdAutoext</name>.<name>nExt</name></expr> )</condition><then><block>{
      <expr_stmt><expr><name>xInit</name> = 0</expr>;</expr_stmt>
      <expr_stmt><expr><name>go</name> = 0</expr>;</expr_stmt>
    }</block></then><else>else<block>{
      <expr_stmt><expr><name>xInit</name> = (<call><name>int</name><argument_list>(<argument><expr>*</expr></argument>)</argument_list></call>(<name>sqlite3</name>*,<name>char</name>**,<name>const</name> <name>sqlite3_api_routines</name>*))
              <name>wsdAutoext</name>.<name><name>aExt</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></else></if>
    <expr_stmt><expr><call><name>sqlite3_mutex_leave</name><argument_list>(<argument><expr><name>mutex</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <if>if<condition>( <expr><name>xInit</name> &amp;&amp; <call><name>xInit</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr>&amp;<name>zErrmsg</name></expr></argument>, <argument><expr>&amp;<name>sqlite3Apis</name></expr></argument>)</argument_list></call></expr> )</condition><then><block>{
      <expr_stmt><expr><call><name>sqlite3Error</name><argument_list>(<argument><expr><name>db</name></expr></argument>, <argument><expr><name>SQLITE_ERROR</name></expr></argument>,
            <argument><expr>"automatic extension loading failed: %s"</expr></argument>, <argument><expr><name>zErrmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>go</name> = 0</expr>;</expr_stmt>
      <expr_stmt><expr><name>rc</name> = <name>SQLITE_ERROR</name></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>sqlite3_free</name><argument_list>(<argument><expr><name>zErrmsg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
  }</block></for>
  <return>return <expr><name>rc</name></expr>;</return>
}</block></function>
</unit>
