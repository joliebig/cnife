<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="" filename="OsFlock.h"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> once</cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db_config.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NO_SYSTEM_INCLUDES</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db_int.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"OsFlock.h"</cpp:file></cpp:include>


<comment type="line">// extracted from os_flock.c</comment>


<class>class <name>COsFlock</name>
<block>{<private type="default">
</private><public>public:
	<function><type><name>static</name> <name>int</name></type> <name>os_fdlock</name><parameter_list>(<param><decl><type><name>DB_ENV</name> *</type><name>dbenv</name></decl></param>, <param><decl><type><name>DB_FH</name> *</type><name>fhp</name></decl></param>, <param><decl><type><name>off_t</name></type> <name>offset</name></decl></param>, <param><decl><type><name>int</name></type> <name>acquire</name></decl></param>, <param><decl><type><name>int</name></type> <name>nowait</name></decl></param>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>DB_ASSERT</name><argument_list>(<argument><expr><call><name>F_ISSET</name><argument_list>(<argument><expr><name>fhp</name></expr></argument>, <argument><expr><name>DB_FH_OPENED</name></expr></argument>)</argument_list></call> &amp;&amp; <name>fhp</name>-&gt;<name>fd</name> != -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_FCNTL</name></cpp:ifdef>
		<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
		<decl_stmt><decl><type>struct <name>flock</name></type> <name>fl</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>fl</name>.<name>l_start</name> = <name>offset</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>fl</name>.<name>l_len</name> = 1</expr>;</expr_stmt>
		<expr_stmt><expr><name>fl</name>.<name>l_type</name> = <name>acquire</name> ? <name>F_WRLCK</name> : <name>F_UNLCK</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>fl</name>.<name>l_whence</name> = <name>SEEK_SET</name></expr>;</expr_stmt>
	
		<expr_stmt><expr><call><name>RETRY_CHK_EINTR_ONLY</name><argument_list>(
		    <argument><expr>(<call><name>fcntl</name><argument_list>(<argument><expr><name>fhp</name>-&gt;<name>fd</name></expr></argument>, <argument><expr><name>nowait</name> ? <name>F_SETLK</name> : <name>F_SETLKW</name></expr></argument>, <argument><expr>&amp;<name>fl</name></expr></argument>)</argument_list></call>)</expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
		<if>if <condition>(<expr><name>ret</name> != 0 &amp;&amp; <name>ret</name> != <name>EACCES</name> &amp;&amp; <name>ret</name> != <name>EAGAIN</name></expr>)</condition><then>
			<expr_stmt><expr><call><name><name>CDbErr</name>::<name>db_err</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr>"fcntl: %s"</expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<return>return <expr>(<name>ret</name>)</expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name><name>CDbErr</name>::<name>db_err</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>,
		    <argument><expr>"advisory file locking unavailable: %s"</expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>DB_OPNOTSUP</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>(<name>DB_OPNOTSUP</name>)</expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	}</block></function>
</public>}</block>;</class>


</unit>
