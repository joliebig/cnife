<?xml version="1.0" encoding="UTF-8"?><unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" dir="" filename="OsOpen.h" language="C++"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> once</cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db_config.h"</cpp:file></cpp:include>



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db_int.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"OsOpen.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"OsHandle.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"OsErrno.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"OsStat.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"OsUnlink.h"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>static</name> <name>int</name> <name>__os_intermediate_dir</name></type> <name>__P</name>((<name>DB_ENV</name> *, <name>const</name> <name>char</name> *)</decl></decl_stmt>)<empty_stmt>;</empty_stmt>



<class>class <name>COsOpen</name>
<block>{<private type="default">
</private><public>public:
	<function><type><name>static</name> <name>int</name></type> <name>os_have_direct</name><parameter_list>()</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
	
		<expr_stmt><expr><name>ret</name> = 0</expr>;</expr_stmt>
	
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_O_DIRECT</name></cpp:ifdef>
		<expr_stmt><expr><name>ret</name> = 1</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_DIRECTIO</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>DIRECTIO_ON</name></expr></argument>)</argument_list></call></expr></cpp:if>
		<expr_stmt><expr><name>ret</name> = 1</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<return>return <expr>(<name>ret</name>)</expr>;</return>
	}</block></function>

	<function><type><name>static</name> <name>int</name></type> <name>os_open</name><parameter_list>(<param><decl><type><name>DB_ENV</name> *</type><name>dbenv</name></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>u_int32_t</name></type> <name>flags</name></decl></param>, <param><decl><type><name>int</name></type> <name>mode</name></decl></param>, <param><decl><type><name>DB_FH</name> **</type><name>fhpp</name></decl></param>)</parameter_list>
	<block>{
		<return>return <expr>(<call><name>os_open_extend</name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>fhpp</name></expr></argument>)</argument_list></call>)</expr>;</return>
	}</block></function>
	<function>	<type><name>void</name></type> <name>/work/joliebig/workspace_sple/cnife/test/BerkleyDB_OS/Base/OsOpenHookFunction33</name><parameterlist>(<param><decl><type><name>DB_FH</name> *&amp;</type> <name>fhp</name></decl></param>, <param><decl><type><name>int</name>&amp;</type> <name>mode</name></decl></param>)</parameterlist>
	<block>{
	<comment>//--functionbody</comment>
	}</block></function><function>	<type><name>void</name></type> <name>/work/joliebig/workspace_sple/cnife/test/BerkleyDB_OS/Base/OsOpenHookFunction34</name><parameterlist>(<param><decl><type><name>int</name>&amp;</type> <name>oflags</name></decl></param>)</parameterlist>
	<block>{
	<comment>//--functionbody</comment>
	}</block></function><function>	<type><name>void</name></type> <name>/work/joliebig/workspace_sple/cnife/test/BerkleyDB_OS/Base/OsOpenHookFunction2</name><parameterlist>(<param><decl><type><name>int</name>&amp;</type> <name>oflags</name></decl></param>)</parameterlist>
	<block>{
	<comment>//--functionbody</comment>
	}</block></function><function>	<type><name>void</name></type> <name>/work/joliebig/workspace_sple/cnife/test/BerkleyDB_OS/Base/OsOpenHookFunction4</name><parameterlist>(<param><decl><type><name>DB_FH</name> *&amp;</type> <name>fhp</name></decl></param>)</parameterlist>
	<block>{
	<comment>//--functionbody</comment>
	}</block></function><function>	<type><name>void</name></type> <name>/work/joliebig/workspace_sple/cnife/test/BerkleyDB_OS/Base/OsOpenHookFunction6</name><parameterlist>(<param><decl><type><name>int</name>&amp;</type> <name>oflags</name></decl></param>)</parameterlist>
	<block>{
	<comment>//--functionbody</comment>
	}</block></function><function>	<type><name>void</name></type> <name>/work/joliebig/workspace_sple/cnife/test/BerkleyDB_OS/Base/OsOpenHookFunction7</name><parameterlist>(<param><decl><type><name>DB_FH</name> *&amp;</type> <name>fhp</name></decl></param>)</parameterlist>
	<block>{
	<comment>//--functionbody</comment>
	}</block></function><function>	<type><name>void</name></type> <name>/work/joliebig/workspace_sple/cnife/test/BerkleyDB_OS/Base/OsOpenHookFunction8</name><parameterlist>(<param><decl><type><name>int</name>&amp;</type> <name>oflags</name></decl></param>, <param><decl><type><name>DB_ENV</name> *&amp;</type> <name>dbenv</name></decl></param>, <param><decl><type><name>const</name> <name>char</name> *&amp;</type> <name>name</name></decl></param>, <param><decl><type><name>int</name>&amp;</type> <name>mode</name></decl></param>, <param><decl><type><name>DB_FH</name> **&amp;</type> <name>fhpp</name></decl></param>)</parameterlist>
	<block>{
	<comment>//--functionbody</comment>
	}</block></function><function>	<type><name>void</name></type> <name>/work/joliebig/workspace_sple/cnife/test/BerkleyDB_OS/Base/OsOpenHookFunction9</name><parameterlist>(<param><decl><type><name>int</name>&amp;</type> <name>ret</name></decl></param>, <param><decl><type><name>DB_FH</name> *&amp;</type> <name>fhp</name></decl></param>, <param><decl><type><name>DB_ENV</name> *&amp;</type> <name>dbenv</name></decl></param>, <param><decl><type><name>const</name> <name>char</name> *&amp;</type> <name>name</name></decl></param>)</parameterlist>
	<block>{
	<comment>//--functionbody</comment>
	}</block></function><function>	<type><name>void</name></type> <name>/work/joliebig/workspace_sple/cnife/test/BerkleyDB_OS/Base/OsOpenHookFunction9</name><parameterlist>(<param><decl><type><name>int</name>&amp;</type> <name>ret</name></decl></param>, <param><decl><type><name>DB_FH</name> *&amp;</type> <name>fhp</name></decl></param>, <param><decl><type><name>DB_ENV</name> *&amp;</type> <name>dbenv</name></decl></param>, <param><decl><type><name>const</name> <name>char</name> *&amp;</type> <name>name</name></decl></param>)</parameterlist>
	<block>{
	<comment>//--functionbody</comment>
	}</block></function><function><type><name>static</name> <name>int</name></type> <name>os_open_extend</name><parameter_list>(<param><decl><type><name>DB_ENV</name> *</type><name>dbenv</name></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>u_int32_t</name></type> <name>page_size</name></decl></param>, <param><decl><type><name>u_int32_t</name></type> <name>flags</name></decl></param>, <param><decl><type><name>int</name></type> <name>mode</name></decl></param>, <param><decl><type><name>DB_FH</name> **</type><name>fhpp</name></decl></param>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>DB_FH</name> *</type><name>fhp</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>oflags</name>, <name>ret</name></decl>;</decl_stmt>
	
		<expr_stmt><expr><call><name>COMPQUIET</name><argument_list>(<argument><expr><name>page_size</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
		<expr_stmt><expr>*<name>fhpp</name> = <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>oflags</name> = 0</expr>;</expr_stmt>
	
<cpp:define>#<cpp:directive>define</cpp:directive>	<name>OKFLAGS</name>								\
		(DB_OSO_ABSMODE | DB_OSO_CREATE | DB_OSO_DIRECT | DB_OSO_DSYNC |\
		DB_OSO_EXCL | DB_OSO_RDONLY | DB_OSO_REGION | DB_OSO_SEQ |	\
		DB_OSO_TEMP | DB_OSO_TRUNC)</cpp:define>
		<if>if <condition>(<expr>(<name>ret</name> = <call><name><name>CDbErr</name>::<name>db_fchk</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr>"__os_open"</expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>OKFLAGS</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
			<return>return <expr>(<name>ret</name>)</expr>;</return></then></if>
	
<expr_stmt><expr><call><name>/work/joliebig/workspace_sple/cnife/test/BerkleyDB_OS/Base/OsOpenHookFunction2</name><argument_list>(<argument><expr><name>oflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
		<comment type="block">/*
		 * DB requires the POSIX 1003.1 semantic that two files opened at the
		 * same time with DB_OSO_CREATE/O_CREAT and DB_OSO_EXCL/O_EXCL flags
		 * set return an EEXIST failure in at least one.
		 */</comment>
		<if>if <condition>(<expr><call><name>LF_ISSET</name><argument_list>(<argument><expr><name>DB_OSO_CREATE</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<expr_stmt><expr><name>oflags</name> |= <name>O_CREAT</name></expr>;</expr_stmt></then></if>
	
		<if>if <condition>(<expr><call><name>LF_ISSET</name><argument_list>(<argument><expr><name>DB_OSO_EXCL</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<expr_stmt><expr><name>oflags</name> |= <name>O_EXCL</name></expr>;</expr_stmt></then></if>
	
<expr_stmt><expr><call><name>/work/joliebig/workspace_sple/cnife/test/BerkleyDB_OS/Base/OsOpenHookFunction34</name><argument_list>(<argument><expr><name>oflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>/work/joliebig/workspace_sple/cnife/test/BerkleyDB_OS/Base/OsOpenHookFunction6</name><argument_list>(<argument><expr><name>oflags</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
		<if>if <condition>(<expr><call><name>LF_ISSET</name><argument_list>(<argument><expr><name>DB_OSO_RDONLY</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<expr_stmt><expr><name>oflags</name> |= <name>O_RDONLY</name></expr>;</expr_stmt></then>
		<else>else
			<expr_stmt><expr><name>oflags</name> |= <name>O_RDWR</name></expr>;</expr_stmt></else></if>
	
		<if>if <condition>(<expr><call><name>LF_ISSET</name><argument_list>(<argument><expr><name>DB_OSO_TRUNC</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<expr_stmt><expr><name>oflags</name> |= <name>O_TRUNC</name></expr>;</expr_stmt></then></if>
	
		<comment type="block">/*
		 * Undocumented feature: allow applications to create intermediate
		 * directories whenever a file is opened.
		 */</comment>
		<if>if <condition>(<expr><name>dbenv</name> != <name>NULL</name> &amp;&amp;
		    <name>dbenv</name>-&gt;<name>dir_mode</name> != 0 &amp;&amp; <call><name>LF_ISSET</name><argument_list>(<argument><expr><name>DB_OSO_CREATE</name></expr></argument>)</argument_list></call> &amp;&amp;
		    (<name>ret</name> = <call><name>os_intermediate_dir</name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
			<return>return <expr>(<name>ret</name>)</expr>;</return></then></if>
	
<expr_stmt><expr><call><name>/work/joliebig/workspace_sple/cnife/test/BerkleyDB_OS/Base/OsOpenHookFunction8</name><argument_list>(<argument><expr><name>oflags</name></expr></argument>, <argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr><name>fhpp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* Open the file. */</comment>
		<if>if <condition>(<expr>(<name>ret</name> = <call><name><name>COsHandle</name>::<name>os_openhandle</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>oflags</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>, <argument><expr>&amp;<name>fhp</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
			<return>return <expr>(<name>ret</name>)</expr>;</return></then></if>
	
<expr_stmt><expr><call><name>/work/joliebig/workspace_sple/cnife/test/BerkleyDB_OS/Base/OsOpenHookFunction33</name><argument_list>(<argument><expr><name>fhp</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
<expr_stmt><expr><call><name>/work/joliebig/workspace_sple/cnife/test/BerkleyDB_OS/Base/OsOpenHookFunction7</name><argument_list>(<argument><expr><name>fhp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
<expr_stmt><expr><call><name>/work/joliebig/workspace_sple/cnife/test/BerkleyDB_OS/Base/OsOpenHookFunction4</name><argument_list>(<argument><expr><name>fhp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
		<comment type="block">/*
		 * Delete any temporary file.
		 *
		 * !!!
		 * There's a race here, where we've created a file and we crash before
		 * we can unlink it.  Temporary files aren't common in DB, regardless,
		 * it's not a security problem because the file is empty.  There's no
		 * reasonable way to avoid the race (playing signal games isn't worth
		 * the portability nightmare), so we just live with it.
		 */</comment>
		<if>if <condition>(<expr><call><name>LF_ISSET</name><argument_list>(<argument><expr><name>DB_OSO_TEMP</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>/work/joliebig/workspace_sple/cnife/test/BerkleyDB_OS/Base/OsOpenHookFunction9</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>fhp</name></expr></argument>, <argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>/work/joliebig/workspace_sple/cnife/test/BerkleyDB_OS/Base/OsOpenHookFunction9</name><argument_list>(<argument><expr><name>ret</name></expr></argument>, <argument><expr><name>fhp</name></expr></argument>, <argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	
		<expr_stmt><expr>*<name>fhpp</name> = <name>fhp</name></expr>;</expr_stmt>
		<return>return <expr>(0)</expr>;</return>
	}</block></function>

<function><type><name>static</name> <name>int</name></type> <name>os_intermediate_dir</name><parameter_list>(<param><decl><type><name>DB_ENV</name> *</type><name>dbenv</name></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>size_t</name></type> <name>len</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>char</name></type> <name>savech</name>, *<name>p</name>, *<name>t</name>, <name><name>buf</name><index>[<expr>128</expr>]</index></name></decl>;</decl_stmt>
	
		<expr_stmt><expr><name>ret</name> = 0</expr>;</expr_stmt>
	
		<comment type="block">/*
		 * Get a copy so we can modify the string.
		 *
		 * Allocate memory if temporary space is too small.
		 */</comment>
		<if>if <condition>(<expr>(<name>len</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call>) &gt; <call><name>sizeof</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> - 1</expr>)</condition><then> <block>{
			<if>if <condition>(<expr>(<name>ret</name> = <call><name><name>COsAlloc</name>::<name>os_umalloc</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>len</name> + 1</expr></argument>, <argument><expr>&amp;<name>t</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
				<return>return <expr>(<name>ret</name>)</expr>;</return></then></if>
		}</block></then> <else>else
			<expr_stmt><expr><name>t</name> = <name>buf</name></expr>;</expr_stmt></else></if>
		<expr_stmt><expr>(<name>void</name>)<call><name>strcpy</name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
		<comment type="block">/*
		 * Cycle through the path, creating intermediate directories.
		 *
		 * Skip the first byte if it's a path separator, it's the start of an
		 * absolute pathname.
		 */</comment>
		<if>if <condition>(<expr><name><name>PATH_SEPARATOR</name><index>[<expr>1</expr>]</index></name> == '\0'</expr>)</condition><then> <block>{
			<for>for (<init><expr><name>p</name> = <name>t</name> + 1</expr>;</init> <condition><expr><name><name>p</name><index>[<expr>0</expr>]</index></name> != '\0'</expr>;</condition> <incr><expr>++<name>p</name></expr></incr>)
				<if>if <condition>(<expr><name><name>p</name><index>[<expr>0</expr>]</index></name> == <name><name>PATH_SEPARATOR</name><index>[<expr>0</expr>]</index></name></expr>)</condition><then> <block>{
					<expr_stmt><expr><name>savech</name> = *<name>p</name></expr>;</expr_stmt>
					<expr_stmt><expr>*<name>p</name> = '\0'</expr>;</expr_stmt>
					<if>if <condition>(<expr><call><name><name>COsStat</name>::<name>os_exists</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> &amp;&amp;
					    (<name>ret</name> = <call><name><name>COsMkdir</name>::<name>os_mkdir</name></name><argument_list>(
						<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>dbenv</name>-&gt;<name>dir_mode</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
						<break>break;</break></then></if>
					<expr_stmt><expr>*<name>p</name> = <name>savech</name></expr>;</expr_stmt>
				}</block></then></if></for>
		}</block></then> <else>else
			<for>for (<init><expr><name>p</name> = <name>t</name> + 1</expr>;</init> <condition><expr><name><name>p</name><index>[<expr>0</expr>]</index></name> != '\0'</expr>;</condition> <incr><expr>++<name>p</name></expr></incr>)
				<if>if <condition>(<expr><call><name>strchr</name><argument_list>(<argument><expr><name>PATH_SEPARATOR</name></expr></argument>, <argument><expr><name><name>p</name><index>[<expr>0</expr>]</index></name></expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then> <block>{
					<expr_stmt><expr><name>savech</name> = *<name>p</name></expr>;</expr_stmt>
					<expr_stmt><expr>*<name>p</name> = '\0'</expr>;</expr_stmt>
					<if>if <condition>(<expr><call><name><name>COsStat</name>::<name>os_exists</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> &amp;&amp;
					    (<name>ret</name> = <call><name><name>COsMkdir</name>::<name>os_mkdir</name></name><argument_list>(
						<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>t</name></expr></argument>, <argument><expr><name>dbenv</name>-&gt;<name>dir_mode</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
						<break>break;</break></then></if>
					<expr_stmt><expr>*<name>p</name> = <name>savech</name></expr>;</expr_stmt>
				}</block></then></if></for></else></if>
		<if>if <condition>(<expr><name>t</name> != <name>buf</name></expr>)</condition><then>
			<expr_stmt><expr><call><name><name>COsAlloc</name>::<name>os_free</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<return>return <expr>(<name>ret</name>)</expr>;</return>
	}</block></function>


	</public>}</block>;</class>

</unit>