<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="" filename="OsAlloc.h"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> once</cpp:pragma>


<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db_config.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NO_SYSTEM_INCLUDES</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db_int.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"OsAlloc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"common/DbErr.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DIAGNOSTIC</name></cpp:ifdef>
<decl_stmt><decl><type><name>static</name> <name>void</name> <name>__os_guard</name></type> <name>__P</name>((<name>DB_ENV</name> *)</decl></decl_stmt>)<empty_stmt>;</empty_stmt>

<union>union <name>__db_allocinfo</name> <block>{<public type="default">
	<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>double</name></type> <name>align</name></decl>;</decl_stmt>
</public>}</block>;</union> 
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> 

<class>class <name>COsAlloc</name>
<block>{<private type="default">
</private><public>public:
	<function><type><name>static</name> <name>int</name></type> <name>os_umalloc</name><parameter_list>(<param><decl><type><name>DB_ENV</name> *</type><name>dbenv</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>size</name></decl></param>, <param><decl><type><name>void</name> *</type><name>storep</name></decl></param>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
	
		<comment type="block">/* Never allocate 0 bytes -- some C libraries don't like it. */</comment>
		<if>if <condition>(<expr><name>size</name> == 0</expr>)</condition><then>
			<expr_stmt><expr>++<name>size</name></expr>;</expr_stmt></then></if>
	
		<if>if <condition>(<expr><name>dbenv</name> == <name>NULL</name> || <name>dbenv</name>-&gt;<name>db_malloc</name> == <name>NULL</name></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><call><name>DB_GLOBAL</name><argument_list>(<argument><expr><name>j_malloc</name></expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then>
				<expr_stmt><expr>*(<name>void</name> **)<name>storep</name> = <call><name>DB_GLOBAL</name><argument_list>(<argument><expr><name>j_malloc</name></expr></argument>)</argument_list></call>(<name>size</name>)</expr>;</expr_stmt></then>
			<else>else
				<expr_stmt><expr>*(<name>void</name> **)<name>storep</name> = <call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
			<if>if <condition>(<expr>*(<name>void</name> **)<name>storep</name> == <name>NULL</name></expr>)</condition><then> <block>{
				<comment type="block">/*
				 *  Correct error return, see __os_malloc.
				 */</comment>
				<if>if <condition>(<expr>(<name>ret</name> = <call><name><name>COsErrno</name>::<name>os_get_errno_ret_zero</name></name><argument_list>()</argument_list></call>) == 0</expr>)</condition><then> <block>{
					<expr_stmt><expr><name>ret</name> = <name>ENOMEM</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>COsErrno</name>::<name>os_set_errno</name></name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<expr_stmt><expr><call><name><name>CDbErr</name>::<name>db_err</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>,
				    <argument><expr>"malloc: %s: %lu"</expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>(<name>u_long</name>)<name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr>(<name>ret</name>)</expr>;</return>
			}</block></then></if>
			<return>return <expr>(0)</expr>;</return>
		}</block></then></if>
	
		<if>if <condition>(<expr>(*(<name>void</name> **)<name>storep</name> = <name>dbenv</name>-&gt;<call><name>db_malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>CDbErr</name>::<name>db_err</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr>"User-specified malloc function returned NULL"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr>(<name>ENOMEM</name>)</expr>;</return>
		}</block></then></if>
	
		<return>return <expr>(0)</expr>;</return>
	}</block></function>

	<function><type><name>static</name> <name>int</name></type> <name>os_urealloc</name><parameter_list>(<param><decl><type><name>DB_ENV</name> *</type><name>dbenv</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>size</name></decl></param>, <param><decl><type><name>void</name> *</type><name>storep</name></decl></param>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>void</name> *</type><name>ptr</name></decl>;</decl_stmt>
	
		<expr_stmt><expr><name>ptr</name> = *(<name>void</name> **)<name>storep</name></expr>;</expr_stmt>
	
		<comment type="block">/* Never allocate 0 bytes -- some C libraries don't like it. */</comment>
		<if>if <condition>(<expr><name>size</name> == 0</expr>)</condition><then>
			<expr_stmt><expr>++<name>size</name></expr>;</expr_stmt></then></if>
	
		<if>if <condition>(<expr><name>dbenv</name> == <name>NULL</name> || <name>dbenv</name>-&gt;<name>db_realloc</name> == <name>NULL</name></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><name>ptr</name> == <name>NULL</name></expr>)</condition><then>
				<return>return <expr>(<call><name>os_umalloc</name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>storep</name></expr></argument>)</argument_list></call>)</expr>;</return></then></if>
	
			<if>if <condition>(<expr><call><name>DB_GLOBAL</name><argument_list>(<argument><expr><name>j_realloc</name></expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then>
				<expr_stmt><expr>*(<name>void</name> **)<name>storep</name> = <call><name>DB_GLOBAL</name><argument_list>(<argument><expr><name>j_realloc</name></expr></argument>)</argument_list></call>(<name>ptr</name>, <name>size</name>)</expr>;</expr_stmt></then>
			<else>else
				<expr_stmt><expr>*(<name>void</name> **)<name>storep</name> = <call><name>realloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
			<if>if <condition>(<expr>*(<name>void</name> **)<name>storep</name> == <name>NULL</name></expr>)</condition><then> <block>{
				<comment type="block">/*
				 * Correct errno, see __os_realloc.
				 */</comment>
				<if>if <condition>(<expr>(<name>ret</name> = <call><name><name>COsErrno</name>::<name>os_get_errno_ret_zero</name></name><argument_list>()</argument_list></call>) == 0</expr>)</condition><then> <block>{
					<expr_stmt><expr><name>ret</name> = <name>ENOMEM</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>COsErrno</name>::<name>os_set_errno</name></name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				}</block></then></if>
				<expr_stmt><expr><call><name><name>CDbErr</name>::<name>db_err</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>,
				    <argument><expr>"realloc: %s: %lu"</expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>(<name>u_long</name>)<name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr>(<name>ret</name>)</expr>;</return>
			}</block></then></if>
			<return>return <expr>(0)</expr>;</return>
		}</block></then></if>
	
		<if>if <condition>(<expr>(*(<name>void</name> **)<name>storep</name> = <name>dbenv</name>-&gt;<call><name>db_realloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call>) == <name>NULL</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>CDbErr</name>::<name>db_err</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>,
			    <argument><expr>"User-specified realloc function returned NULL"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr>(<name>ENOMEM</name>)</expr>;</return>
		}</block></then></if>
	
		<return>return <expr>(0)</expr>;</return>
	}</block></function>

	<function><type><name>static</name> <name>void</name></type> <name>os_ufree</name><parameter_list>(<param><decl><type><name>DB_ENV</name> *</type><name>dbenv</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ptr</name></decl></param>)</parameter_list>
	<block>{
		<if>if <condition>(<expr><name>dbenv</name> != <name>NULL</name> &amp;&amp; <name>dbenv</name>-&gt;<name>db_free</name> != <name>NULL</name></expr>)</condition><then>
			<expr_stmt><expr><name>dbenv</name>-&gt;<call><name>db_free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
		<else>else <if>if <condition>(<expr><call><name>DB_GLOBAL</name><argument_list>(<argument><expr><name>j_free</name></expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then>
			<function_decl><type><name>DB_GLOBAL</name></type>(<name>j_free</name>)<parameter_list>(<param><decl><type><name>ptr</name></type></decl></param>)</parameter_list>;</function_decl></then>
		<else>else
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if></else></if>
	}</block></function>

	<function><type><name>static</name> <name>int</name></type> <name>os_strdup</name><parameter_list>(<param><decl><type><name>DB_ENV</name> *</type><name>dbenv</name></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>str</name></decl></param>, <param><decl><type><name>void</name> *</type><name>storep</name></decl></param>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>void</name> *</type><name>p</name></decl>;</decl_stmt>
	
		<expr_stmt><expr>*(<name>void</name> **)<name>storep</name> = <name>NULL</name></expr>;</expr_stmt>
	
		<expr_stmt><expr><name>size</name> = <call><name>strlen</name><argument_list>(<argument><expr><name>str</name></expr></argument>)</argument_list></call> + 1</expr>;</expr_stmt>
		<if>if <condition>(<expr>(<name>ret</name> = <call><name>os_malloc</name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr>&amp;<name>p</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
			<return>return <expr>(<name>ret</name>)</expr>;</return></then></if>
	
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>str</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
		<expr_stmt><expr>*(<name>void</name> **)<name>storep</name> = <name>p</name></expr>;</expr_stmt>
		<return>return <expr>(0)</expr>;</return>
	}</block></function>

	<function><type><name>static</name> <name>int</name></type> <name>os_calloc</name><parameter_list>(<param><decl><type><name>DB_ENV</name> *</type><name>dbenv</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>num</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>size</name></decl></param>, <param><decl><type><name>void</name> *</type><name>storep</name></decl></param>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>void</name> *</type><name>p</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
	
		<expr_stmt><expr><name>size</name> *= <name>num</name></expr>;</expr_stmt>
		<if>if <condition>(<expr>(<name>ret</name> = <call><name>os_malloc</name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr>&amp;<name>p</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
			<return>return <expr>(<name>ret</name>)</expr>;</return></then></if>
	
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
		<expr_stmt><expr>*(<name>void</name> **)<name>storep</name> = <name>p</name></expr>;</expr_stmt>
		<return>return <expr>(0)</expr>;</return>
	}</block></function>
	<function><type><name>static</name> <name>int</name></type> <name>os_malloc</name><parameter_list>(<param><decl><type><name>DB_ENV</name> *</type><name>dbenv</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>size</name></decl></param>, <param><decl><type><name>void</name> *</type><name>storep</name></decl></param>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>void</name> *</type><name>p</name></decl>;</decl_stmt>
	
		<expr_stmt><expr>*(<name>void</name> **)<name>storep</name> = <name>NULL</name></expr>;</expr_stmt>
	
		<comment type="block">/* Never allocate 0 bytes -- some C libraries don't like it. */</comment>
		<if>if <condition>(<expr><name>size</name> == 0</expr>)</condition><then>
			<expr_stmt><expr>++<name>size</name></expr>;</expr_stmt></then></if>
	
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DIAGNOSTIC</name></cpp:ifdef>
		<comment type="block">/* Add room for size and a guard byte. */</comment>
		<expr_stmt><expr><name>size</name> += <call><name>sizeof</name><argument_list>(<argument>union <expr><name>__db_allocinfo</name></expr></argument>)</argument_list></call> + 1</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	
		<if>if <condition>(<expr><call><name>DB_GLOBAL</name><argument_list>(<argument><expr><name>j_malloc</name></expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then>
			<expr_stmt><expr><name>p</name> = <call><name>DB_GLOBAL</name><argument_list>(<argument><expr><name>j_malloc</name></expr></argument>)</argument_list></call>(<name>size</name>)</expr>;</expr_stmt></then>
		<else>else
			<expr_stmt><expr><name>p</name> = <call><name>malloc</name><argument_list>(<argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
		<if>if <condition>(<expr><name>p</name> == <name>NULL</name></expr>)</condition><then> <block>{
			<comment type="block">/*
			 * Some C libraries don't correctly set errno when malloc(3)
			 * fails.  We'd like to 0 out errno before calling malloc,
			 * but it turns out that setting errno is quite expensive on
			 * Windows/NT in an MT environment.
			 */</comment>
			<if>if <condition>(<expr>(<name>ret</name> = <call><name><name>COsErrno</name>::<name>os_get_errno_ret_zero</name></name><argument_list>()</argument_list></call>) == 0</expr>)</condition><then> <block>{
				<expr_stmt><expr><name>ret</name> = <name>ENOMEM</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>COsErrno</name>::<name>os_set_errno</name></name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><call><name><name>CDbErr</name>::<name>db_err</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>,
			    <argument><expr>"malloc: %s: %lu"</expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>(<name>u_long</name>)<name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr>(<name>ret</name>)</expr>;</return>
		}</block></then></if>
	
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DIAGNOSTIC</name></cpp:ifdef>
		<comment type="block">/* Overwrite memory. */</comment>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>CLEAR_BYTE</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
		<comment type="block">/*
		 * Guard bytes: if #DIAGNOSTIC is defined, we allocate an additional
		 * byte after the memory and set it to a special value that we check
		 * for when the memory is free'd.
		 */</comment>
		<expr_stmt><expr>((<name>u_int8_t</name> *)<name>p</name>)[<name>size</name> - 1] = <name>CLEAR_BYTE</name></expr>;</expr_stmt>
	
		<expr_stmt><expr>((union <name>__db_allocinfo</name> *)<name>p</name>)-&gt;<name>size</name> = <name>size</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name> = &amp;((union <name>__db_allocinfo</name> *)<name>p</name>)[1]</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr>*(<name>void</name> **)<name>storep</name> = <name>p</name></expr>;</expr_stmt>
	
		<return>return <expr>(0)</expr>;</return>
	}</block></function>

	<function><type><name>static</name> <name>int</name></type> <name>os_realloc</name><parameter_list>(<param><decl><type><name>DB_ENV</name> *</type><name>dbenv</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>size</name></decl></param>, <param><decl><type><name>void</name> *</type><name>storep</name></decl></param>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>void</name> *</type><name>p</name>, *<name>ptr</name></decl>;</decl_stmt>
	
		<expr_stmt><expr><name>ptr</name> = *(<name>void</name> **)<name>storep</name></expr>;</expr_stmt>
	
		<comment type="block">/* Never allocate 0 bytes -- some C libraries don't like it. */</comment>
		<if>if <condition>(<expr><name>size</name> == 0</expr>)</condition><then>
			<expr_stmt><expr>++<name>size</name></expr>;</expr_stmt></then></if>
	
		<comment type="block">/* If we haven't yet allocated anything yet, simply call malloc. */</comment>
		<if>if <condition>(<expr><name>ptr</name> == <name>NULL</name></expr>)</condition><then>
			<return>return <expr>(<call><name>os_malloc</name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>size</name></expr></argument>, <argument><expr><name>storep</name></expr></argument>)</argument_list></call>)</expr>;</return></then></if>
	
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DIAGNOSTIC</name></cpp:ifdef>
		<comment type="block">/* Add room for size and a guard byte. */</comment>
		<expr_stmt><expr><name>size</name> += <call><name>sizeof</name><argument_list>(<argument>union <expr><name>__db_allocinfo</name></expr></argument>)</argument_list></call> + 1</expr>;</expr_stmt>
	
		<comment type="block">/* Back up to the real beginning */</comment>
		<expr_stmt><expr><name>ptr</name> = &amp;((union <name>__db_allocinfo</name> *)<name>ptr</name>)[-1]</expr>;</expr_stmt>
	
		<block>{
			<decl_stmt><decl><type><name>size_t</name></type> <name>s</name></decl>;</decl_stmt>
	
			<expr_stmt><expr><name>s</name> = ((union <name>__db_allocinfo</name> *)<name>ptr</name>)-&gt;<name>size</name></expr>;</expr_stmt>
			<if>if <condition>(<expr>((<name>u_int8_t</name> *)<name>ptr</name>)[<name>s</name> - 1] != <name>CLEAR_BYTE</name></expr>)</condition><then>
				 <expr_stmt><expr><call><name>os_guard</name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	
		<comment type="block">/*
		 * Don't overwrite the original pointer, there are places in DB we
		 * try to continue after realloc fails.
		 */</comment>
		<if>if <condition>(<expr><call><name>DB_GLOBAL</name><argument_list>(<argument><expr><name>j_realloc</name></expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then>
			<expr_stmt><expr><name>p</name> = <call><name>DB_GLOBAL</name><argument_list>(<argument><expr><name>j_realloc</name></expr></argument>)</argument_list></call>(<name>ptr</name>, <name>size</name>)</expr>;</expr_stmt></then>
		<else>else
			<expr_stmt><expr><name>p</name> = <call><name>realloc</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
		<if>if <condition>(<expr><name>p</name> == <name>NULL</name></expr>)</condition><then> <block>{
			<comment type="block">/*
			 * Some C libraries don't correctly set errno when malloc(3)
			 * fails.  We'd like to 0 out errno before calling malloc,
			 * but it turns out that setting errno is quite expensive on
			 * Windows/NT in an MT environment.
			 */</comment>
			<if>if <condition>(<expr>(<name>ret</name> = <call><name><name>COsErrno</name>::<name>os_get_errno_ret_zero</name></name><argument_list>()</argument_list></call>) == 0</expr>)</condition><then> <block>{
				<expr_stmt><expr><name>ret</name> = <name>ENOMEM</name></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>COsErrno</name>::<name>os_set_errno</name></name><argument_list>(<argument><expr><name>ENOMEM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><call><name><name>CDbErr</name>::<name>db_err</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>,
			    <argument><expr>"realloc: %s: %lu"</expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>(<name>u_long</name>)<name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr>(<name>ret</name>)</expr>;</return>
		}</block></then></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DIAGNOSTIC</name></cpp:ifdef>
		<expr_stmt><expr>((<name>u_int8_t</name> *)<name>p</name>)[<name>size</name> - 1] = <name>CLEAR_BYTE</name></expr>;</expr_stmt>	<comment type="block">/* Initialize guard byte. */</comment>
	
		<expr_stmt><expr>((union <name>__db_allocinfo</name> *)<name>p</name>)-&gt;<name>size</name> = <name>size</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>p</name> = &amp;((union <name>__db_allocinfo</name> *)<name>p</name>)[1]</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	
		<expr_stmt><expr>*(<name>void</name> **)<name>storep</name> = <name>p</name></expr>;</expr_stmt>
	
		<return>return <expr>(0)</expr>;</return>
	}</block></function>

	<function><type><name>static</name> <name>void</name></type> <name>os_free</name><parameter_list>(<param><decl><type><name>DB_ENV</name> *</type><name>dbenv</name></decl></param>, <param><decl><type><name>void</name> *</type><name>ptr</name></decl></param>)</parameter_list>
	<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DIAGNOSTIC</name></cpp:ifdef>
		<decl_stmt><decl><type><name>size_t</name></type> <name>size</name></decl>;</decl_stmt>
		<comment type="block">/*
		 * Check that the guard byte (one past the end of the memory) is
		 * still CLEAR_BYTE.
		 */</comment>
		<if>if <condition>(<expr><name>ptr</name> == <name>NULL</name></expr>)</condition><then>
			<return>return;</return></then></if>
	
		<expr_stmt><expr><name>ptr</name> = &amp;((union <name>__db_allocinfo</name> *)<name>ptr</name>)[-1]</expr>;</expr_stmt>
		<expr_stmt><expr><name>size</name> = ((union <name>__db_allocinfo</name> *)<name>ptr</name>)-&gt;<name>size</name></expr>;</expr_stmt>
		<if>if <condition>(<expr>((<name>u_int8_t</name> *)<name>ptr</name>)[<name>size</name> - 1] != <name>CLEAR_BYTE</name></expr>)</condition><then>
			 <expr_stmt><expr><call><name>os_guard</name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	
		<comment type="block">/* Overwrite memory. */</comment>
		<if>if <condition>(<expr><name>size</name> != 0</expr>)</condition><then>
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>, <argument><expr><name>CLEAR_BYTE</name></expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>COMPQUIET</name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
		<if>if <condition>(<expr><call><name>DB_GLOBAL</name><argument_list>(<argument><expr><name>j_free</name></expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then>
			<function_decl><type><name>DB_GLOBAL</name></type>(<name>j_free</name>)<parameter_list>(<param><decl><type><name>ptr</name></type></decl></param>)</parameter_list>;</function_decl></then>
		<else>else
			<expr_stmt><expr><call><name>free</name><argument_list>(<argument><expr><name>ptr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
	}</block></function>


	
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DIAGNOSTIC</name></cpp:ifdef>
	<comment type="block">/*
	 * __os_guard --
	 *	Complain and abort.
	 */</comment>
	<function><type><name>static</name> <name>void</name></type> <name>os_guard</name><parameter_list>(<param><decl><type><name>DB_ENV</name> *</type><name>dbenv</name></decl></param>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name><name>CDbErr</name>::<name>db_err</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr>"Guard byte incorrect during free"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>abort</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<comment type="block">/* NOTREACHED */</comment>
	}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	
	<function><type><name>static</name> <name>void</name> *</type> <name>ua_memcpy</name><parameter_list>(<param><decl><type><name>void</name> *</type><name>dst</name></decl></param>, <param><decl><type><name>const</name> <name>void</name> *</type><name>src</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>len</name></decl></param>)</parameter_list>
	<block>{
		<return>return <expr>((<name>void</name> *)<call><name>memcpy</name><argument_list>(<argument><expr><name>dst</name></expr></argument>, <argument><expr><name>src</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call>)</expr>;</return>
	}</block></function>
</public>}</block>;</class>



</unit>
