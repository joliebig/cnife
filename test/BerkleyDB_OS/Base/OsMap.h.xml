<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="OsMap.h"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> once</cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db_config.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NO_SYSTEM_INCLUDES</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_MMAP</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/mman.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SHMGET</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/ipc.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/shm.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db_int.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"OsMap.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"OsOflags.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_MMAP</name></cpp:ifdef>
<decl_stmt><decl><type><name>static</name> <name>int</name> <name>__os_map</name></type> <name>__P</name>((<name>DB_ENV</name> *, <name>char</name> *, <name>DB_FH</name> *, <name>size_t</name>, <name>int</name>, <name>int</name>, <name>void</name> **)</decl></decl_stmt>)<empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_SHMGET</name></cpp:ifndef>
<decl_stmt><decl><type><name>static</name> <name>int</name> <name>__db_nosystemmem</name></type> <name>__P</name>((<name>DB_ENV</name> *)</decl></decl_stmt>)<empty_stmt>;</empty_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;env/EnvFile.h&gt;</cpp:file></cpp:include>


<class>class <name>COsMap</name>
<block>{<private type="default">
</private><public>public:
	<function><type><name>static</name> <name>int</name></type> <name>os_r_sysattach</name><parameter_list>(<param><decl><type><name>DB_ENV</name> *</type><name>dbenv</name></decl></param>, <param><decl><type><name>REGINFO</name> *</type><name>infop</name></decl></param>, <param><decl><type><name>REGION</name> *</type><name>rp</name></decl></param>)</parameter_list>
	<block>{
		<if>if <condition>(<expr><call><name>F_ISSET</name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>DB_ENV_SYSTEM_MEM</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<comment type="block">/*
			 * If the region is in system memory on UNIX, we use shmget(2).
			 *
			 * !!!
			 * There exist spinlocks that don't work in shmget memory, e.g.,
			 * the HP/UX msemaphore interface.  If we don't have locks that
			 * will work in shmget memory, we better be private and not be
			 * threaded.  If we reach this point, we know we're public, so
			 * it's an error.
			 */</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MUTEX_HPPA_MSEM_INIT</name></expr></argument>)</argument_list></call></expr></cpp:if>
			<expr_stmt><expr><call><name><name>CDbErr</name>::<name>db_err</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>,
		    <argument><expr>"architecture does not support locks inside system shared memory"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr>(<name>EINVAL</name>)</expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_SHMGET</name></expr></argument>)</argument_list></call></expr></cpp:if>
			<block>{
			<decl_stmt><decl><type><name>key_t</name></type> <name>segid</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>id</name>, <name>mode</name>, <name>ret</name></decl>;</decl_stmt>
	
			<comment type="block">/*
			 * We could potentially create based on REGION_CREATE_OK, but
			 * that's dangerous -- we might get crammed in sideways if
			 * some of the expected regions exist but others do not.  Also,
			 * if the requested size differs from an existing region's
			 * actual size, then all sorts of nasty things can happen.
			 * Basing create solely on REGION_CREATE is much safer -- a
			 * recovery will get us straightened out.
			 */</comment>
			<if>if <condition>(<expr><call><name>F_ISSET</name><argument_list>(<argument><expr><name>infop</name></expr></argument>, <argument><expr><name>REGION_CREATE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<comment type="block">/*
				 * The application must give us a base System V IPC key
				 * value.  Adjust that value based on the region's ID,
				 * and correct so the user's original value appears in
				 * the ipcs output.
				 */</comment>
				<if>if <condition>(<expr><name>dbenv</name>-&gt;<name>shm_key</name> == <name>INVALID_REGION_SEGID</name></expr>)</condition><then> <block>{
					<expr_stmt><expr><call><name><name>CDbErr</name>::<name>db_err</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>,
				    <argument><expr>"no base system shared memory ID specified"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr>(<name>EINVAL</name>)</expr>;</return>
				}</block></then></if>
				<expr_stmt><expr><name>segid</name> = <call>(<name>key_t</name>)<argument_list>(<argument><expr><name>dbenv</name>-&gt;<name>shm_key</name> + (<name>infop</name>-&gt;<name>id</name> - 1)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
				<comment type="block">/*
				 * If map to an existing region, assume the application
				 * crashed and we're restarting.  Delete the old region
				 * and re-try.  If that fails, return an error, the
				 * application will have to select a different segment
				 * ID or clean up some other way.
				 */</comment>
				<if>if <condition>(<expr>(<name>id</name> = <call><name>shmget</name><argument_list>(<argument><expr><name>segid</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>) != -1</expr>)</condition><then> <block>{
					<expr_stmt><expr>(<name>void</name>)<call><name>shmctl</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>IPC_RMID</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<if>if <condition>(<expr>(<name>id</name> = <call><name>shmget</name><argument_list>(<argument><expr><name>segid</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>) != -1</expr>)</condition><then> <block>{
						<expr_stmt><expr><call><name><name>CDbErr</name>::<name>db_err</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>,
			<argument><expr>"shmget: key: %ld: shared system memory region already exists"</expr></argument>,
						    <argument><expr>(<name>long</name>)<name>segid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
						<return>return <expr>(<name>EAGAIN</name>)</expr>;</return>
					}</block></then></if>
				}</block></then></if>
	
				<comment type="block">/*
				 * Map the DbEnv::open method file mode permissions to
				 * shmget call permissions.
				 */</comment>
				<expr_stmt><expr><name>mode</name> = <name>IPC_CREAT</name> | <call><name><name>COsOflags</name>::<name>db_shm_mode</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<if>if <condition>(<expr>(<name>id</name> = <call><name>shmget</name><argument_list>(<argument><expr><name>segid</name></expr></argument>, <argument><expr><name>rp</name>-&gt;<name>size</name></expr></argument>, <argument><expr><name>mode</name></expr></argument>)</argument_list></call>) == -1</expr>)</condition><then> <block>{
					<expr_stmt><expr><name>ret</name> = <call><name><name>COsErrno</name>::<name>os_get_errno</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><call><name><name>CDbErr</name>::<name>db_err</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>,
		<argument><expr>"shmget: key: %ld: unable to create shared system memory region: %s"</expr></argument>,
					    <argument><expr>(<name>long</name>)<name>segid</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<return>return <expr>(<name>ret</name>)</expr>;</return>
				}</block></then></if>
				<expr_stmt><expr><name>rp</name>-&gt;<name>segid</name> = <name>id</name></expr>;</expr_stmt>
			}</block></then> <else>else
				<expr_stmt><expr><name>id</name> = <name>rp</name>-&gt;<name>segid</name></expr>;</expr_stmt></else></if>
	
			<if>if <condition>(<expr>(<name>infop</name>-&gt;<name>addr</name> = <call><name>shmat</name><argument_list>(<argument><expr><name>id</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>) == (<name>void</name> *)-1</expr>)</condition><then> <block>{
				<expr_stmt><expr><name>infop</name>-&gt;<name>addr</name> = <name>NULL</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>ret</name> = <call><name><name>COsErrno</name>::<name>os_get_errno</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>CDbErr</name>::<name>db_err</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>,
		<argument><expr>"shmat: id %d: unable to attach to shared system memory region: %s"</expr></argument>,
				    <argument><expr><name>id</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr>(<name>ret</name>)</expr>;</return>
			}</block></then></if>
	
			<return>return <expr>(0)</expr>;</return>
			}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<return>return <expr>(<call><name>db_nosystemmem</name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>)</argument_list></call>)</expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		}</block></then></if>
	
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_MMAP</name></cpp:ifdef>
		<block>{
		<decl_stmt><decl><type><name>DB_FH</name> *</type><name>fhp</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
	
		<expr_stmt><expr><name>fhp</name> = <name>NULL</name></expr>;</expr_stmt>
	
		<comment type="block">/*
		 * Try to open/create the shared region file.  We DO NOT need to ensure
		 * that multiple threads/processes attempting to simultaneously create
		 * the region are properly ordered, our caller has already taken care
		 * of that.
		 */</comment>
		<if>if <condition>(<expr>(<name>ret</name> = <call><name><name>COsOpen</name>::<name>os_open</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>infop</name>-&gt;<name>name</name></expr></argument>,
		    <argument><expr><name>DB_OSO_REGION</name> |
		    (<call><name>F_ISSET</name><argument_list>(<argument><expr><name>infop</name></expr></argument>, <argument><expr><name>REGION_CREATE_OK</name></expr></argument>)</argument_list></call> ? <name>DB_OSO_CREATE</name> : 0)</expr></argument>,
		    <argument><expr><name>dbenv</name>-&gt;<name>db_mode</name></expr></argument>, <argument><expr>&amp;<name>fhp</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
			<expr_stmt><expr><call><name><name>CDbErr</name>::<name>db_err</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr>"%s: %s"</expr></argument>, <argument><expr><name>infop</name>-&gt;<name>name</name></expr></argument>, <argument><expr><call><name><name>CDbErr</name>::<name>db_strerror</name></name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	
		<comment type="block">/*
		 * If we created the file, grow it to its full size before mapping
		 * it in.  We really want to avoid touching the buffer cache after
		 * mmap(2) is called, doing anything else confuses the hell out of
		 * systems without merged VM/buffer cache systems, or, more to the
		 * point, *badly* merged VM/buffer cache systems.
		 */</comment>
		<if>if <condition>(<expr><name>ret</name> == 0 &amp;&amp; <call><name>F_ISSET</name><argument_list>(<argument><expr><name>infop</name></expr></argument>, <argument><expr><name>REGION_CREATE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><call><name>F_ISSET</name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>DB_ENV_REGION_INIT</name></expr></argument>)</argument_list></call></expr>)</condition><then>
				<expr_stmt><expr><name>ret</name> = <call><name><name>CEnvFile</name>::<name>db_file_write</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr>"region file"</expr></argument>, <argument><expr><name>fhp</name></expr></argument>,
				    <argument><expr><name>rp</name>-&gt;<name>size</name> / <name>MEGABYTE</name></expr></argument>, <argument><expr><name>rp</name>-&gt;<name>size</name> % <name>MEGABYTE</name></expr></argument>, <argument><expr>0x00</expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
			<else>else
				<expr_stmt><expr><name>ret</name> = <call><name><name>CEnvFile</name>::<name>db_file_extend</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>fhp</name></expr></argument>, <argument><expr><name>rp</name>-&gt;<name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
		}</block></then></if>
	
		<comment type="block">/* Map the file in. */</comment>
		<if>if <condition>(<expr><name>ret</name> == 0</expr>)</condition><then>
			<expr_stmt><expr><name>ret</name> = <call><name>os_map</name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>,
			    <argument><expr><name>infop</name>-&gt;<name>name</name></expr></argument>, <argument><expr><name>fhp</name></expr></argument>, <argument><expr><name>rp</name>-&gt;<name>size</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>infop</name>-&gt;<name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	
		<if>if <condition>(<expr><name>fhp</name> != <name>NULL</name></expr>)</condition><then>
			<expr_stmt><expr>(<name>void</name>)<call><name><name>COsHandle</name>::<name>os_closehandle</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>fhp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
	
		<return>return <expr>(<name>ret</name>)</expr>;</return>
		}</block>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>COMPQUIET</name><argument_list>(<argument><expr><name>infop</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>COMPQUIET</name><argument_list>(<argument><expr><name>rp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>CDbErr</name>::<name>db_err</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>,
		    <argument><expr>"architecture lacks mmap(2), shared environments not possible"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>(<name>DB_OPNOTSUP</name>)</expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	}</block></function>

	<function><type><name>static</name> <name>int</name></type> <name>os_r_sysdetach</name><parameter_list>(<param><decl><type><name>DB_ENV</name> *</type><name>dbenv</name></decl></param>, <param><decl><type><name>REGINFO</name> *</type><name>infop</name></decl></param>, <param><decl><type><name>int</name></type> <name>destroy</name></decl></param>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>REGION</name> *</type><name>rp</name></decl>;</decl_stmt>
	
		<expr_stmt><expr><name>rp</name> = <name>infop</name>-&gt;<name>rp</name></expr>;</expr_stmt>
	
		<if>if <condition>(<expr><call><name>F_ISSET</name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>DB_ENV_SYSTEM_MEM</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SHMGET</name></cpp:ifdef>
			<decl_stmt><decl><type><name>int</name></type> <name>ret</name>, <name>segid</name></decl>;</decl_stmt>
	
			<comment type="block">/*
			 * We may be about to remove the memory referenced by rp,
			 * save the segment ID, and (optionally) wipe the original.
			 */</comment>
			<expr_stmt><expr><name>segid</name> = <name>rp</name>-&gt;<name>segid</name></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>destroy</name></expr>)</condition><then>
				<expr_stmt><expr><name>rp</name>-&gt;<name>segid</name> = <name>INVALID_REGION_SEGID</name></expr>;</expr_stmt></then></if>
	
			<if>if <condition>(<expr><call><name>shmdt</name><argument_list>(<argument><expr><name>infop</name>-&gt;<name>addr</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
				<expr_stmt><expr><name>ret</name> = <call><name><name>COsErrno</name>::<name>os_get_errno</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>CDbErr</name>::<name>db_err</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr>"shmdt: %s"</expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr>(<name>ret</name>)</expr>;</return>
			}</block></then></if>
	
			<if>if <condition>(<expr><name>destroy</name> &amp;&amp; <call><name>shmctl</name><argument_list>(<argument><expr><name>segid</name></expr></argument>, <argument><expr><name>IPC_RMID</name></expr></argument>,
			    <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> != 0 &amp;&amp; (<name>ret</name> = <call><name><name>COsErrno</name>::<name>os_get_errno</name></name><argument_list>()</argument_list></call>) != <name>EINVAL</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>CDbErr</name>::<name>db_err</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>,
		    <argument><expr>"shmctl: id %d: unable to delete system shared memory region: %s"</expr></argument>,
				    <argument><expr><name>segid</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr>(<name>ret</name>)</expr>;</return>
			}</block></then></if>
	
			<return>return <expr>(0)</expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<return>return <expr>(<call><name>db_nosystemmem</name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>)</argument_list></call>)</expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		}</block></then></if>
	
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_MMAP</name></cpp:ifdef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_MUNLOCK</name></cpp:ifdef>
		<if>if <condition>(<expr><call><name>F_ISSET</name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>DB_ENV_LOCKDOWN</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<expr_stmt><expr>(<name>void</name>)<call><name>munlock</name><argument_list>(<argument><expr><name>infop</name>-&gt;<name>addr</name></expr></argument>, <argument><expr><name>rp</name>-&gt;<name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<if>if <condition>(<expr><call><name>munmap</name><argument_list>(<argument><expr><name>infop</name>-&gt;<name>addr</name></expr></argument>, <argument><expr><name>rp</name>-&gt;<name>size</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
	
			<expr_stmt><expr><name>ret</name> = <call><name><name>COsErrno</name>::<name>os_get_errno</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>CDbErr</name>::<name>db_err</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr>"munmap: %s"</expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr>(<name>ret</name>)</expr>;</return>
		}</block></then></if>
	
		<if>if <condition>(<expr><name>destroy</name> &amp;&amp; <call><name><name>COsUnlink</name>::<name>os_region_unlink</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>infop</name>-&gt;<name>name</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
			<return>return <expr>(<call><name><name>COsErrno</name>::<name>os_get_errno</name></name><argument_list>()</argument_list></call>)</expr>;</return></then></if>
	
		<return>return <expr>(0)</expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>COMPQUIET</name><argument_list>(<argument><expr><name>destroy</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>(<name>EINVAL</name>)</expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	}</block></function>
	

	<function><type><name>static</name> <name>int</name></type> <name>os_mapfile</name><parameter_list>(<param><decl><type><name>DB_ENV</name> *</type><name>dbenv</name></decl></param>, <param><decl><type><name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>DB_FH</name> *</type><name>fhp</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>len</name></decl></param>, <param><decl><type><name>int</name></type> <name>is_rdonly</name></decl></param>, <param><decl><type><name>void</name> **</type><name>addrp</name></decl></param>)</parameter_list>
	<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_MMAP</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>HAVE_QNX</name></expr></argument>)</argument_list></call></expr></cpp:if>
		<return>return <expr>(<call><name>os_map</name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>path</name></expr></argument>, <argument><expr><name>fhp</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>is_rdonly</name></expr></argument>, <argument><expr><name>addrp</name></expr></argument>)</argument_list></call>)</expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>COMPQUIET</name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>COMPQUIET</name><argument_list>(<argument><expr><name>path</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>COMPQUIET</name><argument_list>(<argument><expr><name>fhp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>COMPQUIET</name><argument_list>(<argument><expr><name>is_rdonly</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>COMPQUIET</name><argument_list>(<argument><expr><name>len</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>COMPQUIET</name><argument_list>(<argument><expr><name>addrp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>(<name>EINVAL</name>)</expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	}</block></function>

	<function><type><name>static</name> <name>int</name></type> <name>os_unmapfile</name><parameter_list>(<param><decl><type><name>DB_ENV</name> *</type><name>dbenv</name></decl></param>, <param><decl><type><name>void</name> *</type><name>addr</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>len</name></decl></param>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
	
		<comment type="block">/* If the user replaced the map call, call through their interface. */</comment>
		<if>if <condition>(<expr><call><name>DB_GLOBAL</name><argument_list>(<argument><expr><name>j_unmap</name></expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then>
			<return>return <expr>(<call><name>DB_GLOBAL</name><argument_list>(<argument><expr><name>j_unmap</name></expr></argument>)</argument_list></call>(<name>addr</name>, <name>len</name>))</expr>;</return></then></if>
	
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_MMAP</name></cpp:ifdef>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_MUNLOCK</name></cpp:ifdef>
		<if>if <condition>(<expr><call><name>F_ISSET</name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>DB_ENV_LOCKDOWN</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<expr_stmt><expr><call><name>RETRY_CHK</name><argument_list>(<argument><expr>(<call><name>munlock</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call>)</expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>COMPQUIET</name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<expr_stmt><expr><call><name>RETRY_CHK</name><argument_list>(<argument><expr>(<call><name>munmap</name><argument_list>(<argument><expr><name>addr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call>)</expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>(<name>ret</name>)</expr>;</return>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>COMPQUIET</name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
		<return>return <expr>(<name>EINVAL</name>)</expr>;</return>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	}</block></function>
	

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_MMAP</name></cpp:ifdef>
	<function><type><name>static</name> <name>int</name></type> <name>os_map</name><parameter_list>(<param><decl><type><name>DB_ENV</name> *</type><name>dbenv</name></decl></param>, <param><decl><type><name>char</name> *</type><name>path</name></decl></param>, <param><decl><type><name>DB_FH</name> *</type><name>fhp</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>len</name></decl></param>, <param><decl><type><name>int</name></type> <name>is_region</name></decl></param>, <param><decl><type><name>int</name></type> <name>is_rdonly</name></decl></param>, <param><decl><type><name>void</name> **</type><name>addrp</name></decl></param>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>void</name> *</type><name>p</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>flags</name>, <name>prot</name>, <name>ret</name></decl>;</decl_stmt>
	
		<comment type="block">/* If the user replaced the map call, call through their interface. */</comment>
		<if>if <condition>(<expr><call><name>DB_GLOBAL</name><argument_list>(<argument><expr><name>j_map</name></expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then>
			<return>return <expr>(<call><name>DB_GLOBAL</name><argument_list>(<argument><expr><name>j_map</name></expr></argument>)</argument_list></call>
			    (<name>path</name>, <name>len</name>, <name>is_region</name>, <name>is_rdonly</name>, <name>addrp</name>))</expr>;</return></then></if>
	
		<comment type="block">/* Check for illegal usage. */</comment>
		<expr_stmt><expr><call><name>DB_ASSERT</name><argument_list>(<argument><expr><call><name>F_ISSET</name><argument_list>(<argument><expr><name>fhp</name></expr></argument>, <argument><expr><name>DB_FH_OPENED</name></expr></argument>)</argument_list></call> &amp;&amp; <name>fhp</name>-&gt;<name>fd</name> != -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
		<comment type="block">/*
		 * If it's read-only, it's private, and if it's not, it's shared.
		 * Don't bother with an additional parameter.
		 */</comment>
		<expr_stmt><expr><name>flags</name> = <name>is_rdonly</name> ? <name>MAP_PRIVATE</name> : <name>MAP_SHARED</name></expr>;</expr_stmt>
	
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MAP_FILE</name></cpp:ifdef>
		<comment type="block">/*
		 * Historically, MAP_FILE was required for mapping regular files,
		 * even though it was the default.  Some systems have it, some
		 * don't, some that have it set it to 0.
		 */</comment>
		<expr_stmt><expr><name>flags</name> |= <name>MAP_FILE</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	
		<comment type="block">/*
		 * I know of no systems that implement the flag to tell the system
		 * that the region contains semaphores, but it's not an unreasonable
		 * thing to do, and has been part of the design since forever.  I
		 * don't think anyone will object, but don't set it for read-only
		 * files, it doesn't make sense.
		 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MAP_HASSEMAPHORE</name></cpp:ifdef>
		<if>if <condition>(<expr><name>is_region</name> &amp;&amp; !<name>is_rdonly</name></expr>)</condition><then>
			<expr_stmt><expr><name>flags</name> |= <name>MAP_HASSEMAPHORE</name></expr>;</expr_stmt></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>COMPQUIET</name><argument_list>(<argument><expr><name>is_region</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	
		<comment type="block">/*
		 * FreeBSD:
		 * Causes data dirtied via this VM map to be flushed to physical media
		 * only when necessary (usually by the pager) rather then gratuitously.
		 * Typically this prevents the update daemons from flushing pages
		 * dirtied through such maps and thus allows efficient sharing of
		 * memory across unassociated processes using a file-backed shared
		 * memory map.
		 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>MAP_NOSYNC</name></cpp:ifdef>
		<expr_stmt><expr><name>flags</name> |= <name>MAP_NOSYNC</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	
		<expr_stmt><expr><name>prot</name> = <name>PROT_READ</name> | (<name>is_rdonly</name> ? 0 : <name>PROT_WRITE</name>)</expr>;</expr_stmt>
	
		<comment type="block">/*
		 * XXX
		 * Work around a bug in the VMS V7.1 mmap() implementation.  To map
		 * a file into memory on VMS it needs to be opened in a certain way,
		 * originally.  To get the file opened in that certain way, the VMS
		 * mmap() closes the file and re-opens it.  When it does this, it
		 * doesn't flush any caches out to disk before closing.  The problem
		 * this causes us is that when the memory cache doesn't get written
		 * out, the file isn't big enough to match the memory chunk and the
		 * mmap() call fails.  This call to fsync() fixes the problem.  DEC
		 * thinks this isn't a bug because of language in XPG5 discussing user
		 * responsibility for on-disk and in-memory synchronization.
		 */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>VMS</name></cpp:ifdef>
		<if>if <condition>(<expr><call><name><name>COsFsync</name>::<name>os_fsync</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>fhp</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
			<return>return <expr>(<call><name><name>COsErrno</name>::<name>os_get_errno</name></name><argument_list>()</argument_list></call>)</expr>;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	
		<comment type="block">/* MAP_FAILED was not defined in early mmap implementations. */</comment>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>MAP_FAILED</name></cpp:ifndef>
<cpp:define>#<cpp:directive>define</cpp:directive>	<name>MAP_FAILED</name>	-1</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<if>if <condition>(<expr>(<name>p</name> = <call><name>mmap</name><argument_list>(<argument><expr><name>NULL</name></expr></argument>,
		    <argument><expr><name>len</name></expr></argument>, <argument><expr><name>prot</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>fhp</name>-&gt;<name>fd</name></expr></argument>, <argument><expr>(<name>off_t</name>)0</expr></argument>)</argument_list></call>) == (<name>void</name> *)<name>MAP_FAILED</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>ret</name> = <call><name><name>COsErrno</name>::<name>os_get_errno</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>CDbErr</name>::<name>db_err</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr>"mmap: %s"</expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr>(<name>ret</name>)</expr>;</return>
		}</block></then></if>
	
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_MLOCK</name></cpp:ifdef>
		<comment type="block">/*
		 * If it's a region, we want to make sure that the memory isn't paged.
		 * For example, Solaris will page large mpools because it thinks that
		 * I/O buffer memory is more important than we are.  The mlock system
		 * call may or may not succeed (mlock is restricted to the super-user
		 * on some systems).  Currently, the only other use of mmap in DB is
		 * to map read-only databases -- we don't want them paged, either, so
		 * the call isn't conditional.
		 */</comment>
		<if>if <condition>(<expr><call><name>F_ISSET</name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>DB_ENV_LOCKDOWN</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>mlock</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then> <block>{
			<expr_stmt><expr><name>ret</name> = <call><name><name>COsErrno</name>::<name>os_get_errno</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr>(<name>void</name>)<call><name>munmap</name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>len</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>CDbErr</name>::<name>db_err</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr>"mlock: %s"</expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr>(<name>ret</name>)</expr>;</return>
		}</block></then></if>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<expr_stmt><expr><call><name>COMPQUIET</name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	
		<expr_stmt><expr>*<name>addrp</name> = <name>p</name></expr>;</expr_stmt>
		<return>return <expr>(0)</expr>;</return>
	}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_SHMGET</name></cpp:ifndef>
	<function><type><name>static</name> <name>int</name></type> <name>db_nosystemmem</name><parameter_list>(<param><decl><type><name>DB_ENV</name> *</type><name>dbenv</name></decl></param>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name><name>CDbErr</name>::<name>db_err</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>,
		    <argument><expr>"architecture doesn't support environments in system memory"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>(<name>DB_OPNOTSUP</name>)</expr>;</return>
	}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</public>}</block>;</class>

</unit>
