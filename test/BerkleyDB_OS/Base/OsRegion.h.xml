<?xml version="1.0" encoding="UTF-8"?><unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" dir="" filename="OsRegion.h" language="C++"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> once</cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db_config.h"</cpp:file></cpp:include>



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db_int.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"OsRegion.h"</cpp:file></cpp:include>


<comment type="line">// extracted from os_region.c</comment>


<class>class <name>COsRegion</name>
<block>{<private type="default">
</private><public>public:
	<function>	<type><name>void</name></type> <name>/work/joliebig/workspace_sple/cnife/test/BerkleyDB_OS/Base/OsRegionHookFunction1</name><parameterlist>(<param><decl><type><name>REGION</name> *&amp;</type> <name>rp</name></decl></param>, <param><decl><type><name>DB_ENV</name> *&amp;</type> <name>dbenv</name></decl></param>)</parameterlist>
	<block>{
	<comment>//--functionbody</comment>
	}</block></function><function>	<type><name>void</name></type> <name>/work/joliebig/workspace_sple/cnife/test/BerkleyDB_OS/Base/OsRegionHookFunction29</name><parameterlist>(<param><decl><type><name>DB_ENV</name> *&amp;</type> <name>dbenv</name></decl></param>)</parameterlist>
	<block>{
	<comment>//--functionbody</comment>
	}</block></function><function><type><name>static</name> <name>int</name></type> <name>os_r_attach</name><parameter_list>(<param><decl><type><name>DB_ENV</name> *</type><name>dbenv</name></decl></param>, <param><decl><type><name>REGINFO</name> *</type><name>infop</name></decl></param>, <param><decl><type><name>REGION</name> *</type><name>rp</name></decl></param>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
	
		<comment type="block">/*
		 * All regions are created on 8K boundaries out of sheer paranoia,
		 * so we don't make some underlying VM unhappy. Make sure we don't
		 * overflow or underflow.
		 */</comment>
<cpp:define>#<cpp:directive>define</cpp:directive>	<name>OS_VMPAGESIZE</name>		(8 * 1024)</cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive>	<name>OS_VMROUNDOFF</name>(i) {						\
	if ((i) &lt;							\
	    (UINT32_MAX - OS_VMPAGESIZE) + 1 || (i) &lt; OS_VMPAGESIZE)	\
		(i) += OS_VMPAGESIZE - 1;				\
	(i) -= (i) % OS_VMPAGESIZE;					\
}</cpp:define>
		<expr_stmt><expr><call><name>OS_VMROUNDOFF</name><argument_list>(<argument><expr><name>rp</name>-&gt;<name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
<expr_stmt><expr><call><name>/work/joliebig/workspace_sple/cnife/test/BerkleyDB_OS/Base/OsRegionHookFunction1</name><argument_list>(<argument><expr><name>rp</name></expr></argument>, <argument><expr><name>dbenv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
		<comment type="block">/*
		 * If a region is private, malloc the memory.
		 *
		 * !!!
		 * If this fails because the region is too large to malloc, mmap(2)
		 * using the MAP_ANON or MAP_ANONYMOUS flags would be an alternative.
		 * I don't know of any architectures (yet!) where malloc is a problem.
		 */</comment>
		<if>if <condition>(<expr><call><name>F_ISSET</name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>DB_ENV_PRIVATE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>/work/joliebig/workspace_sple/cnife/test/BerkleyDB_OS/Base/OsRegionHookFunction29</name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr>(<name>ret</name> = <call><name><name>COsAlloc</name>::<name>os_malloc</name></name><argument_list>(
			    <argument><expr><name>dbenv</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>REGENV</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>infop</name>-&gt;<name>addr</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
				<return>return <expr>(<name>ret</name>)</expr>;</return></then></if>
	
			<expr_stmt><expr><name>infop</name>-&gt;<name>max_alloc</name> = <name>rp</name>-&gt;<name>size</name></expr>;</expr_stmt>
		}</block></then> <else>else <block>{
			<comment type="block">/*
			 * If the user replaced the map call, call through their
			 * interface.
			 */</comment>
			<if>if <condition>(<expr><call><name>DB_GLOBAL</name><argument_list>(<argument><expr><name>j_map</name></expr></argument>)</argument_list></call> != <name>NULL</name> &amp;&amp; (<name>ret</name> = <call><name>DB_GLOBAL</name><argument_list>(<argument><expr><name>j_map</name></expr></argument>)</argument_list></call>
			    (<name>infop</name>-&gt;<name>name</name>, <name>rp</name>-&gt;<name>size</name>, 1, 0, &amp;<name>infop</name>-&gt;<name>addr</name>)) != 0</expr>)</condition><then>
				<return>return <expr>(<name>ret</name>)</expr>;</return></then></if>
	
			<comment type="block">/* Get some space from the underlying system. */</comment>
			<if>if <condition>(<expr>(<name>ret</name> = <call><name><name>COsMap</name>::<name>os_r_sysattach</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>infop</name></expr></argument>, <argument><expr><name>rp</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
				<return>return <expr>(<name>ret</name>)</expr>;</return></then></if>
		}</block></else></if>
	
		<comment type="block">/*
		 * We may require alignment the underlying system or heap allocation
		 * library doesn't supply.  Align the address if necessary, saving
		 * the original values for restoration when the region is discarded.
		 */</comment>
		<expr_stmt><expr><name>infop</name>-&gt;<name>addr_orig</name> = <name>infop</name>-&gt;<name>addr</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>infop</name>-&gt;<name>addr</name> = <call><name>ALIGNP_INC</name><argument_list>(<argument><expr><name>infop</name>-&gt;<name>addr_orig</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>size_t</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
		<expr_stmt><expr><name>rp</name>-&gt;<name>size_orig</name> = <name>rp</name>-&gt;<name>size</name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>infop</name>-&gt;<name>addr</name> != <name>infop</name>-&gt;<name>addr_orig</name></expr>)</condition><then>
			<expr_stmt><expr><name>rp</name>-&gt;<name>size</name> -=
			    (<name>u_int8_t</name> *)<name>infop</name>-&gt;<name>addr</name> - (<name>u_int8_t</name> *)<name>infop</name>-&gt;<name>addr_orig</name></expr>;</expr_stmt></then></if>
	
		<return>return <expr>(0)</expr>;</return>
	}</block></function>

	<function><type><name>static</name> <name>int</name></type> <name>os_r_detach</name><parameter_list>(<param><decl><type><name>DB_ENV</name> *</type><name>dbenv</name></decl></param>, <param><decl><type><name>REGINFO</name> *</type><name>infop</name></decl></param>, <param><decl><type><name>int</name></type> <name>destroy</name></decl></param>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>REGION</name> *</type><name>rp</name></decl>;</decl_stmt>
	
		<expr_stmt><expr><name>rp</name> = <name>infop</name>-&gt;<name>rp</name></expr>;</expr_stmt>
	
		<comment type="block">/* Restore any address/size altered for alignment reasons. */</comment>
		<if>if <condition>(<expr><name>infop</name>-&gt;<name>addr</name> != <name>infop</name>-&gt;<name>addr_orig</name></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>infop</name>-&gt;<name>addr</name> = <name>infop</name>-&gt;<name>addr_orig</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>rp</name>-&gt;<name>size</name> = <name>rp</name>-&gt;<name>size_orig</name></expr>;</expr_stmt>
		}</block></then></if>
	
		<comment type="block">/* If a region is private, free the memory. */</comment>
		<if>if <condition>(<expr><call><name>F_ISSET</name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>DB_ENV_PRIVATE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>COsAlloc</name>::<name>os_free</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>infop</name>-&gt;<name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr>(0)</expr>;</return>
		}</block></then></if>
	
		<comment type="block">/* If the user replaced the map call, call through their interface. */</comment>
		<if>if <condition>(<expr><call><name>DB_GLOBAL</name><argument_list>(<argument><expr><name>j_unmap</name></expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then>
			<return>return <expr>(<call><name>DB_GLOBAL</name><argument_list>(<argument><expr><name>j_unmap</name></expr></argument>)</argument_list></call>(<name>infop</name>-&gt;<name>addr</name>, <name>rp</name>-&gt;<name>size</name>))</expr>;</return></then></if>
	
		<return>return <expr>(<call><name><name>COsMap</name>::<name>os_r_sysdetach</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>infop</name></expr></argument>, <argument><expr><name>destroy</name></expr></argument>)</argument_list></call>)</expr>;</return>
	}</block></function>
</public>}</block>;</class>


</unit>