<?xml version="1.0" encoding="UTF-8"?><unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" dir="" filename="OsRw.h" language="C++"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> once</cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db_config.h"</cpp:file></cpp:include>






<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db_int.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"OsRw.h"</cpp:file></cpp:include>


<decl_stmt><decl><type><name>static</name> <name>int</name> <name>__os_physwrite</name></type> <name>__P</name>((<name>DB_ENV</name> *, <name>DB_FH</name> *, <name>void</name> *, <name>size_t</name>, <name>size_t</name> *)</decl></decl_stmt>)<empty_stmt>;</empty_stmt>


<class>class <name>COsRw</name>
<block>{<private type="default">
</private><public>public:
	<function>	<type><name>void</name></type> <name>/work/joliebig/workspace_sple/cnife/test/BerkleyDB_OS/Base/OsRwHookFunction17</name><parameterlist>(<param><decl><type><name>ssize_t</name>&amp;</type> <name>nio</name></decl></param>, <param><decl><type><name>int</name>&amp;</type> <name>op</name></decl></param>, <param><decl><type><name>DB_FH</name> *&amp;</type> <name>fhp</name></decl></param>, <param><decl><type><name>u_int8_t</name> *&amp;</type> <name>buf</name></decl></param>, <param><decl><type><name>u_int32_t</name>&amp;</type> <name>pagesize</name></decl></param>, <param><decl><type><name>db_pgno_t</name>&amp;</type> <name>pgno</name></decl></param>, <param><decl><type><name>size_t</name> *&amp;</type> <name>niop</name></decl></param>)</parameterlist>
	<block>{
	<comment>//--functionbody</comment>
	}</block></function><function><type><name>static</name> <name>int</name></type> <name>os_io</name><parameter_list>(<param><decl><type><name>DB_ENV</name> *</type><name>dbenv</name></decl></param>, <param><decl><type><name>int</name></type> <name>op</name></decl></param>, <param><decl><type><name>DB_FH</name> *</type><name>fhp</name></decl></param>, <param><decl><type><name>db_pgno_t</name></type> <name>pgno</name></decl></param>, <param><decl><type><name>u_int32_t</name></type> <name>pagesize</name></decl></param>, <param><decl><type><name>u_int8_t</name> *</type><name>buf</name></decl></param>, <param><decl><type><name>size_t</name> *</type><name>niop</name></decl></param>)</parameter_list>
	<block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PREAD</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_PWRITE</name></expr></argument>)</argument_list></call></expr></cpp:if>
		<decl_stmt><decl><type><name>ssize_t</name></type> <name>nio</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
	
		<comment type="block">/* Check for illegal usage. */</comment>
		<expr_stmt><expr><call><name>DB_ASSERT</name><argument_list>(<argument><expr><call><name>F_ISSET</name><argument_list>(<argument><expr><name>fhp</name></expr></argument>, <argument><expr><name>DB_FH_OPENED</name></expr></argument>)</argument_list></call> &amp;&amp; <name>fhp</name>-&gt;<name>fd</name> != -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
<expr_stmt><expr><call><name>/work/joliebig/workspace_sple/cnife/test/BerkleyDB_OS/Base/OsRwHookFunction17</name><argument_list>(<argument><expr><name>nio</name></expr></argument>, <argument><expr><name>op</name></expr></argument>, <argument><expr><name>fhp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pagesize</name></expr></argument>, <argument><expr><name>pgno</name></expr></argument>, <argument><expr><name>niop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>MUTEX_LOCK</name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>fhp</name>-&gt;<name>mtx_fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
		<if>if <condition>(<expr>(<name>ret</name> = <call><name><name>COsSeek</name>::<name>os_seek</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>fhp</name></expr></argument>,
		    <argument><expr><name>pagesize</name></expr></argument>, <argument><expr><name>pgno</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>DB_OS_SEEK_SET</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
			<goto>goto <name>err</name>;</goto></then></if>
		<switch>switch <condition>(<expr><name>op</name></expr>)</condition> <block>{
		<case>case <expr><name>DB_IO_READ</name></expr>:
			<expr_stmt><expr><name>ret</name> = <call><name>os_read</name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>fhp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pagesize</name></expr></argument>, <argument><expr><name>niop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</case><case>case <expr><name>DB_IO_WRITE</name></expr>:
			<expr_stmt><expr><name>ret</name> = <call><name>os_write</name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>fhp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pagesize</name></expr></argument>, <argument><expr><name>niop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</case><default>default:
			<expr_stmt><expr><name>ret</name> = <name>EINVAL</name></expr>;</expr_stmt>
			<break>break;</break>
		</default>}</block></switch>
	
	<label><name>err</name>:</label>	<expr_stmt><expr><call><name>MUTEX_UNLOCK</name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>fhp</name>-&gt;<name>mtx_fh</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
		<return>return <expr>(<name>ret</name>)</expr>;</return>
	
	}</block></function>
	

	<function><type><name>static</name> <name>int</name></type> <name>os_read</name><parameter_list>(<param><decl><type><name>DB_ENV</name> *</type><name>dbenv</name></decl></param>, <param><decl><type><name>DB_FH</name> *</type><name>fhp</name></decl></param>, <param><decl><type><name>void</name> *</type><name>addr</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>len</name></decl></param>, <param><decl><type><name>size_t</name> *</type><name>nrp</name></decl></param>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>size_t</name></type> <name>offset</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ssize_t</name></type> <name>nr</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>u_int8_t</name> *</type><name>taddr</name></decl>;</decl_stmt>
	
		<expr_stmt><expr><name>ret</name> = 0</expr>;</expr_stmt>
	
		<comment type="block">/* Check for illegal usage. */</comment>
		<expr_stmt><expr><call><name>DB_ASSERT</name><argument_list>(<argument><expr><call><name>F_ISSET</name><argument_list>(<argument><expr><name>fhp</name></expr></argument>, <argument><expr><name>DB_FH_OPENED</name></expr></argument>)</argument_list></call> &amp;&amp; <name>fhp</name>-&gt;<name>fd</name> != -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
		<if>if <condition>(<expr><call><name>DB_GLOBAL</name><argument_list>(<argument><expr><name>j_read</name></expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then> <block>{
			<expr_stmt><expr>*<name>nrp</name> = <name>len</name></expr>;</expr_stmt>
			<if>if <condition>(<expr><call><name>DB_GLOBAL</name><argument_list>(<argument><expr><name>j_read</name></expr></argument>)</argument_list></call>(<name>fhp</name>-&gt;<name>fd</name>, <name>addr</name>, <name>len</name>) != (<name>ssize_t</name>)<name>len</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>ret</name> = <call><name><name>COsErrno</name>::<name>os_get_errno</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>CDbErr</name>::<name>db_err</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr>"read: %#lx, %lu: %s"</expr></argument>,
				    <argument><expr><call><name>P_TO_ULONG</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>(<name>u_long</name>)<name>len</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<return>return <expr>(<name>ret</name>)</expr>;</return>
		}</block></then></if>
	
		<for>for (<init><expr><name>taddr</name> = <call><name><name>static_cast</name><argument_list>&lt;<argument><name>u_int8_t</name>*</argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>, <expr><name>offset</name> = 0</expr>;</init>
		    <condition><expr><name>offset</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>taddr</name> += <name>nr</name></expr>, <expr><name>offset</name> += (<name>u_int32_t</name>)<name>nr</name></expr></incr>) <block>{
			<expr_stmt><expr><call><name>RETRY_CHK</name><argument_list>(<argument><expr>((<name>nr</name> = <call><name>read</name><argument_list>(
			    <argument><expr><name>fhp</name>-&gt;<name>fd</name></expr></argument>, <argument><expr><name>taddr</name></expr></argument>, <argument><expr><name>len</name> - <name>offset</name></expr></argument>)</argument_list></call>) &lt; 0 ? 1 : 0)</expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>nr</name> == 0 || <name>ret</name> != 0</expr>)</condition><then>
				<break>break;</break></then></if>
		}</block></for>
		<expr_stmt><expr>*<name>nrp</name> = <call>(<name>size_t</name>)<argument_list>(<argument><expr><name>taddr</name> - (<name>u_int8_t</name> *)<name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>ret</name> != 0</expr>)</condition><then>
			<expr_stmt><expr><call><name><name>CDbErr</name>::<name>db_err</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr>"read: %#lx, %lu: %s"</expr></argument>,
			    <argument><expr><call><name>P_TO_ULONG</name><argument_list>(<argument><expr><name>taddr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>(<name>u_long</name>)<name>len</name> - <name>offset</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<return>return <expr>(<name>ret</name>)</expr>;</return>
	}</block></function>
	

	<function><type><name>static</name> <name>int</name></type> <name>os_write</name><parameter_list>(<param><decl><type><name>DB_ENV</name> *</type><name>dbenv</name></decl></param>, <param><decl><type><name>DB_FH</name> *</type><name>fhp</name></decl></param>, <param><decl><type><name>void</name> *</type><name>addr</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>len</name></decl></param>, <param><decl><type><name>size_t</name> *</type><name>nwp</name></decl></param>)</parameter_list>
	<block>{
		<comment type="block">/* Check for illegal usage. */</comment>
		<expr_stmt><expr><call><name>DB_ASSERT</name><argument_list>(<argument><expr><call><name>F_ISSET</name><argument_list>(<argument><expr><name>fhp</name></expr></argument>, <argument><expr><name>DB_FH_OPENED</name></expr></argument>)</argument_list></call> &amp;&amp; <name>fhp</name>-&gt;<name>fd</name> != -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_FILESYSTEM_NOTZERO</name></cpp:ifdef>
		<comment type="block">/* Zero-fill as necessary. */</comment>
		<if>if <condition>(<expr><call><name><name>COsConfig</name>::<name>os_fs_notzero</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
			<if>if <condition>(<expr>(<name>ret</name> = <call><name>os_zerofill</name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>fhp</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
				<return>return <expr>(<name>ret</name>)</expr>;</return></then></if>
		}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<return>return <expr>(<call><name>os_physwrite</name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>fhp</name></expr></argument>, <argument><expr><name>addr</name></expr></argument>, <argument><expr><name>len</name></expr></argument>, <argument><expr><name>nwp</name></expr></argument>)</argument_list></call>)</expr>;</return>
	}</block></function>
	

	<function><type><name>static</name> <name>int</name></type> <name>os_physwrite</name><parameter_list>(<param><decl><type><name>DB_ENV</name> *</type><name>dbenv</name></decl></param>, <param><decl><type><name>DB_FH</name> *</type><name>fhp</name></decl></param>, <param><decl><type><name>void</name> *</type><name>addr</name></decl></param>, <param><decl><type><name>size_t</name></type> <name>len</name></decl></param>, <param><decl><type><name>size_t</name> *</type><name>nwp</name></decl></param>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>size_t</name></type> <name>offset</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>ssize_t</name></type> <name>nw</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>u_int8_t</name> *</type><name>taddr</name></decl>;</decl_stmt>
	
		<expr_stmt><expr><name>ret</name> = 0</expr>;</expr_stmt>
	
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FILESYSTEM_NOTZERO</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>DIAGNOSTIC</name></expr></argument>)</argument_list></call></expr></cpp:if>
		<if>if <condition>(<expr><call><name><name>COsConfig</name>::<name>os_fs_notzero</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
			<decl_stmt><decl><type>struct <name>stat</name></type> <name>sb</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>off_t</name></type> <name>cur_off</name></decl>;</decl_stmt>
	
			<expr_stmt><expr><call><name>DB_ASSERT</name><argument_list>(<argument><expr><call><name>fstat</name><argument_list>(<argument><expr><name>fhp</name>-&gt;<name>fd</name></expr></argument>, <argument><expr>&amp;<name>sb</name></expr></argument>)</argument_list></call> != -1 &amp;&amp;
			    (<name>cur_off</name> = <call><name>lseek</name><argument_list>(<argument><expr><name>fhp</name>-&gt;<name>fd</name></expr></argument>, <argument><expr>(<name>off_t</name>)0</expr></argument>, <argument><expr><name>SEEK_CUR</name></expr></argument>)</argument_list></call>) != -1 &amp;&amp;
			    <name>cur_off</name> &lt;= <name>sb</name>.<name>st_size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	
		<comment type="block">/*
		 * Make a last "panic" check.  Imagine a thread of control running in
		 * Berkeley DB, going to sleep.  Another thread of control decides to
		 * run recovery because the environment is broken.  The first thing
		 * recovery does is panic the existing environment, but we only check
		 * the panic flag when crossing the public API.  If the sleeping thread
		 * wakes up and writes something, we could have two threads of control
		 * writing the log files at the same time.  So, before writing, make a
		 * last panic check.  Obviously, there's still a window, but it's very,
		 * very small.
		 */</comment>
		<expr_stmt><expr><call><name>PANIC_CHECK</name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
		<if>if <condition>(<expr><call><name>DB_GLOBAL</name><argument_list>(<argument><expr><name>j_write</name></expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then> <block>{
			<expr_stmt><expr>*<name>nwp</name> = <name>len</name></expr>;</expr_stmt>
			<if>if <condition>(<expr><call><name>DB_GLOBAL</name><argument_list>(<argument><expr><name>j_write</name></expr></argument>)</argument_list></call>(<name>fhp</name>-&gt;<name>fd</name>, <name>addr</name>, <name>len</name>) != (<name>ssize_t</name>)<name>len</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><name>ret</name> = <call><name><name>COsErrno</name>::<name>os_get_errno</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name><name>CDbErr</name>::<name>db_err</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr>"write: %#lx, %lu: %s"</expr></argument>,
				    <argument><expr><call><name>P_TO_ULONG</name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>(<name>u_long</name>)<name>len</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<return>return <expr>(<name>ret</name>)</expr>;</return>
		}</block></then></if>
	
		<for>for (<init><expr><name>taddr</name> = <call><name><name>static_cast</name><argument_list>&lt;<argument><name>u_int8_t</name>*</argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>, <expr><name>offset</name> = 0</expr>;</init>
		    <condition><expr><name>offset</name> &lt; <name>len</name></expr>;</condition> <incr><expr><name>taddr</name> += <name>nw</name></expr>, <expr><name>offset</name> += (<name>u_int32_t</name>)<name>nw</name></expr></incr>) <block>{
			<expr_stmt><expr><call><name>RETRY_CHK</name><argument_list>(<argument><expr>((<name>nw</name> = <call><name>write</name><argument_list>(
			    <argument><expr><name>fhp</name>-&gt;<name>fd</name></expr></argument>, <argument><expr><name>taddr</name></expr></argument>, <argument><expr><name>len</name> - <name>offset</name></expr></argument>)</argument_list></call>) &lt; 0 ? 1 : 0)</expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>ret</name> != 0</expr>)</condition><then>
				<break>break;</break></then></if>
		}</block></for>
		<expr_stmt><expr>*<name>nwp</name> = <name>len</name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>ret</name> != 0</expr>)</condition><then>
			<expr_stmt><expr><call><name><name>CDbErr</name>::<name>db_err</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr>"write: %#lx, %lu: %s"</expr></argument>,
			    <argument><expr><call><name>P_TO_ULONG</name><argument_list>(<argument><expr><name>taddr</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>(<name>u_long</name>)<name>len</name> - <name>offset</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<return>return <expr>(<name>ret</name>)</expr>;</return>
	}</block></function>
	


</public>}</block>;</class>

</unit>