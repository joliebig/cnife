<?xml version="1.0" encoding="UTF-8"?><unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" dir="" filename="OsId.h" language="C++"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> once</cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db_config.h"</cpp:file></cpp:include>



<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db_int.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dbinc/mutex_int.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"OsId.h"</cpp:file></cpp:include>






<comment type="line">// extracted from os_id.c</comment>


<class>class <name>COsId</name>
<block>{<private type="default">
</private><public>public:
	<function>	<type><name>void</name></type> <name>/work/joliebig/workspace_sple/cnife/test/BerkleyDB_OS/Base/OsIdHookFunction18</name><parameterlist>(<param><decl><type><name>db_threadid_t</name> *&amp;</type> <name>tidp</name></decl></param>)</parameterlist>
	<block>{
	<comment>//--functionbody</comment>
	}</block></function><function>	<type><name>void</name></type> <name>/work/joliebig/workspace_sple/cnife/test/BerkleyDB_OS/Base/OsIdHookFunction18</name><parameterlist>(<param><decl><type><name>db_threadid_t</name> *&amp;</type> <name>tidp</name></decl></param>)</parameterlist>
	<block>{
	<comment>//--functionbody</comment>
	}</block></function><function>	<type><name>void</name></type> <name>/work/joliebig/workspace_sple/cnife/test/BerkleyDB_OS/Base/OsIdHookFunction28</name><parameterlist>(<param><decl><type><name>pid_t</name> *&amp;</type> <name>pidp</name></decl></param>)</parameterlist>
	<block>{
	<comment>//--functionbody</comment>
	}</block></function><function>	<type><name>void</name></type> <name>/work/joliebig/workspace_sple/cnife/test/BerkleyDB_OS/Base/OsIdHookFunction28</name><parameterlist>(<param><decl><type><name>pid_t</name> *&amp;</type> <name>pidp</name></decl></param>)</parameterlist>
	<block>{
	<comment>//--functionbody</comment>
	}</block></function><function><type><name>static</name> <name>void</name></type> <name>os_id</name><parameter_list>(<param><decl><type><name>DB_ENV</name> *</type><name>dbenv</name></decl></param>, <param><decl><type><name>pid_t</name> *</type><name>pidp</name></decl></param>, <param><decl><type><name>db_threadid_t</name> *</type><name>tidp</name></decl></param>)</parameter_list>
	<block>{
		<comment type="block">/*
		 * We can't depend on dbenv not being NULL, this routine is called
		 * from places where there's no DB_ENV handle.  It takes a DB_ENV
		 * handle as an arg because it's the default DB_ENV-&gt;thread_id function.
		 *
		 * We cache the pid in the DB_ENV handle, it's a fairly slow call on
		 * lots of systems.
		 */</comment>
		<if>if <condition>(<expr><name>pidp</name> != <name>NULL</name></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><name>dbenv</name> == <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>/work/joliebig/workspace_sple/cnife/test/BerkleyDB_OS/Base/OsIdHookFunction28</name><argument_list>(<argument><expr><name>pidp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>/work/joliebig/workspace_sple/cnife/test/BerkleyDB_OS/Base/OsIdHookFunction28</name><argument_list>(<argument><expr><name>pidp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then> <else>else
				<expr_stmt><expr>*<name>pidp</name> = <name>dbenv</name>-&gt;<name>pid_cache</name></expr>;</expr_stmt></else></if>
		}</block></then></if>
	
		<if>if <condition>(<expr><name>tidp</name> != <name>NULL</name></expr>)</condition><then> <block>{
<expr_stmt><expr><call><name>/work/joliebig/workspace_sple/cnife/test/BerkleyDB_OS/Base/OsIdHookFunction18</name><argument_list>(<argument><expr><name>tidp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt><expr_stmt><expr><call><name>/work/joliebig/workspace_sple/cnife/test/BerkleyDB_OS/Base/OsIdHookFunction18</name><argument_list>(<argument><expr><name>tidp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>
	<function>	<type><name>void</name></type> <name>/work/joliebig/workspace_sple/cnife/test/BerkleyDB_OS/Base/OsIdHookFunction7</name><parameterlist>(<param><decl><type><name>static</name> <name>int</name>&amp;</type> <name>first</name></decl></param>, <param><decl><type><name>u_int32_t</name>&amp;</type> <name>id</name></decl></param>)</parameterlist>
	<block>{
	<comment>//--functionbody</comment>
	}</block></function><function>	<type><name>void</name></type> <name>/work/joliebig/workspace_sple/cnife/test/BerkleyDB_OS/Base/OsIdHookFunction21</name><parameterlist>(<param><decl><type><name>u_int32_t</name>&amp;</type> <name>id</name></decl></param>)</parameterlist>
	<block>{
	<comment>//--functionbody</comment>
	}</block></function><function><type><name>static</name> <name>void</name></type> <name>os_unique_id</name><parameter_list>(<param><decl><type><name>DB_ENV</name> *</type><name>dbenv</name></decl></param>, <param><decl><type><name>u_int32_t</name> *</type><name>idp</name></decl></param>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>static</name> <name>int</name></type> <name>first</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>db_threadid_t</name></type> <name>tid</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>u_int32_t</name></type> <name>id</name>, <name>sec</name>, <name>usec</name></decl>;</decl_stmt>
	
		<expr_stmt><expr>*<name>idp</name> = 0</expr>;</expr_stmt>
	
		<comment type="block">/*
		 * Our randomized value is comprised of our process ID, the current
		 * time of day and a couple of a stack addresses, all XOR'd together.
		 */</comment>
		<expr_stmt><expr><call><name>os_id</name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr>&amp;<name>pid</name></expr></argument>, <argument><expr>&amp;<name>tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name><name>COsClock</name>::<name>os_clock</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr>&amp;<name>sec</name></expr></argument>, <argument><expr>&amp;<name>usec</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
		<expr_stmt><expr><name>id</name> = (<name>u_int32_t</name>)<name>pid</name> ^ <name>sec</name> ^ <name>usec</name> ^ <call><name>P_TO_UINT32</name><argument_list>(<argument><expr>&amp;<name>pid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
		<comment type="block">/*
		 * We could try and find a reasonable random-number generator, but
		 * that's not all that easy to do.  Seed and use srand()/rand(), if
		 * we can find them.
		 */</comment>
<expr_stmt><expr><call><name>/work/joliebig/workspace_sple/cnife/test/BerkleyDB_OS/Base/OsIdHookFunction7</name><argument_list>(<argument><expr><name>first</name></expr></argument>, <argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>first</name> = 0</expr>;</expr_stmt>
	
<expr_stmt><expr><call><name>/work/joliebig/workspace_sple/cnife/test/BerkleyDB_OS/Base/OsIdHookFunction21</name><argument_list>(<argument><expr><name>id</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
		<expr_stmt><expr>*<name>idp</name> = <name>id</name></expr>;</expr_stmt>
	}</block></function>
</public>}</block>;</class>


</unit>