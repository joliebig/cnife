<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" dir="" filename="OsSleep.h">
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db_config.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NO_SYSTEM_INCLUDES</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_SYS_SELECT_H</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/select.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_VXWORKS</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/times.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;selectLib.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TIME_WITH_SYS_TIME</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SYS_TIME_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_SYS_TIME_H */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* TIME_WITH SYS_TIME */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_VXWORKS */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db_int.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"OsSleep.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"OsErrno.h"</cpp:file></cpp:include>


<class>class <name>COsSleep</name>
<block>{<private type="default">
</private><public>public:
	<function><type><name>static</name> <name>void</name></type> <name>os_sleep</name><parameter_list>(<param><decl><type><name>DB_ENV</name> *</type><name>dbenv</name></decl></param>, <param><decl><type><name>u_long</name></type> <name>secs</name></decl></param>, <param><decl><type><name>u_long</name></type> <name>usecs</name></decl></param>)</parameter_list>
	<block>{
		<decl_stmt><decl><type>struct <name>timeval</name></type> <name>t</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
	
		<comment type="block">/* Don't require that the values be normalized. */</comment>
		<for>for (<init>;</init> <condition><expr><name>usecs</name> &gt;= 1000000</expr>;</condition> <incr><expr><name>usecs</name> -= 1000000</expr></incr>)
			<expr_stmt><expr>++<name>secs</name></expr>;</expr_stmt></for>
	
		<if>if <condition>(<expr><call><name>DB_GLOBAL</name><argument_list>(<argument><expr><name>j_sleep</name></expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then> <block>{
			<expr_stmt><expr>(<name>void</name>)<call><name>DB_GLOBAL</name><argument_list>(<argument><expr><name>j_sleep</name></expr></argument>)</argument_list></call>(<name>secs</name>, <name>usecs</name>)</expr>;</expr_stmt>
			<return>return;</return>
		}</block></then></if>
	
		<comment type="block">/*
		 * It's important that we yield the processor here so that other
		 * processes or threads are permitted to run.
		 *
		 * Sheer raving paranoia -- don't select for 0 time.
		 */</comment>
		<expr_stmt><expr><name>t</name>.<name>tv_sec</name> = (<name>long</name>)<name>secs</name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>secs</name> == 0 &amp;&amp; <name>usecs</name> == 0</expr>)</condition><then>
			<expr_stmt><expr><name>t</name>.<name>tv_usec</name> = 1</expr>;</expr_stmt></then>
		<else>else
			<expr_stmt><expr><name>t</name>.<name>tv_usec</name> = (<name>long</name>)<name>usecs</name></expr>;</expr_stmt></else></if>
	
		<comment type="block">/*
		 * We don't catch interrupts and restart the system call here, unlike
		 * other Berkeley DB system calls.  This may be a user attempting to
		 * interrupt a sleeping DB utility (for example, db_checkpoint), and
		 * we want the utility to see the signal and quit.  This assumes it's
		 * always OK for DB to sleep for less time than originally scheduled.
		 */</comment>
		<if>if <condition>(<expr><call><name>select</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>, <argument><expr>&amp;<name>t</name></expr></argument>)</argument_list></call> == -1</expr>)</condition><then>
			 <if>if <condition>(<expr>(<name>ret</name> = <call><name><name>COsErrno</name>::<name>os_get_errno</name></name><argument_list>()</argument_list></call>) != <name>EINTR</name></expr>)</condition><then>
				<expr_stmt><expr><call><name><name>CDbErr</name>::<name>db_err</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr>"select: %s"</expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if></then></if>
	}</block></function>
</public>}</block>;</class>

</unit>
