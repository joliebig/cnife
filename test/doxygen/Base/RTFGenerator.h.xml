<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="RTFGenerator.h"><comment type="block">/******************************************************************************
 *
 * $Id: rtfgen.h,v 1.13 2001/03/19 19:27:41 root Exp $
 *
 * Copyright (C) 1997-2008 by Parker Waechter &amp; Dimitri van Heesch.
 *
 * Permission to use, copy, modify, and distribute this software and its
 * documentation under the terms of the GNU General Public License is hereby 
 * granted. No representations are made about the suitability of this software 
 * for any purpose. It is provided "as is" without express or implied warranty.
 * See the GNU General Public License for more details.
 *
 * Documents produced by Doxygen are derivative works derived from the
 * input used in their production; they are not affected by this license.
 *
 */</comment>

<cpp:pragma>#<cpp:directive>pragma</cpp:directive> once</cpp:pragma>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"qtbc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qdir.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;qregexp.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"outputgen.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"config.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"message.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"doxygen.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"util.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"diagram.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"language.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dot.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"version.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"pagedef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rtfstyle.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"rtfdocvisitor.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"docparser.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"dirdef.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"vhdldocgen.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive> <name>DBG_RTF</name>(x)</cpp:define>

<class_decl>class <name>QFile</name>;</class_decl>
<function_decl><type><name>void</name></type> <name>testRTFOutput</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>bool</name></type> <name>PreProcessFile</name><parameter_list>(<param><decl><type><name>QDir</name> &amp;</type><name>d</name></decl></param>,<param><decl><type><name>QCString</name> &amp;</type><name>infName</name></decl></param>, <param><decl><type><name>QTextStream</name> &amp;</type><name>t</name></decl></param>, <param><decl><type><name>bool</name></type> <name>bIncludeHeader</name>=<init><expr><name>TRUE</name></expr></init></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>QCString</name></type> <name>makeIndexName</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type><name>s</name></decl></param>,<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>static</name> <name>QCString</name></type> <name>dateToRTFDateString</name><parameter_list>()</parameter_list>;</function_decl>

<class>class <name>RTFGenerator</name> <super>: <specifier>public</specifier> <name>OutputGenerator</name></super>
<block>{<private type="default">
  </private><public>public:
	  <constructor><name>RTFGenerator</name><parameter_list>()</parameter_list> <member_list>: <call><name>OutputGenerator</name><argument_list>()</argument_list></call>
	  </member_list><block>{
		  <expr_stmt><expr><name>dir</name>=<call><name>Config_getString</name><argument_list>(<argument><expr>"RTF_OUTPUT"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  <expr_stmt><expr><name>col</name>=0</expr>;</expr_stmt>
		  <comment type="line">//insideTabbing=FALSE;</comment>
		  <expr_stmt><expr><name>m_listLevel</name> = 0</expr>;</expr_stmt>
		  <expr_stmt><expr><name>m_bstartedBody</name> = <name>FALSE</name></expr>;</expr_stmt>
		  <expr_stmt><expr><name>m_omitParagraph</name> = <name>FALSE</name></expr>;</expr_stmt>
		  <expr_stmt><expr><name>m_numCols</name> = 0</expr>;</expr_stmt>
	  }</block></constructor>
	  <destructor><name>~<name>RTFGenerator</name></name><parameter_list>()</parameter_list> <block>{ }</block></destructor>
	  <function><type><name>static</name> <name>void</name></type> <name>init</name><parameter_list>()</parameter_list>
	  <block>{
		  <decl_stmt><decl><type><name>QCString</name></type> <name>dir</name>=<init><expr><call><name>Config_getString</name><argument_list>(<argument><expr>"RTF_OUTPUT"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		  <function_decl><type><name>QDir</name></type> <name>d</name><parameter_list>(<param><decl><type><name>dir</name></type></decl></param>)</parameter_list>;</function_decl>
		  <if>if <condition>(<expr>!<name>d</name>.<call><name>exists</name><argument_list>()</argument_list></call> &amp;&amp; !<name>d</name>.<call><name>mkdir</name><argument_list>(<argument><expr><name>dir</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		  <block>{
			  <expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr>"Could not create output directory %s\n"</expr></argument>,<argument><expr><name>dir</name>.<call><name>data</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			  <expr_stmt><expr><call><name>exit</name><argument_list>(<argument><expr>1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  }</block></then></if>
		  <expr_stmt><expr><name>rtf_Style</name>.<call><name>setAutoDelete</name><argument_list>(<argument><expr><name>TRUE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		  <comment type="line">// first duplicate strings of rtf_Style_Default</comment>
		  <decl_stmt><decl><type><name>const</name> struct <name>Rtf_Style_Default</name>*</type> <name>def</name> =<init> <expr><name>rtf_Style_Default</name></expr></init></decl>;</decl_stmt>
		  <while>while<condition>(<expr><name>def</name>-&gt;<name>reference</name> != 0</expr>)</condition>
		  <block>{
			  <if>if <condition>(<expr><name>def</name>-&gt;<name>definition</name> == 0</expr>)</condition><then>
				  <expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr>"Internal error: rtf_Style_Default[%s] has no definition.\n"</expr></argument>, <argument><expr><name>def</name>-&gt;<name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
			  <decl_stmt><decl><type><name>StyleData</name>*</type> <name>styleData</name> =<init> <expr>new <call><name>StyleData</name><argument_list>(<argument><expr><name>def</name>-&gt;<name>reference</name></expr></argument>, <argument><expr><name>def</name>-&gt;<name>definition</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			  <expr_stmt><expr><name>rtf_Style</name>.<call><name>insert</name><argument_list>(<argument><expr><name>def</name>-&gt;<name>name</name></expr></argument>, <argument><expr><name>styleData</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			  <expr_stmt><expr><name>def</name>++</expr>;</expr_stmt>
		  }</block></while>

		  <comment type="line">// overwrite some (or all) definitions from file</comment>
		  <decl_stmt><decl><type><name>QCString</name> &amp;</type><name>rtfStyleSheetFile</name> =<init> <expr><call><name>Config_getString</name><argument_list>(<argument><expr>"RTF_STYLESHEET_FILE"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		  <if>if <condition>(<expr>!<name>rtfStyleSheetFile</name>.<call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><then>
		  <block>{
			  <expr_stmt><expr><call><name>loadStylesheet</name><argument_list>(<argument><expr><name>rtfStyleSheetFile</name></expr></argument>, <argument><expr><name>rtf_Style</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  }</block></then></if>

		  <comment type="line">// If user has defined an extension file, load its contents.</comment>
		  <decl_stmt><decl><type><name>QCString</name> &amp;</type><name>rtfExtensionsFile</name> =<init> <expr><call><name>Config_getString</name><argument_list>(<argument><expr>"RTF_EXTENSIONS_FILE"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		  <if>if <condition>(<expr>!<name>rtfExtensionsFile</name>.<call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><then>
		  <block>{
			  <expr_stmt><expr><call><name>loadExtensions</name><argument_list>(<argument><expr><name>rtfExtensionsFile</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		  }</block></then></if>

		  <expr_stmt><expr><call><name>createSubDirs</name><argument_list>(<argument><expr><name>d</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	  }</block></function>
	  <function><type><name>static</name> <name>void</name></type> <name>writeStyleSheetFile</name><parameter_list>(<param><decl><type><name>QFile</name> &amp;</type><name>file</name></decl></param>)</parameter_list>
	  <block>{
		  <decl_stmt><decl><type><name>QTextStream</name></type> <name>t</name><argument_list>(<argument><expr>&amp;<name>file</name></expr></argument>)</argument_list></decl>;</decl_stmt>
		  <expr_stmt><expr><name>t</name> &lt;&lt; "# Generated by doxygen " &lt;&lt; <name>versionString</name> &lt;&lt; "\n\n"</expr>;</expr_stmt>
		  <expr_stmt><expr><name>t</name> &lt;&lt; "# This file describes styles used for generating RTF output.\n"</expr>;</expr_stmt>
		  <expr_stmt><expr><name>t</name> &lt;&lt; "# All text after a hash (#) is considered a comment and will be ignored.\n"</expr>;</expr_stmt>
		  <expr_stmt><expr><name>t</name> &lt;&lt; "# Remove a hash to activate a line.\n\n"</expr>;</expr_stmt>

		  <decl_stmt><decl><type><name>int</name></type> <name>i</name></decl>;</decl_stmt>
		  <for>for ( <init><expr><name>i</name>=0</expr> ;</init> <condition><expr><name><name>rtf_Style_Default</name><index>[<expr><name>i</name></expr>]</index></name>.<name>reference</name>!=0</expr> ;</condition> <incr><expr><name>i</name>++</expr></incr> )
		  <block>{
			  <expr_stmt><expr><name>t</name> &lt;&lt; "# " &lt;&lt; <name><name>rtf_Style_Default</name><index>[<expr><name>i</name></expr>]</index></name>.<name>name</name> &lt;&lt; " = "
				  &lt;&lt; <name><name>rtf_Style_Default</name><index>[<expr><name>i</name></expr>]</index></name>.<name>reference</name>
				  &lt;&lt; <name><name>rtf_Style_Default</name><index>[<expr><name>i</name></expr>]</index></name>.<name>definition</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		  }</block></for>
	  }</block></function>
	  <function><type><name>static</name> <name>void</name></type> <name>writeExtensionsFile</name><parameter_list>(<param><decl><type><name>QFile</name> &amp;</type><name>file</name></decl></param>)</parameter_list>
	  <block>{
		  <decl_stmt><decl><type><name>QTextStream</name></type> <name>t</name><argument_list>(<argument><expr>&amp;<name>file</name></expr></argument>)</argument_list></decl>;</decl_stmt>
		  <expr_stmt><expr><name>t</name> &lt;&lt; "# Generated by doxygen " &lt;&lt; <name>versionString</name> &lt;&lt; "\n\n"</expr>;</expr_stmt>
		  <expr_stmt><expr><name>t</name> &lt;&lt; "# This file describes extensions used for generating RTF output.\n"</expr>;</expr_stmt>
		  <expr_stmt><expr><name>t</name> &lt;&lt; "# All text after a hash (#) is considered a comment and will be ignored.\n"</expr>;</expr_stmt>
		  <expr_stmt><expr><name>t</name> &lt;&lt; "# Remove a hash to activate a line.\n\n"</expr>;</expr_stmt>

		  <expr_stmt><expr><name>t</name> &lt;&lt; "# Overrides the project title.\n"</expr>;</expr_stmt>

		  <expr_stmt><expr><name>t</name> &lt;&lt; "#Title           = \n\n"</expr>;</expr_stmt>

		  <expr_stmt><expr><name>t</name> &lt;&lt; "# Name of the company that produced this document.\n"</expr>;</expr_stmt>
		  <expr_stmt><expr><name>t</name> &lt;&lt; "#Company         = \n\n"</expr>;</expr_stmt>

		  <expr_stmt><expr><name>t</name> &lt;&lt; "# Filename of a company or project logo.\n"</expr>;</expr_stmt>
		  <expr_stmt><expr><name>t</name> &lt;&lt; "#LogoFilename    = \n\n"</expr>;</expr_stmt>

		  <expr_stmt><expr><name>t</name> &lt;&lt; "# Author of the document.\n"</expr>;</expr_stmt>
		  <expr_stmt><expr><name>t</name> &lt;&lt; "#Author          = \n\n"</expr>;</expr_stmt>

		  <expr_stmt><expr><name>t</name> &lt;&lt; "# Type of document (e.g. Design Specification, User Manual, etc.).\n"</expr>;</expr_stmt>
		  <expr_stmt><expr><name>t</name> &lt;&lt; "#DocumentType    = \n\n"</expr>;</expr_stmt>

		  <expr_stmt><expr><name>t</name> &lt;&lt; "# Document tracking number.\n"</expr>;</expr_stmt>
		  <expr_stmt><expr><name>t</name> &lt;&lt; "#DocumentId      = \n\n"</expr>;</expr_stmt>

		  <expr_stmt><expr><name>t</name> &lt;&lt; "# Name of the author's manager.\n"</expr>;</expr_stmt>
		  <expr_stmt><expr><name>t</name> &lt;&lt; "# This field is not displayed in the document itself, but it is \n"</expr>;</expr_stmt>
		  <expr_stmt><expr><name>t</name> &lt;&lt; "# available in the information block of the rtf file.  In Microsoft \n"</expr>;</expr_stmt>
		  <expr_stmt><expr><name>t</name> &lt;&lt; "# Word, it is available under File:Properties.\n"</expr>;</expr_stmt>
		  <expr_stmt><expr><name>t</name> &lt;&lt; "#Manager         = \n\n"</expr>;</expr_stmt>

		  <expr_stmt><expr><name>t</name> &lt;&lt; "# Subject of the document.\n"</expr>;</expr_stmt>
		  <expr_stmt><expr><name>t</name> &lt;&lt; "# This field is not displayed in the document itself, but it is \n"</expr>;</expr_stmt>
		  <expr_stmt><expr><name>t</name> &lt;&lt; "# available in the information block of the rtf file.  In Microsoft \n"</expr>;</expr_stmt>
		  <expr_stmt><expr><name>t</name> &lt;&lt; "# Word, it is available under File:Properties.\n"</expr>;</expr_stmt>
		  <expr_stmt><expr><name>t</name> &lt;&lt; "#Subject         = \n\n"</expr>;</expr_stmt>

		  <expr_stmt><expr><name>t</name> &lt;&lt; "# Comments regarding the document.\n"</expr>;</expr_stmt>
		  <expr_stmt><expr><name>t</name> &lt;&lt; "# This field is not displayed in the document itself, but it is \n"</expr>;</expr_stmt>
		  <expr_stmt><expr><name>t</name> &lt;&lt; "# available in the information block of the rtf file.  In Microsoft \n"</expr>;</expr_stmt>
		  <expr_stmt><expr><name>t</name> &lt;&lt; "# Word, it is available under File:Properties.\n"</expr>;</expr_stmt>
		  <expr_stmt><expr><name>t</name> &lt;&lt; "#Comments        = \n\n"</expr>;</expr_stmt>

		  <expr_stmt><expr><name>t</name> &lt;&lt; "# Keywords associated with the document.\n"</expr>;</expr_stmt>
		  <expr_stmt><expr><name>t</name> &lt;&lt; "# This field is not displayed in the document itself, but it is \n"</expr>;</expr_stmt>
		  <expr_stmt><expr><name>t</name> &lt;&lt; "# available in the information block of the rtf file.  In Microsoft \n"</expr>;</expr_stmt>
		  <expr_stmt><expr><name>t</name> &lt;&lt; "# Word, it is available under File:Properties.\n"</expr>;</expr_stmt>
		  <expr_stmt><expr><name>t</name> &lt;&lt; "#Keywords        = \n\n"</expr>;</expr_stmt>
	  }</block></function>

    <function><type><name>void</name></type> <name>enable</name><parameter_list>()</parameter_list> 
    <block>{ <if>if <condition>(<expr><name>genStack</name>-&gt;<call><name>top</name><argument_list>()</argument_list></call></expr>)</condition><then> <expr_stmt><expr><name>active</name>=*<name>genStack</name>-&gt;<call><name>top</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then> <else>else <expr_stmt><expr><name>active</name>=<name>TRUE</name></expr>;</expr_stmt></else></if> }</block></function>
    <function><type><name>void</name></type> <name>disable</name><parameter_list>()</parameter_list> <block>{ <expr_stmt><expr><name>active</name>=<name>FALSE</name></expr>;</expr_stmt> }</block></function>
    <function><type><name>void</name></type> <name>enableIf</name><parameter_list>(<param><decl><type><name>OutputType</name></type> <name>o</name></decl></param>)</parameter_list>  <block>{ <if>if <condition>(<expr><name>o</name>==<name>RTF</name></expr>)</condition><then> <expr_stmt><expr><name>active</name>=<name>TRUE</name></expr>;</expr_stmt></then></if>  }</block></function>
    <function><type><name>void</name></type> <name>disableIf</name><parameter_list>(<param><decl><type><name>OutputType</name></type> <name>o</name></decl></param>)</parameter_list> <block>{ <if>if <condition>(<expr><name>o</name>==<name>RTF</name></expr>)</condition><then> <expr_stmt><expr><name>active</name>=<name>FALSE</name></expr>;</expr_stmt></then></if> }</block></function>
    <function><type><name>void</name></type> <name>disableIfNot</name><parameter_list>(<param><decl><type><name>OutputType</name></type> <name>o</name></decl></param>)</parameter_list> <block>{ <if>if <condition>(<expr><name>o</name>!=<name>RTF</name></expr>)</condition><then> <expr_stmt><expr><name>active</name>=<name>FALSE</name></expr>;</expr_stmt></then></if> }</block></function>
    <function><type><name>bool</name></type> <name>isEnabled</name><parameter_list>(<param><decl><type><name>OutputType</name></type> <name>o</name></decl></param>)</parameter_list> <block>{ <return>return <expr>(<name>o</name>==<name>RTF</name> &amp;&amp; <name>active</name>)</expr>;</return> }</block></function> 
    <function><type><name>OutputGenerator</name> *</type><name>get</name><parameter_list>(<param><decl><type><name>OutputType</name></type> <name>o</name></decl></param>)</parameter_list> <block>{ <return>return <expr>(<name>o</name>==<name>RTF</name>) ? <name>this</name> : 0</expr>;</return> }</block></function>

	<function><type><name>void</name></type> <name>printDoc</name><parameter_list>(<param><decl><type><name>DocNode</name> *</type><name>n</name></decl></param>,<param><decl><type><name>const</name> <name>char</name> *</type><name>langExt</name></decl></param>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>RTFDocVisitor</name> *</type><name>visitor</name> =<init> <expr>new <call><name>RTFDocVisitor</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr>*<name>this</name></expr></argument>,<argument><expr><name>langExt</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>n</name>-&gt;<call><name>accept</name><argument_list>(<argument><expr><name>visitor</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr>delete <name>visitor</name></expr>;</expr_stmt> 
		<expr_stmt><expr><name>m_omitParagraph</name> = <name>TRUE</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><name>void</name></type> <name>startFile</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type><name>name</name></decl></param>,<param><decl><type><name>const</name> <name>char</name> *</type><name>manName</name></decl></param>,<param><decl><type><name>const</name> <name>char</name> *</type><name>title</name></decl></param>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>setEncoding</name><argument_list>(<argument><expr><call><name>QCString</name><argument_list>()</argument_list></call>.<call><name>sprintf</name><argument_list>(<argument><expr>"CP%s"</expr></argument>,<argument><expr><name>theTranslator</name>-&gt;<call><name>trRTFansicp</name><argument_list>()</argument_list></call>.<call><name>data</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>QCString</name></type> <name>fileName</name>=<init><expr><name>name</name></expr></init></decl>;</decl_stmt>
		<expr_stmt><expr><name>relPath</name> = <call><name>relativePathToRoot</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if>if <condition>(<expr><name>fileName</name>.<call><name>right</name><argument_list>(<argument><expr>4</expr></argument>)</argument_list></call>!=".rtf"</expr> )</condition><then> <expr_stmt><expr><name>fileName</name>+=".rtf"</expr>;</expr_stmt></then></if>
		<expr_stmt><expr><call><name>startPlainFile</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>beginRTFDocument</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
    <function><type><name>void</name></type> <name>writeFooter</name><parameter_list>()</parameter_list> <block>{}</block></function>
	<function><type><name>void</name></type> <name>endFile</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment endFile}\n"</argument>)</argument_list></macro>
			<expr_stmt><expr><name>t</name> &lt;&lt; "}"</expr>;</expr_stmt>

		<expr_stmt><expr><call><name>endPlainFile</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
    <function_decl><type><name>void</name></type> <name>clearBuffer</name><parameter_list>()</parameter_list>;</function_decl>
	<function><type><name>void</name></type> <name>postProcess</name><parameter_list>(<param><decl><type><name>QByteArray</name> &amp;</type><name>a</name></decl></param>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>QByteArray</name></type> <name>enc</name><argument_list>(<argument><expr><name>a</name>.<call><name>size</name><argument_list>()</argument_list></call>*4</expr></argument>)</argument_list></decl>;</decl_stmt> <comment type="line">// worst case</comment>
		<decl_stmt><decl><type><name>int</name></type> <name>off</name>=<init><expr>0</expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>uint</name></type> <name>i</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>mbFlag</name>=<init><expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
		<for>for (<init><expr><name>i</name>=0</expr>;</init><condition><expr><name>i</name>&lt;<name>a</name>.<call><name>size</name><argument_list>()</argument_list></call></expr>;</condition><incr><expr><name>i</name>++</expr></incr>)
		<block>{
			<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name> =<init> <expr>(<name>unsigned</name> <name>char</name>)<name>a</name>.<call><name>at</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

			<comment type="line">// treat characters &gt; 0x80 as multibyte characters, except when they</comment>
			<comment type="line">// are control characters </comment>
			<if>if <condition>(<expr><name>c</name>&gt;0x80 || (<name>mbFlag</name> &amp;&amp; <name>c</name>!='\\' &amp;&amp; <name>c</name>!='{' &amp;&amp; <name>c</name>!='}')</expr>)</condition><then>
			<block>{
				<decl_stmt><decl><type><name>char</name></type> <name><name>s</name><index>[<expr>10</expr>]</index></name></decl>;</decl_stmt>
				<expr_stmt><expr><call><name>sprintf</name><argument_list>(<argument><expr><name>s</name></expr></argument>,<argument><expr>"\\'%X"</expr></argument>,<argument><expr><name>c</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>qstrcpy</name><argument_list>(<argument><expr><name>enc</name>.<call><name>data</name><argument_list>()</argument_list></call>+<name>off</name></expr></argument>,<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>off</name>+=<call><name>qstrlen</name><argument_list>(<argument><expr><name>s</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>mbFlag</name>=<name>c</name>&gt;0x80</expr>;</expr_stmt>
			}</block></then>
			<else>else
			<block>{
				<expr_stmt><expr><name>enc</name>.<call><name>at</name><argument_list>(<argument><expr><name>off</name>++</expr></argument>)</argument_list></call>=<name>c</name></expr>;</expr_stmt>
			}</block></else></if>
		}</block></for>
		<expr_stmt><expr><name>enc</name>.<call><name>resize</name><argument_list>(<argument><expr><name>off</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>a</name> = <name>enc</name></expr>;</expr_stmt>
	}</block></function>
    
	<function><type><name>void</name></type> <name>startIndexSection</name><parameter_list>(<param><decl><type><name>IndexSections</name></type> <name>is</name></decl></param>)</parameter_list>
	<block>{
		<comment type="line">//QCString paperName;</comment>

		<expr_stmt><expr><name>m_listLevel</name> = 0</expr>;</expr_stmt>

		<switch>switch <condition>(<expr><name>is</name></expr>)</condition>
		<block>{
		<case>case <expr><name>isTitlePageStart</name></expr>:
			<comment type="line">// basic RTFstart</comment>
			<comment type="line">// get readyfor author etc</comment>

			<expr_stmt><expr><name>t</name> &lt;&lt; "{\\info \n"</expr>;</expr_stmt>
			<expr_stmt><expr><name>t</name> &lt;&lt; "{\\title {\\comment "</expr>;</expr_stmt>
			<break>break;</break>
		</case><case>case <expr><name>isTitlePageAuthor</name></expr>:
			<expr_stmt><expr><name>t</name> &lt;&lt; "}\n"</expr>;</expr_stmt>
			<if>if <condition>(<expr><name>rtf_subject</name></expr>)</condition><then>      <expr_stmt><expr><name>t</name> &lt;&lt; "{\\subject "  &lt;&lt; <name>rtf_subject</name>      &lt;&lt; "}\n"</expr>;</expr_stmt></then></if>
			<if>if <condition>(<expr><name>rtf_comments</name></expr>)</condition><then>     <expr_stmt><expr><name>t</name> &lt;&lt; "{\\comment "  &lt;&lt; <name>rtf_comments</name>     &lt;&lt; "}\n"</expr>;</expr_stmt></then></if>
			<if>if <condition>(<expr><name>rtf_company</name></expr>)</condition><then>      <expr_stmt><expr><name>t</name> &lt;&lt; "{\\company "  &lt;&lt; <name>rtf_company</name>      &lt;&lt; "}\n"</expr>;</expr_stmt></then></if>
			<if>if <condition>(<expr><name>rtf_author</name></expr>)</condition><then>       <expr_stmt><expr><name>t</name> &lt;&lt; "{\\author "   &lt;&lt; <name>rtf_author</name>       &lt;&lt; "}\n"</expr>;</expr_stmt></then></if>
			<if>if <condition>(<expr><name>rtf_manager</name></expr>)</condition><then>      <expr_stmt><expr><name>t</name> &lt;&lt; "{\\manager "  &lt;&lt; <name>rtf_manager</name>      &lt;&lt; "}\n"</expr>;</expr_stmt></then></if>
			<if>if <condition>(<expr><name>rtf_documentType</name></expr>)</condition><then> <expr_stmt><expr><name>t</name> &lt;&lt; "{\\category " &lt;&lt; <name>rtf_documentType</name> &lt;&lt; "}\n"</expr>;</expr_stmt></then></if>
			<if>if <condition>(<expr><name>rtf_keywords</name></expr>)</condition><then>     <expr_stmt><expr><name>t</name> &lt;&lt; "{\\keywords " &lt;&lt; <name>rtf_keywords</name>     &lt;&lt; "}\n"</expr>;</expr_stmt></then></if>
			<expr_stmt><expr><name>t</name> &lt;&lt; "{\\comment "</expr>;</expr_stmt>
			<break>break;</break>
		</case><case>case <expr><name>isMainPage</name></expr>:
			<comment type="line">//Introduction</comment>
			<expr_stmt><expr><call><name>beginRTFChapter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
			<comment type="line">//case isPackageIndex:</comment>
			<comment type="line">//  //Package Index</comment>
			<comment type="line">//  beginRTFChapter();</comment>
			<comment type="line">//  break;</comment>
		</case><case>case <expr><name>isModuleIndex</name></expr>:
			<comment type="line">//Module Index</comment>
			<expr_stmt><expr><call><name>beginRTFChapter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</case><case>case <expr><name>isDirIndex</name></expr>:
			<comment type="line">//Directory Index</comment>
			<expr_stmt><expr><call><name>beginRTFChapter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</case><case>case <expr><name>isNamespaceIndex</name></expr>:
			<comment type="line">//Namespace Index</comment>
			<expr_stmt><expr><call><name>beginRTFChapter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</case><case>case <expr><name>isClassHierarchyIndex</name></expr>:
			<comment type="line">//Hierarchical Index</comment>
			<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment start classhierarchy}\n"</argument>)</argument_list></macro>
				<expr_stmt><expr><call><name>beginRTFChapter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</case><case>case <expr><name>isCompoundIndex</name></expr>:
			<comment type="line">//Annotated Compound Index</comment>
			<expr_stmt><expr><call><name>beginRTFChapter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</case><case>case <expr><name>isFileIndex</name></expr>:
			<comment type="line">//Annotated File Index</comment>
			<expr_stmt><expr><call><name>beginRTFChapter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</case><case>case <expr><name>isPageIndex</name></expr>:
			<comment type="line">//Related Page Index</comment>
			<expr_stmt><expr><call><name>beginRTFChapter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<break>break;</break>
		</case><case>case <expr><name>isModuleDocumentation</name></expr>:
			<block>{
				<comment type="line">//Module Documentation</comment>
				<decl_stmt><decl><type><name><name>GroupSDict</name>::<name>Iterator</name></name></type> <name>gli</name><argument_list>(<argument><expr>*<name><name>Doxygen</name>::<name>groupSDict</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>GroupDef</name> *</type><name>gd</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>bool</name></type> <name>found</name>=<init><expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
				<for>for (<init><expr><name>gli</name>.<call><name>toFirst</name><argument_list>()</argument_list></call></expr>;</init><condition><expr>(<name>gd</name>=<name>gli</name>.<call><name>current</name><argument_list>()</argument_list></call>) &amp;&amp; !<name>found</name></expr>;</condition><incr><expr>++<name>gli</name></expr></incr>)
				<block>{
					<if>if <condition>(<expr>!<name>gd</name>-&gt;<call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then>
					<block>{
						<expr_stmt><expr><call><name>beginRTFChapter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>found</name>=<name>TRUE</name></expr>;</expr_stmt>
					}</block></then></if>
				}</block></for>
			}</block>
			<break>break;</break>
		</case><case>case <expr><name>isDirDocumentation</name></expr>:
			<block>{
				<comment type="line">//Directory Documentation</comment>
				<decl_stmt><decl><type><name><name><name>SDict</name><argument_list>&lt;<argument><name>DirDef</name></argument>&gt;</argument_list></name>::<name>Iterator</name></name></type> <name>dli</name><argument_list>(<argument><expr>*<name><name>Doxygen</name>::<name>directories</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>DirDef</name> *</type><name>dd</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>bool</name></type> <name>found</name>=<init><expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
				<for>for (<init><expr><name>dli</name>.<call><name>toFirst</name><argument_list>()</argument_list></call></expr>;</init><condition><expr>(<name>dd</name>=<name>dli</name>.<call><name>current</name><argument_list>()</argument_list></call>) &amp;&amp; !<name>found</name></expr>;</condition><incr><expr>++<name>dli</name></expr></incr>)
				<block>{
					<if>if <condition>(<expr><name>dd</name>-&gt;<call><name>isLinkableInProject</name><argument_list>()</argument_list></call></expr>)</condition><then>
					<block>{
						<expr_stmt><expr><call><name>beginRTFChapter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>found</name>=<name>TRUE</name></expr>;</expr_stmt>
					}</block></then></if>
				}</block></for>
			}</block>
			<break>break;</break>
		</case><case>case <expr><name>isNamespaceDocumentation</name></expr>:
			<block>{
				<comment type="line">// Namespace Documentation</comment>
				<decl_stmt><decl><type><name><name>NamespaceSDict</name>::<name>Iterator</name></name></type> <name>nli</name><argument_list>(<argument><expr>*<name><name>Doxygen</name>::<name>namespaceSDict</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>NamespaceDef</name> *</type><name>nd</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>bool</name></type> <name>found</name>=<init><expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
				<for>for (<init><expr><name>nli</name>.<call><name>toFirst</name><argument_list>()</argument_list></call></expr>;</init><condition><expr>(<name>nd</name>=<name>nli</name>.<call><name>current</name><argument_list>()</argument_list></call>) &amp;&amp; !<name>found</name></expr>;</condition><incr><expr>++<name>nli</name></expr></incr>)
				<block>{
					<if>if <condition>(<expr><name>nd</name>-&gt;<call><name>isLinkableInProject</name><argument_list>()</argument_list></call></expr>)</condition><then>
					<block>{
						<expr_stmt><expr><call><name>beginRTFChapter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>found</name>=<name>TRUE</name></expr>;</expr_stmt>
					}</block></then></if>
				}</block></for>
			}</block>
			<break>break;</break>
		</case><case>case <expr><name>isClassDocumentation</name></expr>:
			<block>{
				<comment type="line">//Compound Documentation</comment>
				<decl_stmt><decl><type><name><name>ClassSDict</name>::<name>Iterator</name></name></type> <name>cli</name><argument_list>(<argument><expr>*<name><name>Doxygen</name>::<name>classSDict</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>ClassDef</name> *</type><name>cd</name>=<init><expr>0</expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>bool</name></type> <name>found</name>=<init><expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
				<for>for (<init><expr><name>cli</name>.<call><name>toFirst</name><argument_list>()</argument_list></call></expr>;</init><condition><expr>(<name>cd</name>=<name>cli</name>.<call><name>current</name><argument_list>()</argument_list></call>) &amp;&amp; !<name>found</name></expr>;</condition><incr><expr>++<name>cli</name></expr></incr>)
				<block>{
					<if>if <condition>(<expr><name>cd</name>-&gt;<call><name>isLinkableInProject</name><argument_list>()</argument_list></call> &amp;&amp; <name>cd</name>-&gt;<call><name>templateMaster</name><argument_list>()</argument_list></call>==0</expr>)</condition><then>
					<block>{
						<expr_stmt><expr><call><name>beginRTFChapter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>found</name>=<name>TRUE</name></expr>;</expr_stmt>
					}</block></then></if>
				}</block></for>
			}</block>
			<break>break;</break>
		</case><case>case <expr><name>isFileDocumentation</name></expr>:
			<block>{
				<comment type="line">//File Documentation</comment>
				<decl_stmt><decl><type><name>bool</name></type> <name>isFirst</name>=<init><expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>FileName</name> *</type><name>fn</name>=<init><expr><name><name>Doxygen</name>::<name>inputNameList</name></name>-&gt;<call><name>first</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<while>while <condition>(<expr><name>fn</name></expr>)</condition>
				<block>{
					<decl_stmt><decl><type><name>FileDef</name> *</type><name>fd</name>=<init><expr><name>fn</name>-&gt;<call><name>first</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<while>while <condition>(<expr><name>fd</name></expr>)</condition>
					<block>{
						<if>if <condition>(<expr><name>fd</name>-&gt;<call><name>isLinkableInProject</name><argument_list>()</argument_list></call></expr>)</condition><then>
						<block>{
							<if>if <condition>(<expr><name>isFirst</name></expr>)</condition><then>
							<block>{
								<expr_stmt><expr><call><name>beginRTFChapter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><name>isFirst</name>=<name>FALSE</name></expr>;</expr_stmt>
								<break>break;</break>
							}</block></then></if>
						}</block></then></if>
						<expr_stmt><expr><name>fd</name>=<name>fn</name>-&gt;<call><name>next</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					}</block></while>
					<expr_stmt><expr><name>fn</name>=<name><name>Doxygen</name>::<name>inputNameList</name></name>-&gt;<call><name>next</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></while>
			}</block>
			<break>break;</break>
		</case><case>case <expr><name>isExampleDocumentation</name></expr>:
			<block>{
				<comment type="line">//Example Documentation</comment>
				<expr_stmt><expr><call><name>beginRTFChapter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block>
			<break>break;</break>
		</case><case>case <expr><name>isPageDocumentation</name></expr>:
			<block>{
				<comment type="line">//Page Documentation</comment>
				<expr_stmt><expr><call><name>beginRTFChapter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			}</block>
			<break>break;</break>
		</case><case>case <expr><name>isPageDocumentation2</name></expr>:
			<block>{
				<expr_stmt><expr><name>t</name> &lt;&lt; "{\\tc \\v "</expr>;</expr_stmt>
			}</block>
			<break>break;</break>
		</case><case>case <expr><name>isEndIndex</name></expr>:
			<break>break;</break>
		</case>}</block></switch>
	}</block></function>
	<function><type><name>void</name></type> <name>endIndexSection</name><parameter_list>(<param><decl><type><name>IndexSections</name></type> <name>is</name></decl></param>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>bool</name></type> <name>fortranOpt</name> =<init> <expr><call><name>Config_getBool</name><argument_list>(<argument><expr>"OPTIMIZE_FOR_FORTRAN"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>bool</name></type> <name>vhdlOpt</name>    =<init> <expr><call><name>Config_getBool</name><argument_list>(<argument><expr>"OPTIMIZE_OUTPUT_VHDL"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>  
		<switch>switch <condition>(<expr><name>is</name></expr>)</condition>
		<block>{
		<case>case <expr><name>isTitlePageStart</name></expr>:
			<if>if <condition>(<expr><name>rtf_title</name></expr>)</condition><then>
				<comment type="line">// User has overridden document title in extensions file</comment>
				<expr_stmt><expr><name>t</name> &lt;&lt; "}" &lt;&lt; <name>rtf_title</name></expr>;</expr_stmt></then>
			<else>else
				<expr_stmt><expr><name>t</name> &lt;&lt; "}" &lt;&lt; <call><name>Config_getString</name><argument_list>(<argument><expr>"PROJECT_NAME"</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
			<break>break;</break>
		</case><case>case <expr><name>isTitlePageAuthor</name></expr>:
			<block>{
				<expr_stmt><expr><name>t</name> &lt;&lt; "Doxgyen. }\n"</expr>;</expr_stmt>
				<expr_stmt><expr><name>t</name> &lt;&lt; "{\\creatim " &lt;&lt; <call><name>dateToRTFDateString</name><argument_list>()</argument_list></call> &lt;&lt; "}\n}"</expr>;</expr_stmt>
				<expr_stmt><expr><call><name>DBG_RTF</name><argument_list>(<argument><expr><name>t</name> &lt;&lt; "{\\comment end of infoblock}\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<comment type="line">// setup for this section</comment>
				<expr_stmt><expr><name>t</name> &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt;"\n"</expr>;</expr_stmt>
				<expr_stmt><expr><name>t</name> &lt;&lt;"\\sectd\\pgnlcrm\n"</expr>;</expr_stmt>
				<expr_stmt><expr><name>t</name> &lt;&lt;"{\\footer "&lt;&lt;<name><name>rtf_Style</name><index>[<expr>"Footer"</expr>]</index></name>-&gt;<name>reference</name> &lt;&lt; "{\\chpgn}}\n"</expr>;</expr_stmt>
				<comment type="line">// the title entry</comment>
				<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment begin title page}\n"</argument>)</argument_list></macro>


					<expr_stmt><expr><name>t</name> &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <name><name>rtf_Style</name><index>[<expr>"SubTitle"</expr>]</index></name>-&gt;<name>reference</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt> <comment type="line">// set to title style</comment>

				<expr_stmt><expr><name>t</name> &lt;&lt; "\\vertalc\\qc\\par\\par\\par\\par\\par\\par\\par\n"</expr>;</expr_stmt>
				<if>if <condition>(<expr><name>rtf_logoFilename</name></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name>t</name> &lt;&lt; "{\\field\\flddirty {\\*\\fldinst INCLUDEPICTURE \"" &lt;&lt; <name>rtf_logoFilename</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>t</name> &lt;&lt; "\" \\\\d \\\\*MERGEFORMAT} {\\fldrslt IMAGE }}\\par\\par\n"</expr>;</expr_stmt>
				}</block></then></if>
				<if>if <condition>(<expr><name>rtf_company</name></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name>t</name> &lt;&lt; <name>rtf_company</name> &lt;&lt; "\\par\\par\n"</expr>;</expr_stmt>
				}</block></then></if>

				<expr_stmt><expr><name>t</name> &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <name><name>rtf_Style</name><index>[<expr>"Title"</expr>]</index></name>-&gt;<name>reference</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt> <comment type="line">// set to title style</comment>
				<expr_stmt><expr><name>t</name> &lt;&lt; "{\\field\\fldedit {\\*\\fldinst TITLE \\\\*MERGEFORMAT}{\\fldrslt TITLE}}\\par" &lt;&lt; <name>endl</name></expr>;</expr_stmt>

				<expr_stmt><expr><name>t</name> &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <name><name>rtf_Style</name><index>[<expr>"SubTitle"</expr>]</index></name>-&gt;<name>reference</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt> <comment type="line">// set to title style</comment>
				<expr_stmt><expr><name>t</name> &lt;&lt; "\\par\n"</expr>;</expr_stmt>
				<if>if <condition>(<expr><name>rtf_documentType</name></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name>t</name> &lt;&lt; <name>rtf_documentType</name> &lt;&lt; "\\par\n"</expr>;</expr_stmt>
				}</block></then></if>
				<if>if <condition>(<expr><name>rtf_documentId</name></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name>t</name> &lt;&lt; <name>rtf_documentId</name> &lt;&lt; "\\par\n"</expr>;</expr_stmt>
				}</block></then></if>
				<expr_stmt><expr><name>t</name> &lt;&lt; "\\par\\par\\par\\par\\par\\par\\par\\par\\par\\par\\par\\par\n"</expr>;</expr_stmt>

				<expr_stmt><expr><name>t</name> &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <name><name>rtf_Style</name><index>[<expr>"SubTitle"</expr>]</index></name>-&gt;<name>reference</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt> <comment type="line">// set to subtitle style</comment>
				<expr_stmt><expr><name>t</name> &lt;&lt; "{\\field\\fldedit {\\*\\fldinst AUTHOR \\\\*MERGEFORMAT}{\\fldrslt AUTHOR}}\\par" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>t</name> &lt;&lt; "Version " &lt;&lt; <call><name>Config_getString</name><argument_list>(<argument><expr>"PROJECT_NUMBER"</expr></argument>)</argument_list></call> &lt;&lt; "\\par"</expr>;</expr_stmt>
				<expr_stmt><expr><name>t</name> &lt;&lt; "{\\field\\fldedit {\\*\\fldinst CREATEDATE \\\\*MERGEFORMAT}"
					"{\\fldrslt CREATEDATE}}\\par"&lt;&lt;<name>endl</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>t</name> &lt;&lt; "\\page\\page"</expr>;</expr_stmt>
				<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment End title page}" &lt;&lt; endl</argument>)</argument_list></macro>

					<comment type="line">// table of contents section</comment>
					<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment Table of contents}\n"</argument>)</argument_list></macro>
					<expr_stmt><expr><name>t</name> &lt;&lt; "\\vertalt\n"</expr>;</expr_stmt>
				<expr_stmt><expr><name>t</name> &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>t</name> &lt;&lt; <name><name>rtf_Style</name><index>[<expr>"Heading1"</expr>]</index></name>-&gt;<name>reference</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>t</name> &lt;&lt; <name>theTranslator</name>-&gt;<call><name>trRTFTableOfContents</name><argument_list>()</argument_list></call> &lt;&lt; "\\par"&lt;&lt; <name>endl</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>t</name> &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; "\\par" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>t</name> &lt;&lt; "{\\field\\fldedit {\\*\\fldinst TOC \\\\f \\\\*MERGEFORMAT}{\\fldrslt Table of contents}}\\par\n"</expr>;</expr_stmt>
				<expr_stmt><expr><name>t</name> &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
			}</block>
			<break>break;</break>
		</case><case>case <expr><name>isMainPage</name></expr>:
			<expr_stmt><expr><name>t</name> &lt;&lt; "\\par " &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
			<if>if <condition>(<expr>!<name><name>Doxygen</name>::<name>mainPage</name></name> || <name><name>Doxygen</name>::<name>mainPage</name></name>-&gt;<call><name>title</name><argument_list>()</argument_list></call>.<call><name>isEmpty</name><argument_list>()</argument_list></call></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>t</name> &lt;&lt; "{\\tc \\v " &lt;&lt; <name>theTranslator</name>-&gt;<call><name>trMainPage</name><argument_list>()</argument_list></call> &lt;&lt; "}"&lt;&lt; <name>endl</name></expr>;</expr_stmt>
			}</block></then>
			<else>else
			<block>{
				<expr_stmt><expr><name>t</name> &lt;&lt; "{\\tc \\v " &lt;&lt; <call><name>substitute</name><argument_list>(<argument><expr><name><name>Doxygen</name>::<name>mainPage</name></name>-&gt;<call><name>title</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr>"%"</expr></argument>,<argument><expr>""</expr></argument>)</argument_list></call> &lt;&lt; "}"&lt;&lt; <name>endl</name></expr>;</expr_stmt>
			}</block></else></if>
			<expr_stmt><expr><name>t</name> &lt;&lt; "{\\field\\fldedit{\\*\\fldinst INCLUDETEXT \""</expr>;</expr_stmt>
			<if>if <condition>(<expr><call><name>Config_getBool</name><argument_list>(<argument><expr>"GENERATE_TREEVIEW"</expr></argument>)</argument_list></call></expr>)</condition><then> <expr_stmt><expr><name>t</name> &lt;&lt; "main"</expr>;</expr_stmt></then> <else>else <expr_stmt><expr><name>t</name> &lt;&lt; "index"</expr>;</expr_stmt></else></if>
			<expr_stmt><expr><name>t</name> &lt;&lt; ".rtf\" \\\\*MERGEFORMAT}{\\fldrslt includedstuff}}\n"</expr>;</expr_stmt>
			<break>break;</break>
			<comment type="line">//case isPackageIndex:</comment>
			<comment type="line">//  t &lt;&lt; "\\par " &lt;&lt; rtf_Style_Reset &lt;&lt; endl;</comment>
			<comment type="line">//  t &lt;&lt; "{\\tc \\v " &lt;&lt; theTranslator-&gt;trPackageList() &lt;&lt; "}"&lt;&lt; endl;</comment>
			<comment type="line">//  t &lt;&lt; "{\\field\\fldedit{\\*\\fldinst INCLUDETEXT \"packages.rtf\" \\\\*MERGEFORMAT}{\\fldrslt includedstuff}}\n";</comment>
			<comment type="line">//  break;</comment>
		</case><case>case <expr><name>isModuleIndex</name></expr>:
			<expr_stmt><expr><name>t</name> &lt;&lt; "\\par " &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>t</name> &lt;&lt; "{\\tc \\v " &lt;&lt; <name>theTranslator</name>-&gt;<call><name>trModuleIndex</name><argument_list>()</argument_list></call> &lt;&lt; "}"&lt;&lt; <name>endl</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>t</name> &lt;&lt; "{\\field\\fldedit{\\*\\fldinst INCLUDETEXT \"modules.rtf\" \\\\*MERGEFORMAT}{\\fldrslt includedstuff}}\n"</expr>;</expr_stmt>
			<break>break;</break>
		</case><case>case <expr><name>isDirIndex</name></expr>:
			<expr_stmt><expr><name>t</name> &lt;&lt; "\\par " &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>t</name> &lt;&lt; "{\\tc \\v " &lt;&lt; <name>theTranslator</name>-&gt;<call><name>trDirIndex</name><argument_list>()</argument_list></call> &lt;&lt; "}"&lt;&lt; <name>endl</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>t</name> &lt;&lt; "{\\field\\fldedit{\\*\\fldinst INCLUDETEXT \"dirs.rtf\" \\\\*MERGEFORMAT}{\\fldrslt includedstuff}}\n"</expr>;</expr_stmt>
			<break>break;</break>
		</case><case>case <expr><name>isNamespaceIndex</name></expr>:
			<expr_stmt><expr><name>t</name> &lt;&lt; "\\par " &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>fortranOpt</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>t</name> &lt;&lt; "{\\tc \\v " &lt;&lt; <name>theTranslator</name>-&gt;<call><name>trModulesIndex</name><argument_list>()</argument_list></call> &lt;&lt; "}"&lt;&lt; <name>endl</name></expr>;</expr_stmt>
			}</block></then>
			<else>else
			<block>{
				<expr_stmt><expr><name>t</name> &lt;&lt; "{\\tc \\v " &lt;&lt; <name>theTranslator</name>-&gt;<call><name>trNamespaceIndex</name><argument_list>()</argument_list></call> &lt;&lt; "}"&lt;&lt; <name>endl</name></expr>;</expr_stmt>
			}</block></else></if>

			<expr_stmt><expr><name>t</name> &lt;&lt; "{\\field\\fldedit{\\*\\fldinst INCLUDETEXT \"namespaces.rtf\" \\\\*MERGEFORMAT}{\\fldrslt includedstuff}}\n"</expr>;</expr_stmt>
			<break>break;</break>
		</case><case>case <expr><name>isClassHierarchyIndex</name></expr>:
			<expr_stmt><expr><name>t</name> &lt;&lt; "\\par " &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>t</name> &lt;&lt; "{\\tc \\v " &lt;&lt; <name>theTranslator</name>-&gt;<call><name>trHierarchicalIndex</name><argument_list>()</argument_list></call> &lt;&lt; "}"&lt;&lt; <name>endl</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>t</name> &lt;&lt; "{\\field\\fldedit{\\*\\fldinst INCLUDETEXT \"hierarchy.rtf\" \\\\*MERGEFORMAT}{\\fldrslt includedstuff}}\n"</expr>;</expr_stmt>
			<break>break;</break>
		</case><case>case <expr><name>isCompoundIndex</name></expr>:
			<expr_stmt><expr><name>t</name> &lt;&lt; "\\par " &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>fortranOpt</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>t</name> &lt;&lt; "{\\tc \\v " &lt;&lt; <name>theTranslator</name>-&gt;<call><name>trCompoundIndexFortran</name><argument_list>()</argument_list></call> &lt;&lt; "}"&lt;&lt; <name>endl</name></expr>;</expr_stmt>
			}</block></then>
			<else>else <if>if <condition>(<expr><name>vhdlOpt</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>t</name> &lt;&lt; "{\\tc \\v " &lt;&lt; <call><name><name>VhdlDocGen</name>::<name>trDesignUnitIndex</name></name><argument_list>()</argument_list></call> &lt;&lt; "}"&lt;&lt; <name>endl</name></expr>;</expr_stmt>
			}</block></then>
			<else>else
			<block>{
				<expr_stmt><expr><name>t</name> &lt;&lt; "{\\tc \\v " &lt;&lt; <name>theTranslator</name>-&gt;<call><name>trCompoundIndex</name><argument_list>()</argument_list></call> &lt;&lt; "}"&lt;&lt; <name>endl</name></expr>;</expr_stmt>
			}</block></else></if></else></if>
			<expr_stmt><expr><name>t</name> &lt;&lt; "{\\field\\fldedit{\\*\\fldinst INCLUDETEXT \"annotated.rtf\" \\\\*MERGEFORMAT}{\\fldrslt includedstuff}}\n"</expr>;</expr_stmt>
			<break>break;</break>
		</case><case>case <expr><name>isFileIndex</name></expr>:
			<expr_stmt><expr><name>t</name> &lt;&lt; "\\par " &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>t</name> &lt;&lt; "{\\tc \\v " &lt;&lt; <name>theTranslator</name>-&gt;<call><name>trFileIndex</name><argument_list>()</argument_list></call> &lt;&lt; "}"&lt;&lt; <name>endl</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>t</name> &lt;&lt; "{\\field\\fldedit{\\*\\fldinst INCLUDETEXT \"files.rtf\" \\\\*MERGEFORMAT}{\\fldrslt includedstuff}}\n"</expr>;</expr_stmt>
			<break>break;</break>
		</case><case>case <expr><name>isPageIndex</name></expr>:
			<expr_stmt><expr><name>t</name> &lt;&lt; "\\par " &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>t</name> &lt;&lt; "{\\tc \\v " &lt;&lt; <name>theTranslator</name>-&gt;<call><name>trPageIndex</name><argument_list>()</argument_list></call> &lt;&lt; "}"&lt;&lt; <name>endl</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>t</name> &lt;&lt; "{\\field\\fldedit{\\*\\fldinst INCLUDETEXT \"pages.rtf\" \\\\*MERGEFORMAT}{\\fldrslt includedstuff}}\n"</expr>;</expr_stmt>
			<break>break;</break>
		</case><case>case <expr><name>isModuleDocumentation</name></expr>:
			<block>{
				<decl_stmt><decl><type><name><name>GroupSDict</name>::<name>Iterator</name></name></type> <name>gli</name><argument_list>(<argument><expr>*<name><name>Doxygen</name>::<name>groupSDict</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>GroupDef</name> *</type><name>gd</name></decl>;</decl_stmt>
				<expr_stmt><expr><name>t</name> &lt;&lt; "{\\tc \\v " &lt;&lt; <name>theTranslator</name>-&gt;<call><name>trModuleDocumentation</name><argument_list>()</argument_list></call> &lt;&lt; "}"&lt;&lt; <name>endl</name></expr>;</expr_stmt>
				<for>for (<init><expr><name>gli</name>.<call><name>toFirst</name><argument_list>()</argument_list></call></expr>;</init><condition><expr>(<name>gd</name>=<name>gli</name>.<call><name>current</name><argument_list>()</argument_list></call>)</expr>;</condition><incr><expr>++<name>gli</name></expr></incr>)
				<block>{
					<if>if <condition>(<expr>!<name>gd</name>-&gt;<call><name>isReference</name><argument_list>()</argument_list></call></expr>)</condition><then>
					<block>{
						<expr_stmt><expr><name>t</name> &lt;&lt; "\\par " &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>t</name> &lt;&lt; "{\\field\\fldedit{\\*\\fldinst INCLUDETEXT \""</expr>;</expr_stmt>
						<expr_stmt><expr><name>t</name> &lt;&lt; <name>gd</name>-&gt;<call><name>getOutputFileBase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>t</name> &lt;&lt; ".rtf\" \\\\*MERGEFORMAT}{\\fldrslt includedstuff}}\n"</expr>;</expr_stmt>
					}</block></then></if>
				}</block></for>
			}</block>
			<break>break;</break>
		</case><case>case <expr><name>isDirDocumentation</name></expr>:
			<block>{
				<decl_stmt><decl><type><name><name><name>SDict</name><argument_list>&lt;<argument><name>DirDef</name></argument>&gt;</argument_list></name>::<name>Iterator</name></name></type> <name>dli</name><argument_list>(<argument><expr>*<name><name>Doxygen</name>::<name>directories</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>DirDef</name> *</type><name>dd</name></decl>;</decl_stmt>
				<expr_stmt><expr><name>t</name> &lt;&lt; "{\\tc \\v " &lt;&lt; <name>theTranslator</name>-&gt;<call><name>trDirDocumentation</name><argument_list>()</argument_list></call> &lt;&lt; "}"&lt;&lt; <name>endl</name></expr>;</expr_stmt>
				<for>for (<init><expr><name>dli</name>.<call><name>toFirst</name><argument_list>()</argument_list></call></expr>;</init><condition><expr>(<name>dd</name>=<name>dli</name>.<call><name>current</name><argument_list>()</argument_list></call>)</expr>;</condition><incr><expr>++<name>dli</name></expr></incr>)
				<block>{
					<if>if <condition>(<expr><name>dd</name>-&gt;<call><name>isLinkableInProject</name><argument_list>()</argument_list></call></expr>)</condition><then>
					<block>{
						<expr_stmt><expr><name>t</name> &lt;&lt; "\\par " &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>t</name> &lt;&lt; "{\\field\\fldedit{\\*\\fldinst INCLUDETEXT \""</expr>;</expr_stmt>
						<expr_stmt><expr><name>t</name> &lt;&lt; <name>dd</name>-&gt;<call><name>getOutputFileBase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>t</name> &lt;&lt; ".rtf\" \\\\*MERGEFORMAT}{\\fldrslt includedstuff}}\n"</expr>;</expr_stmt>
					}</block></then></if>
				}</block></for>
			}</block>
			<break>break;</break>
		</case><case>case <expr><name>isNamespaceDocumentation</name></expr>:
			<block>{
				<decl_stmt><decl><type><name><name>NamespaceSDict</name>::<name>Iterator</name></name></type> <name>nli</name><argument_list>(<argument><expr>*<name><name>Doxygen</name>::<name>namespaceSDict</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>NamespaceDef</name> *</type><name>nd</name></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>bool</name></type> <name>found</name>=<init><expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
				<for>for (<init><expr><name>nli</name>.<call><name>toFirst</name><argument_list>()</argument_list></call></expr>;</init><condition><expr>(<name>nd</name>=<name>nli</name>.<call><name>current</name><argument_list>()</argument_list></call>) &amp;&amp; !<name>found</name></expr>;</condition><incr><expr>++<name>nli</name></expr></incr>)
				<block>{
					<if>if <condition>(<expr><name>nd</name>-&gt;<call><name>isLinkableInProject</name><argument_list>()</argument_list></call></expr>)</condition><then>
					<block>{
						<expr_stmt><expr><name>t</name> &lt;&lt; "\\par " &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>t</name> &lt;&lt; "{\\field\\fldedit{\\*\\fldinst INCLUDETEXT \""</expr>;</expr_stmt>
						<expr_stmt><expr><name>t</name> &lt;&lt; <name>nd</name>-&gt;<call><name>getOutputFileBase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>t</name> &lt;&lt; ".rtf\" \\\\*MERGEFORMAT}{\\fldrslt includedstuff}}\n"</expr>;</expr_stmt>
						<expr_stmt><expr><name>found</name>=<name>TRUE</name></expr>;</expr_stmt>
					}</block></then></if>
				}</block></for>
				<while>while <condition>(<expr>(<name>nd</name>=<name>nli</name>.<call><name>current</name><argument_list>()</argument_list></call>)</expr>)</condition>
				<block>{
					<if>if <condition>(<expr><name>nd</name>-&gt;<call><name>isLinkableInProject</name><argument_list>()</argument_list></call></expr>)</condition><then>
					<block>{
						<expr_stmt><expr><name>t</name> &lt;&lt; "\\par " &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>beginRTFSection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>t</name> &lt;&lt; "{\\field\\fldedit{\\*\\fldinst INCLUDETEXT \""</expr>;</expr_stmt>
						<expr_stmt><expr><name>t</name> &lt;&lt; <name>nd</name>-&gt;<call><name>getOutputFileBase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>t</name> &lt;&lt; ".rtf\" \\\\*MERGEFORMAT}{\\fldrslt includedstuff}}\n"</expr>;</expr_stmt>
					}</block></then></if>
					<expr_stmt><expr>++<name>nli</name></expr>;</expr_stmt>
				}</block></while>
			}</block>
			<break>break;</break>
		</case><case>case <expr><name>isClassDocumentation</name></expr>:
			<block>{
				<decl_stmt><decl><type><name><name>ClassSDict</name>::<name>Iterator</name></name></type> <name>cli</name><argument_list>(<argument><expr>*<name><name>Doxygen</name>::<name>classSDict</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>ClassDef</name> *</type><name>cd</name>=<init><expr>0</expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>bool</name></type> <name>found</name>=<init><expr><name>FALSE</name></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name>fortranOpt</name></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name>t</name> &lt;&lt; "{\\tc \\v " &lt;&lt; <name>theTranslator</name>-&gt;<call><name>trTypeDocumentation</name><argument_list>()</argument_list></call> &lt;&lt; "}"&lt;&lt; <name>endl</name></expr>;</expr_stmt>
				}</block></then>
				<else>else
				<block>{
					<expr_stmt><expr><name>t</name> &lt;&lt; "{\\tc \\v " &lt;&lt; <name>theTranslator</name>-&gt;<call><name>trClassDocumentation</name><argument_list>()</argument_list></call> &lt;&lt; "}"&lt;&lt; <name>endl</name></expr>;</expr_stmt>
				}</block></else></if>
				<for>for (<init><expr><name>cli</name>.<call><name>toFirst</name><argument_list>()</argument_list></call></expr>;</init><condition><expr>(<name>cd</name>=<name>cli</name>.<call><name>current</name><argument_list>()</argument_list></call>) &amp;&amp; !<name>found</name></expr>;</condition><incr><expr>++<name>cli</name></expr></incr>)
				<block>{
					<if>if <condition>(<expr><name>cd</name>-&gt;<call><name>isLinkableInProject</name><argument_list>()</argument_list></call> &amp;&amp; <name>cd</name>-&gt;<call><name>templateMaster</name><argument_list>()</argument_list></call>==0</expr>)</condition><then>
					<block>{
						<expr_stmt><expr><name>t</name> &lt;&lt; "\\par " &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
						<expr_stmt><expr><name>t</name> &lt;&lt; "{\\field\\fldedit{\\*\\fldinst INCLUDETEXT \""</expr>;</expr_stmt>
						<expr_stmt><expr><name>t</name> &lt;&lt; <name>cd</name>-&gt;<call><name>getOutputFileBase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>t</name> &lt;&lt; ".rtf\" \\\\*MERGEFORMAT}{\\fldrslt includedstuff}}\n"</expr>;</expr_stmt>
						<expr_stmt><expr><name>found</name>=<name>TRUE</name></expr>;</expr_stmt>
					}</block></then></if>
				}</block></for>
				<for>for (<init>;</init><condition><expr>(<name>cd</name>=<name>cli</name>.<call><name>current</name><argument_list>()</argument_list></call>)</expr>;</condition><incr><expr>++<name>cli</name></expr></incr>)
				<block>{
					<if>if <condition>(<expr><name>cd</name>-&gt;<call><name>isLinkableInProject</name><argument_list>()</argument_list></call> &amp;&amp; <name>cd</name>-&gt;<call><name>templateMaster</name><argument_list>()</argument_list></call>==0</expr>)</condition><then>
					<block>{
						<expr_stmt><expr><name>t</name> &lt;&lt; "\\par " &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
						<expr_stmt><expr><call><name>beginRTFSection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>t</name> &lt;&lt; "{\\field\\fldedit{\\*\\fldinst INCLUDETEXT \""</expr>;</expr_stmt>
						<expr_stmt><expr><name>t</name> &lt;&lt; <name>cd</name>-&gt;<call><name>getOutputFileBase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
						<expr_stmt><expr><name>t</name> &lt;&lt; ".rtf\" \\\\*MERGEFORMAT}{\\fldrslt includedstuff}}\n"</expr>;</expr_stmt>
					}</block></then></if>
				}</block></for>
			}</block>
			<break>break;</break>
		</case><case>case <expr><name>isFileDocumentation</name></expr>:
			<block>{
				<decl_stmt><decl><type><name>bool</name></type> <name>isFirst</name>=<init><expr><name>TRUE</name></expr></init></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>FileName</name> *</type><name>fn</name>=<init><expr><name><name>Doxygen</name>::<name>inputNameList</name></name>-&gt;<call><name>first</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

				<expr_stmt><expr><name>t</name> &lt;&lt; "{\\tc \\v " &lt;&lt; <name>theTranslator</name>-&gt;<call><name>trFileDocumentation</name><argument_list>()</argument_list></call> &lt;&lt; "}"&lt;&lt; <name>endl</name></expr>;</expr_stmt>
				<while>while <condition>(<expr><name>fn</name></expr>)</condition>
				<block>{
					<decl_stmt><decl><type><name>FileDef</name> *</type><name>fd</name>=<init><expr><name>fn</name>-&gt;<call><name>first</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
					<while>while <condition>(<expr><name>fd</name></expr>)</condition>
					<block>{
						<if>if <condition>(<expr><name>fd</name>-&gt;<call><name>isLinkableInProject</name><argument_list>()</argument_list></call></expr>)</condition><then>
						<block>{
							<if>if <condition>(<expr><name>isFirst</name></expr>)</condition><then>
							<block>{
								<expr_stmt><expr><name>t</name> &lt;&lt; "\\par " &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
								<expr_stmt><expr><name>t</name> &lt;&lt; "{\\field\\fldedit{\\*\\fldinst INCLUDETEXT \""</expr>;</expr_stmt>
								<expr_stmt><expr><name>t</name> &lt;&lt; <name>fd</name>-&gt;<call><name>getOutputFileBase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><name>t</name> &lt;&lt; ".rtf\" \\\\*MERGEFORMAT}{\\fldrslt includedstuff}}\n"</expr>;</expr_stmt>
								<expr_stmt><expr><name>isFirst</name>=<name>FALSE</name></expr>;</expr_stmt>
							}</block></then>
							<else>else
							<block>{
								<expr_stmt><expr><name>t</name> &lt;&lt; "\\par " &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
								<expr_stmt><expr><call><name>beginRTFSection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><name>t</name> &lt;&lt; "{\\field\\fldedit{\\*\\fldinst INCLUDETEXT \""</expr>;</expr_stmt>
								<expr_stmt><expr><name>t</name> &lt;&lt; <name>fd</name>-&gt;<call><name>getOutputFileBase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
								<expr_stmt><expr><name>t</name> &lt;&lt; ".rtf\" \\\\*MERGEFORMAT}{\\fldrslt includedstuff}}\n"</expr>;</expr_stmt>
							}</block></else></if>
						}</block></then></if>
						<expr_stmt><expr><name>fd</name>=<name>fn</name>-&gt;<call><name>next</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					}</block></while>
					<expr_stmt><expr><name>fn</name>=<name><name>Doxygen</name>::<name>inputNameList</name></name>-&gt;<call><name>next</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				}</block></while>
			}</block>
			<break>break;</break>
		</case><case>case <expr><name>isExampleDocumentation</name></expr>:
			<block>{
				<comment type="line">//t &lt;&lt; "}\n";</comment>
				<expr_stmt><expr><name>t</name> &lt;&lt; "{\\tc \\v " &lt;&lt; <name>theTranslator</name>-&gt;<call><name>trExampleDocumentation</name><argument_list>()</argument_list></call> &lt;&lt; "}"&lt;&lt; <name>endl</name></expr>;</expr_stmt>
				<decl_stmt><decl><type><name><name>PageSDict</name>::<name>Iterator</name></name></type> <name>pdi</name><argument_list>(<argument><expr>*<name><name>Doxygen</name>::<name>exampleSDict</name></name></expr></argument>)</argument_list></decl>;</decl_stmt>
				<decl_stmt><decl><type><name>PageDef</name> *</type><name>pd</name>=<init><expr><name>pdi</name>.<call><name>toFirst</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
				<if>if <condition>(<expr><name>pd</name></expr>)</condition><then>
				<block>{
					<expr_stmt><expr><name>t</name> &lt;&lt; "\\par " &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>t</name> &lt;&lt; "{\\field\\fldedit{\\*\\fldinst INCLUDETEXT \""</expr>;</expr_stmt>
					<expr_stmt><expr><name>t</name> &lt;&lt; <name>pd</name>-&gt;<call><name>getOutputFileBase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>t</name> &lt;&lt; ".rtf\" \\\\*MERGEFORMAT}{\\fldrslt includedstuff}}\n"</expr>;</expr_stmt>
				}</block></then></if>
				<for>for (<init><expr>++<name>pdi</name></expr>;</init><condition><expr>(<name>pd</name>=<name>pdi</name>.<call><name>current</name><argument_list>()</argument_list></call>)</expr>;</condition><incr><expr>++<name>pdi</name></expr></incr>)
				<block>{
					<expr_stmt><expr><name>t</name> &lt;&lt; "\\par " &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
					<expr_stmt><expr><call><name>beginRTFSection</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>t</name> &lt;&lt; "{\\field\\fldedit{\\*\\fldinst INCLUDETEXT \""</expr>;</expr_stmt>
					<expr_stmt><expr><name>t</name> &lt;&lt; <name>pd</name>-&gt;<call><name>getOutputFileBase</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>t</name> &lt;&lt; ".rtf\" \\\\*MERGEFORMAT}{\\fldrslt includedstuff}}\n"</expr>;</expr_stmt>
				}</block></for>
			}</block>
			<break>break;</break>
		</case><case>case <expr><name>isPageDocumentation</name></expr>:
			<block>{
				<comment type="line">//#error "fix me in the same way as the latex index..."</comment>
				<comment type="line">//t &lt;&lt; "{\\tc \\v " &lt;&lt; theTranslator-&gt;trPageDocumentation() &lt;&lt; "}"&lt;&lt; endl;</comment>
				<comment type="line">//t &lt;&lt; "}"&lt;&lt; endl;</comment>
				<comment type="line">//PageSDict::Iterator pdi(*Doxygen::pageSDict);</comment>
				<comment type="line">//PageDef *pd=pdi.toFirst();</comment>
				<comment type="line">//bool first=TRUE;</comment>
				<comment type="line">//for (pdi.toFirst();(pd=pdi.current());++pdi)</comment>
				<comment type="line">//</comment>{
				<comment type="line">//  if (!pd-&gt;getGroupDef() &amp;&amp; !pd-&gt;isReference())</comment>
				<comment type="line">//  {</comment>
				<comment type="line">//    if (first) t &lt;&lt; "\\par " &lt;&lt; rtf_Style_Reset &lt;&lt; endl;</comment>
				<comment type="line">//    t &lt;&lt; "{\\field\\fldedit{\\*\\fldinst INCLUDETEXT \"";</comment>
				<comment type="line">//    t &lt;&lt; pd-&gt;getOutputFileBase();</comment>
				<comment type="line">//    t &lt;&lt; ".rtf\" \\\\*MERGEFORMAT}{\\fldrslt includedstuff}}\n";</comment>
				<comment type="line">//    first=FALSE;</comment>
				<comment type="line">//  }</comment>
				<comment type="line">//</comment>}
			}</block>
			<break>break;</break>
		</case><case>case <expr><name>isPageDocumentation2</name></expr>:
			<block>{
				<expr_stmt><expr><name>t</name> &lt;&lt; "}"</expr>;</expr_stmt>
				<expr_stmt><expr><name>t</name> &lt;&lt; "\\par " &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
			}</block>
			<break>break;</break>
		</case><case>case <expr><name>isEndIndex</name></expr>:
			<expr_stmt><expr><call><name>beginRTFChapter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>t</name> &lt;&lt; <name><name>rtf_Style</name><index>[<expr>"Heading1"</expr>]</index></name>-&gt;<name>reference</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>t</name> &lt;&lt; <name>theTranslator</name>-&gt;<call><name>trRTFGeneralIndex</name><argument_list>()</argument_list></call> &lt;&lt; "\\par "&lt;&lt; <name>endl</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>t</name> &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>t</name> &lt;&lt; "{\\tc \\v " &lt;&lt; <name>theTranslator</name>-&gt;<call><name>trRTFGeneralIndex</name><argument_list>()</argument_list></call> &lt;&lt; "}" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>t</name> &lt;&lt; "{\\field\\fldedit {\\*\\fldinst INDEX \\\\c2 \\\\*MERGEFORMAT}{\\fldrslt INDEX}}\n"</expr>;</expr_stmt>

			<break>break;</break>
		</case>}</block></switch>
	}</block></function>

	<function><type><name>void</name></type> <name>writePageLink</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type><name>name</name></decl></param>,<param><decl><type><name>bool</name></type> <name>first</name></decl></param>)</parameter_list>
	<block>{
		<if>if <condition>(<expr><name>first</name></expr>)</condition><then> <expr_stmt><expr><name>t</name> &lt;&lt; "\\par " &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt></then></if>
		<expr_stmt><expr><name>t</name> &lt;&lt; "{\\field\\fldedit{\\*\\fldinst INCLUDETEXT \""</expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; <name>name</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; ".rtf\" \\\\*MERGEFORMAT}{\\fldrslt includedstuff}}\n"</expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>startProjectNumber</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt;"{\\comment startProjectNumber }" &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><name>t</name> &lt;&lt; " "</expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>endProjectNumber</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt;"{\\comment endProjectNumber }" &lt;&lt; endl</argument>)</argument_list></macro>
	}</block></function>
    <function><type><name>void</name></type> <name>writeStyleInfo</name><parameter_list>(<param><decl><type><name>int</name></type> <name>part</name></decl></param>)</parameter_list> <block>{ }</block></function>
	<function><type><name>void</name></type> <name>startTitleHead</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type></decl></param>)</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt;"{\\comment startTitleHead}" &lt;&lt; endl</argument>)</argument_list></macro>

			<comment type="line">//    beginRTFSection();</comment>
			<expr_stmt><expr><name>t</name> &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <name><name>rtf_Style</name><index>[<expr>"Heading2"</expr>]</index></name>-&gt;<name>reference</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>startTitle</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt;"{\\comment startTitle}" &lt;&lt; endl</argument>)</argument_list></macro>
			<if>if <condition>(<expr><call><name>Config_getBool</name><argument_list>(<argument><expr>"COMPACT_RTF"</expr></argument>)</argument_list></call></expr>)</condition><then>
				<expr_stmt><expr><call><name>beginRTFSection</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then>
			<else>else
				<expr_stmt><expr><call><name>beginRTFChapter</name><argument_list>()</argument_list></call></expr>;</expr_stmt></else></if>
	}</block></function>
	<function><type><name>void</name></type> <name>endTitleHead</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type><name>fileName</name></decl></param>,<param><decl><type><name>const</name> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt;"{\\comment endTitleHead}" &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><name>t</name> &lt;&lt; "\\par " &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>name</name></expr>)</condition><then>
		<block>{
			<comment type="line">// make table of contents entry</comment>
			<expr_stmt><expr><name>t</name> &lt;&lt; "{\\tc\\tcl2 \\v "</expr>;</expr_stmt>
			<expr_stmt><expr><call><name>docify</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>t</name> &lt;&lt; "}" &lt;&lt; <name>endl</name></expr>;</expr_stmt>

			<comment type="line">// make an index entry</comment>
			<expr_stmt><expr><call><name>addIndexItem</name><argument_list>(<argument><expr><name>name</name></expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="line">//if (name)</comment>
			<comment type="line">//</comment>{
			<comment type="line">//  writeAnchor(0,name);</comment>
			<comment type="line">//</comment>}
			<comment type="line">//</comment>
			<comment type="line">//if (Config_getBool("RTF_HYPERLINKS") &amp;&amp; fileName)</comment>
			<comment type="line">//</comment>{
			<expr_stmt><expr><call><name>writeAnchor</name><argument_list>(<argument><expr><name>fileName</name></expr></argument>,<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<comment type="line">//</comment>}
		}</block></then></if>
	}</block></function>
    <function><type><name>void</name></type> <name>endTitle</name><parameter_list>()</parameter_list> <block>{}</block></function> 

	<function><type><name>void</name></type> <name>newParagraph</name><parameter_list>()</parameter_list>
	<block>{
		<if>if <condition>(<expr>!<name>m_omitParagraph</name></expr>)</condition><then>
		<block>{
			<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (newParagraph)}"    &lt;&lt; endl</argument>)</argument_list></macro>
				<expr_stmt><expr><name>t</name> &lt;&lt; "\\par" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name>m_omitParagraph</name> = <name>FALSE</name></expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>startParagraph</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment startParagraph}" &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><call><name>newParagraph</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; "{" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>endParagraph</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment endParagraph}" &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><name>t</name> &lt;&lt; "}\\par" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>m_omitParagraph</name> = <name>TRUE</name></expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>writeString</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type><name>text</name></decl></param>)</parameter_list>
	<block>{
		<expr_stmt><expr><name>t</name> &lt;&lt; <name>text</name></expr>;</expr_stmt>
	}</block></function>
    <function><type><name>void</name></type> <name>startIndexListItem</name><parameter_list>()</parameter_list> <block>{}</block></function>
    <function><type><name>void</name></type> <name>endIndexListItem</name><parameter_list>()</parameter_list> <block>{}</block></function>
	<function><type><name>void</name></type> <name>startIndexList</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (startIndexList)}" &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><name>t</name> &lt;&lt; "{" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; "\\par" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>incrementIndentLevel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <call><name>rtf_LCList_DepthStyle</name><argument_list>()</argument_list></call> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>m_omitParagraph</name> = <name>TRUE</name></expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>endIndexList</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (endIndexList)}" &lt;&lt; endl</argument>)</argument_list></macro>
			<if>if <condition>(<expr>!<name>m_omitParagraph</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>t</name> &lt;&lt; "\\par"</expr>;</expr_stmt>
				<expr_stmt><expr><name>m_omitParagraph</name> = <name>TRUE</name></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name>t</name> &lt;&lt; "}"</expr>;</expr_stmt>
			<expr_stmt><expr><call><name>decrementIndentLevel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>startIndexKey</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (startIndexKey)}" &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><name>t</name> &lt;&lt; "{\\b "</expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>endIndexKey</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (endIndexKey)}" &lt;&lt; endl</argument>)</argument_list></macro>
	}</block></function>
	<function><type><name>void</name></type> <name>startIndexValue</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>hasBrief</name></decl></param>)</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (startIndexValue)}" &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><name>t</name> &lt;&lt; " "</expr>;</expr_stmt>
		<if>if <condition>(<expr><name>hasBrief</name></expr>)</condition><then> <expr_stmt><expr><name>t</name> &lt;&lt; "("</expr>;</expr_stmt></then></if>
	}</block></function>
	<function><type><name>void</name></type> <name>endIndexValue</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type><name>name</name></decl></param>,<param><decl><type><name>bool</name></type> <name>hasBrief</name></decl></param>)</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (endIndexValue)}" &lt;&lt; endl</argument>)</argument_list></macro>
			<if>if <condition>(<expr><name>hasBrief</name></expr>)</condition><then> <expr_stmt><expr><name>t</name> &lt;&lt; ")"</expr>;</expr_stmt></then></if>
		<expr_stmt><expr><name>t</name> &lt;&lt; "} "</expr>;</expr_stmt>
		<if>if <condition>(<expr><name>name</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>t</name> &lt;&lt; "\\tab "</expr>;</expr_stmt>
			<expr_stmt><expr><call><name>writeRTFReference</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>t</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		}</block></then>
		<else>else
		<block>{
			<expr_stmt><expr><name>t</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		}</block></else></if>
		<expr_stmt><expr><name>m_omitParagraph</name>=<name>FALSE</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>newParagraph</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>startItemList</name><parameter_list>()</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>newParagraph</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (startItemList level=" &lt;&lt; m_listLevel &lt;&lt; ") }" &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><name>t</name> &lt;&lt; "{"</expr>;</expr_stmt>
		<expr_stmt><expr><call><name>incrementIndentLevel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>rtf_listItemInfo</name><index>[<expr><name>m_listLevel</name></expr>]</index></name>.<name>isEnum</name> = <name>FALSE</name></expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>endItemList</name><parameter_list>()</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>newParagraph</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (endItemList level=" &lt;&lt; m_listLevel &lt;&lt; ")}" &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><name>t</name> &lt;&lt; "}"</expr>;</expr_stmt>
		<expr_stmt><expr><call><name>decrementIndentLevel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>m_omitParagraph</name> = <name>TRUE</name></expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>startIndexItem</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type><name>ref</name></decl></param>,<param><decl><type><name>const</name> <name>char</name> *</type><name>file</name></decl></param>)</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (startIndexItem)}" &lt;&lt; endl</argument>)</argument_list></macro>

			<if>if <condition>(<expr>!<name>m_omitParagraph</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>t</name> &lt;&lt; "\\par" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>m_omitParagraph</name> = <name>TRUE</name></expr>;</expr_stmt>
			}</block></then></if>
	}</block></function>
	<function><type><name>void</name></type> <name>endIndexItem</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type><name>ref</name></decl></param>,<param><decl><type><name>const</name> <name>char</name> *</type><name>file</name></decl></param>)</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (endIndexItem)}" &lt;&lt; endl</argument>)</argument_list></macro>
			<if>if <condition>(<expr>!<name>ref</name> &amp;&amp; <name>file</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>t</name> &lt;&lt; "\\tab "</expr>;</expr_stmt>
				<expr_stmt><expr><call><name>writeRTFReference</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>t</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
			}</block></then>
			<else>else
			<block>{
				<expr_stmt><expr><name>t</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
			}</block></else></if>
			<expr_stmt><expr><name>m_omitParagraph</name> = <name>TRUE</name></expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>docify</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type><name>text</name></decl></param>)</parameter_list>
	<block>{
		<if>if <condition>(<expr><name>text</name></expr>)</condition><then>
		<block>{
			<decl_stmt><decl><type><name>const</name> <name>unsigned</name> <name>char</name> *</type><name>p</name>=<init><expr>(<name>const</name> <name>unsigned</name> <name>char</name> *)<name>text</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>pc</name>=<init><expr>'\0'</expr></init></decl>;</decl_stmt>
			<while>while <condition>(<expr>*<name>p</name></expr>)</condition>
			<block>{
				<comment type="line">//static bool MultiByte = FALSE;</comment>
				<expr_stmt><expr><name>c</name>=*<name>p</name>++</expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
				if ( MultiByte )
				{
					t &lt;&lt; getMultiByte( c );
					MultiByte = FALSE;
					continue;
				}
				if ( c &gt;= 0x80 )
				{
					MultiByte = TRUE;
					t &lt;&lt; getMultiByte( c );
					continue;
				}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

				<switch>switch <condition>(<expr><name>c</name></expr>)</condition>
				<block>{
				<case>case <expr>'{'</expr>:  <expr_stmt><expr><name>t</name> &lt;&lt; "\\{"</expr>;</expr_stmt>            <break>break;</break>
				</case><case>case <expr>'}'</expr>:  <expr_stmt><expr><name>t</name> &lt;&lt; "\\}"</expr>;</expr_stmt>            <break>break;</break>
				</case><case>case <expr>'\\'</expr>: <expr_stmt><expr><name>t</name> &lt;&lt; "\\\\"</expr>;</expr_stmt>           <break>break;</break>
				</case><default>default:
					<block>{
						<comment type="line">// see if we can insert an hyphenation hint</comment>
						<comment type="line">//if (isupper(c) &amp;&amp; islower(pc) &amp;&amp; !insideTabbing) t &lt;&lt; "\\-";</comment>
						<expr_stmt><expr><name>t</name> &lt;&lt; (<name>char</name>)<name>c</name></expr>;</expr_stmt>
					}</block>
				</default>}</block></switch>
				<expr_stmt><expr><name>pc</name> = <name>c</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>m_omitParagraph</name> = <name>FALSE</name></expr>;</expr_stmt>
			}</block></while>
		}</block></then></if>
	}</block></function>
	<function><type><name>void</name></type> <name>codify</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type><name>text</name></decl></param>)</parameter_list>
	<block>{
		<comment type="line">// note that RTF does not have a "verbatim", so "\n" means</comment>
		<comment type="line">// nothing... add a "newParagraph()";</comment>
		<comment type="line">//static char spaces[]="        ";</comment>
		<if>if <condition>(<expr><name>text</name></expr>)</condition><then>
		<block>{
			<decl_stmt><decl><type><name>const</name> <name>unsigned</name> <name>char</name> *</type><name>p</name>=<init><expr>(<name>const</name> <name>unsigned</name> <name>char</name> *)<name>text</name></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>unsigned</name> <name>char</name></type> <name>c</name></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>spacesToNextTabStop</name></decl>;</decl_stmt>

			<while>while <condition>(<expr>*<name>p</name></expr>)</condition>
			<block>{
				<comment type="line">//static bool MultiByte = FALSE;</comment>

				<expr_stmt><expr><name>c</name>=*<name>p</name>++</expr>;</expr_stmt>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr>0</expr></cpp:if>
				if( MultiByte )
				{
					t &lt;&lt; getMultiByte( c );
					MultiByte = FALSE;
					continue;
				}
				if( c &gt;= 0x80 )
				{
					MultiByte = TRUE;
					t &lt;&lt; getMultiByte( c );
					continue;
				}
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

				<switch>switch<condition>(<expr><name>c</name></expr>)</condition>
				<block>{
				<case>case <expr>'\t'</expr>:  <expr_stmt><expr><name>spacesToNextTabStop</name> = <call><name>Config_getInt</name><argument_list>(<argument><expr>"TAB_SIZE"</expr></argument>)</argument_list></call> - (<name>col</name>%<call><name>Config_getInt</name><argument_list>(<argument><expr>"TAB_SIZE"</expr></argument>)</argument_list></call>)</expr>;</expr_stmt>
					<expr_stmt><expr><name>t</name> &lt;&lt; <name><name>Doxygen</name>::<name>spaces</name></name>.<call><name>left</name><argument_list>(<argument><expr><name>spacesToNextTabStop</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>col</name>+=<name>spacesToNextTabStop</name></expr>;</expr_stmt>
					<break>break;</break>
				</case><case>case <expr>'\n'</expr>:  <expr_stmt><expr><call><name>newParagraph</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>t</name> &lt;&lt; '\n'</expr>;</expr_stmt> <expr_stmt><expr><name>col</name>=0</expr>;</expr_stmt>
					<break>break;</break>
				</case><case>case <expr>'{'</expr>:   <expr_stmt><expr><name>t</name> &lt;&lt; "\\{"</expr>;</expr_stmt> <expr_stmt><expr><name>col</name>++</expr>;</expr_stmt>          <break>break;</break>
				</case><case>case <expr>'}'</expr>:   <expr_stmt><expr><name>t</name> &lt;&lt; "\\}"</expr>;</expr_stmt> <expr_stmt><expr><name>col</name>++</expr>;</expr_stmt>          <break>break;</break>
				</case><case>case <expr>'\\'</expr>:  <expr_stmt><expr><name>t</name> &lt;&lt; "\\\\"</expr>;</expr_stmt> <expr_stmt><expr><name>col</name>++</expr>;</expr_stmt>         <break>break;</break>
				</case><default>default:    <expr_stmt><expr><name>t</name> &lt;&lt; (<name>char</name>)<name>c</name></expr>;</expr_stmt> <expr_stmt><expr><name>col</name>++</expr>;</expr_stmt>           <break>break;</break>
				</default>}</block></switch>
			}</block></while>
		}</block></then></if>
	}</block></function>
    <function><type><name>void</name></type> <name>writeObjectLink</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type><name>ref</name></decl></param>,<param><decl><type><name>const</name> <name>char</name> *</type><name>file</name></decl></param>,
		<param><decl><type><name>const</name> <name>char</name> *</type><name>anchor</name></decl></param>,<param><decl><type><name>const</name> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list>
	<block>{
		<if>if <condition>(<expr>!<name>ref</name> &amp;&amp; <call><name>Config_getBool</name><argument_list>(<argument><expr>"RTF_HYPERLINKS"</expr></argument>)</argument_list></call></expr>)</condition><then>
		<block>{
			<decl_stmt><decl><type><name>QCString</name></type> <name>refName</name></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>file</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>refName</name>+=<name>file</name></expr>;</expr_stmt>
			}</block></then></if>
			<if>if <condition>(<expr><name>anchor</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>refName</name>+='_'</expr>;</expr_stmt>
				<expr_stmt><expr><name>refName</name>+=<name>anchor</name></expr>;</expr_stmt>
			}</block></then></if>

			<expr_stmt><expr><name>t</name> &lt;&lt; "{\\field {\\*\\fldinst { HYPERLINK  \\\\l \""</expr>;</expr_stmt>
			<expr_stmt><expr><name>t</name> &lt;&lt; <call><name>rtfFormatBmkStr</name><argument_list>(<argument><expr><name>refName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>t</name> &lt;&lt; "\" }{}"</expr>;</expr_stmt>
			<expr_stmt><expr><name>t</name> &lt;&lt; "}{\\fldrslt {\\cs37\\ul\\cf2 "</expr>;</expr_stmt>

			<expr_stmt><expr><call><name>docify</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>t</name> &lt;&lt; "}}}" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		}</block></then>
		<else>else
		<block>{
			<expr_stmt><expr><call><name>startBold</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>docify</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>endBold</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></function>
    <function><type><name>void</name></type> <name>writeCodeLink</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type><name>ref</name></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>file</name></decl></param>,
                       <param><decl><type><name>const</name> <name>char</name> *</type><name>anchor</name></decl></param>,<param><decl><type><name>const</name> <name>char</name> *</type><name>name</name></decl></param>,
					   <param><decl><type><name>const</name> <name>char</name> *</type><name>tooltip</name></decl></param>)</parameter_list>
	<block>{
		<if>if <condition>(<expr>!<name>ref</name> &amp;&amp; <call><name>Config_getBool</name><argument_list>(<argument><expr>"RTF_HYPERLINKS"</expr></argument>)</argument_list></call></expr>)</condition><then>
		<block>{
			<decl_stmt><decl><type><name>QCString</name></type> <name>refName</name></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>file</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>refName</name>+=<name>file</name></expr>;</expr_stmt>
			}</block></then></if>
			<if>if <condition>(<expr><name>anchor</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>refName</name>+='_'</expr>;</expr_stmt>
				<expr_stmt><expr><name>refName</name>+=<name>anchor</name></expr>;</expr_stmt>
			}</block></then></if>

			<expr_stmt><expr><name>t</name> &lt;&lt; "{\\field {\\*\\fldinst { HYPERLINK  \\\\l \""</expr>;</expr_stmt>
			<expr_stmt><expr><name>t</name> &lt;&lt; <call><name>rtfFormatBmkStr</name><argument_list>(<argument><expr><name>refName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>t</name> &lt;&lt; "\" }{}"</expr>;</expr_stmt>
			<expr_stmt><expr><name>t</name> &lt;&lt; "}{\\fldrslt {\\cs37\\ul\\cf2 "</expr>;</expr_stmt>

			<expr_stmt><expr><call><name>codify</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>t</name> &lt;&lt; "}}}" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		}</block></then>
		<else>else
		<block>{
			<expr_stmt><expr><call><name>codify</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></function>
	<function><type><name>void</name></type> <name>startTextLink</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type><name>f</name></decl></param>,<param><decl><type><name>const</name> <name>char</name> *</type><name>anchor</name></decl></param>)</parameter_list>
	<block>{
		<if>if <condition>(<expr><call><name>Config_getBool</name><argument_list>(<argument><expr>"RTF_HYPERLINKS"</expr></argument>)</argument_list></call></expr>)</condition><then>
		<block>{
			<decl_stmt><decl><type><name>QCString</name></type> <name>ref</name></decl>;</decl_stmt>
			<if>if <condition>(<expr><name>f</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>ref</name>+=<name>f</name></expr>;</expr_stmt>
			}</block></then></if>
			<if>if <condition>(<expr><name>anchor</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>ref</name>+='_'</expr>;</expr_stmt>
				<expr_stmt><expr><name>ref</name>+=<name>anchor</name></expr>;</expr_stmt>
			}</block></then></if>

			<expr_stmt><expr><name>t</name> &lt;&lt; "{\\field {\\*\\fldinst { HYPERLINK  \\\\l \""</expr>;</expr_stmt>
			<expr_stmt><expr><name>t</name> &lt;&lt; <call><name>rtfFormatBmkStr</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>t</name> &lt;&lt; "\" }{}"</expr>;</expr_stmt>
			<expr_stmt><expr><name>t</name> &lt;&lt; "}{\\fldrslt {\\cs37\\ul\\cf2 "</expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>
	<function><type><name>void</name></type> <name>endTextLink</name><parameter_list>()</parameter_list>
	<block>{
		<if>if <condition>(<expr><call><name>Config_getBool</name><argument_list>(<argument><expr>"RTF_HYPERLINKS"</expr></argument>)</argument_list></call></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>t</name> &lt;&lt; "}}}" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>
	<function><type><name>void</name></type> <name>startHtmlLink</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type><name>url</name></decl></param>)</parameter_list>
	<block>{

		<if>if <condition>(<expr><call><name>Config_getBool</name><argument_list>(<argument><expr>"RTF_HYPERLINKS"</expr></argument>)</argument_list></call></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>t</name> &lt;&lt; "{\\field {\\*\\fldinst { HYPERLINK  \\\\l \""</expr>;</expr_stmt>
			<expr_stmt><expr><name>t</name> &lt;&lt; <name>url</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>t</name> &lt;&lt; "\" }{}"</expr>;</expr_stmt>
			<expr_stmt><expr><name>t</name> &lt;&lt; "}{\\fldrslt {\\cs37\\ul\\cf2 "</expr>;</expr_stmt>
		}</block></then>
		<else>else
		<block>{
			<expr_stmt><expr><call><name>startTypewriter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></function>
	<function><type><name>void</name></type> <name>endHtmlLink</name><parameter_list>()</parameter_list>
	<block>{
		<if>if <condition>(<expr><call><name>Config_getBool</name><argument_list>(<argument><expr>"RTF_HYPERLINKS"</expr></argument>)</argument_list></call></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>t</name> &lt;&lt; "}}}" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		}</block></then>
		<else>else
		<block>{
			<expr_stmt><expr><call><name>endTypewriter</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
	}</block></function>
    <function><type><name>void</name></type> <name>startTypewriter</name><parameter_list>()</parameter_list> <block>{ <expr_stmt><expr><name>t</name> &lt;&lt; "{\\f2 "</expr>;</expr_stmt> }</block></function>
    <function><type><name>void</name></type> <name>endTypewriter</name><parameter_list>()</parameter_list>   <block>{ <expr_stmt><expr><name>t</name> &lt;&lt; "}"</expr>;</expr_stmt>      }</block></function>
	<function><type><name>void</name></type> <name>startGroupHeader</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt;"{\\comment startGroupHeader}" &lt;&lt; endl</argument>)</argument_list></macro>
			<comment type="line">//newParagraph();</comment>
			<expr_stmt><expr><name>t</name> &lt;&lt; <name>rtf_Style_Reset</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; <name><name>rtf_Style</name><index>[<expr>"Heading3"</expr>]</index></name>-&gt;<name>reference</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>endGroupHeader</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt;"{\\comment endGroupHeader}" &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><name>t</name> &lt;&lt; "\\par" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
	}</block></function>
    <comment type="line">//void writeListItem();</comment>
	<function><type><name>void</name></type> <name>startItemListItem</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (startItemListItem)}" &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><call><name>newParagraph</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; <name>rtf_Style_Reset</name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name><name>rtf_listItemInfo</name><index>[<expr><name>m_listLevel</name></expr>]</index></name>.<name>isEnum</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>t</name> &lt;&lt; <call><name>rtf_EList_DepthStyle</name><argument_list>()</argument_list></call> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>t</name> &lt;&lt; <name><name>rtf_listItemInfo</name><index>[<expr><name>m_listLevel</name></expr>]</index></name>.<name>number</name> &lt;&lt; ".\\tab "</expr>;</expr_stmt>
			<expr_stmt><expr><name><name>rtf_listItemInfo</name><index>[<expr><name>m_listLevel</name></expr>]</index></name>.<name>number</name>++</expr>;</expr_stmt>
		}</block></then>
		<else>else
		<block>{
			<expr_stmt><expr><name>t</name> &lt;&lt; <call><name>rtf_BList_DepthStyle</name><argument_list>()</argument_list></call> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		}</block></else></if>
		<expr_stmt><expr><name>m_omitParagraph</name> = <name>TRUE</name></expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>endItemListItem</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (endItemListItem)}" &lt;&lt; endl</argument>)</argument_list></macro>
	}</block></function>

    <function><type><name>void</name></type> <name>startMemberSections</name><parameter_list>()</parameter_list> <block>{}</block></function>
    <function><type><name>void</name></type> <name>endMemberSections</name><parameter_list>()</parameter_list> <block>{}</block></function> 
    <function><type><name>void</name></type> <name>startMemberHeader</name><parameter_list>()</parameter_list> <block>{ <expr_stmt><expr><call><name>startGroupHeader</name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block></function>
    <function><type><name>void</name></type> <name>endMemberHeader</name><parameter_list>()</parameter_list> <block>{ <expr_stmt><expr><call><name>endGroupHeader</name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block></function>
	<function><type><name>void</name></type> <name>startMemberSubtitle</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment startMemberSubtitle}" &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><name>t</name> &lt;&lt; "{" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <call><name>rtf_CList_DepthStyle</name><argument_list>()</argument_list></call> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
	}</block></function> 
	<function><type><name>void</name></type> <name>endMemberSubtitle</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment endMemberSubtitle}" &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><call><name>newParagraph</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; "}" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
	}</block></function>
    <function><type><name>void</name></type> <name>startMemberDocList</name><parameter_list>()</parameter_list> <block>{}</block></function>
    <function><type><name>void</name></type> <name>endMemberDocList</name><parameter_list>()</parameter_list> <block>{}</block></function>
	<function><type><name>void</name></type> <name>startMemberList</name><parameter_list>()</parameter_list>
	<block>{
		<expr_stmt><expr><name>t</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (startMemberList) }"    &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><name>t</name> &lt;&lt; "{" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DELETEDCODE</name></cpp:ifdef>
		<if>if <condition>(<expr>!<name>insideTabbing</name></expr>)</condition><then>
			<expr_stmt><expr><name>t</name> &lt;&lt; "\\begin{CompactItemize}" &lt;&lt; <name>endl</name></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	}</block></function>
	<function><type><name>void</name></type> <name>endMemberList</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (endMemberList) }"    &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><name>t</name> &lt;&lt; "}" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DELETEDCODE</name></cpp:ifdef>
		<if>if <condition>(<expr>!<name>insideTabbing</name></expr>)</condition><then>
			<expr_stmt><expr><name>t</name> &lt;&lt; "\\end{CompactItemize}"   &lt;&lt; <name>endl</name></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	}</block></function>
    <function><type><name>void</name></type> <name>startAnonTypeScope</name><parameter_list>(<param><decl><type><name>int</name></type></decl></param>)</parameter_list> <block>{}</block></function>
    <function><type><name>void</name></type> <name>endAnonTypeScope</name><parameter_list>(<param><decl><type><name>int</name></type></decl></param>)</parameter_list> <block>{}</block></function>
	<function><type><name>void</name></type> <name>startMemberItem</name><parameter_list>(<param><decl><type><name>int</name></type></decl></param>)</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt;"{\\comment startMemberItem }" &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><name>t</name> &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <call><name>rtf_BList_DepthStyle</name><argument_list>()</argument_list></call> &lt;&lt; <name>endl</name></expr>;</expr_stmt> <comment type="line">// set style to apropriate depth</comment>
	}</block></function>
	<function><type><name>void</name></type> <name>endMemberItem</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt;"{\\comment endMemberItem }" &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><call><name>newParagraph</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
    <function><type><name>void</name></type> <name>startMemberTemplateParams</name><parameter_list>()</parameter_list> <block>{}</block></function>
    <function><type><name>void</name></type> <name>endMemberTemplateParams</name><parameter_list>()</parameter_list> <block>{}</block></function>
    <function><type><name>void</name></type> <name>insertMemberAlign</name><parameter_list>(<param><decl><type><name>bool</name></type></decl></param>)</parameter_list> <block>{}</block></function>

    <function><type><name>void</name></type> <name>writeRuler</name><parameter_list>()</parameter_list> <block>{ <expr_stmt><expr><call><name>rtfwriteRuler_thin</name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block></function>
	
	<function><type><name>void</name></type> <name>writeAnchor</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type><name>fileName</name></decl></param>,<param><decl><type><name>const</name> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>QCString</name></type> <name>anchor</name></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>fileName</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>anchor</name>+=<name>fileName</name></expr>;</expr_stmt>
		}</block></then></if>
		<if>if <condition>(<expr><name>fileName</name> &amp;&amp; <name>name</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>anchor</name>+='_'</expr>;</expr_stmt>
		}</block></then></if>
		<if>if <condition>(<expr><name>name</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>anchor</name>+=<name>name</name></expr>;</expr_stmt>
		}</block></then></if>

		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt;"{\\comment writeAnchor (" &lt;&lt; anchor &lt;&lt; ")}" &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><name>t</name> &lt;&lt; "{\\bkmkstart " &lt;&lt; <call><name>rtfFormatBmkStr</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>)</argument_list></call> &lt;&lt; "}" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; "{\\bkmkend " &lt;&lt; <call><name>rtfFormatBmkStr</name><argument_list>(<argument><expr><name>anchor</name></expr></argument>)</argument_list></call> &lt;&lt; "}" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>startCodeFragment</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (startCodeFragment) }"    &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><name>t</name> &lt;&lt; "{" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		<comment type="line">//newParagraph();</comment>
		<expr_stmt><expr><name>t</name> &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <call><name>rtf_Code_DepthStyle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<comment type="line">//styleStack.push(rtf_Style_CodeExample);</comment>
	}</block></function>
	<function><type><name>void</name></type> <name>endCodeFragment</name><parameter_list>()</parameter_list>
	<block>{
		<comment type="line">//newParagraph();</comment>
		<comment type="line">//styleStack.pop();</comment>
		<comment type="line">//printf("RTFGenerator::endCodeFrament() top=%s\n",styleStack.top());</comment>
		<comment type="line">//t &lt;&lt; rtf_Style_Reset &lt;&lt; styleStack.top() &lt;&lt; endl;</comment>
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (endCodeFragment) }"    &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><name>t</name> &lt;&lt; "}" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>m_omitParagraph</name> = <name>TRUE</name></expr>;</expr_stmt>
	}</block></function>
    <function><type><name>void</name></type> <name>writeLineNumber</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type></decl></param>,<param><decl><type><name>const</name> <name>char</name> *</type></decl></param>,<param><decl><type><name>const</name> <name>char</name> *</type></decl></param>,<param><decl><type><name>int</name></type> <name>l</name></decl></param>)</parameter_list> <block>{ <expr_stmt><expr><name>t</name> &lt;&lt; <name>l</name> &lt;&lt; " "</expr>;</expr_stmt> }</block></function>
    <function><type><name>void</name></type> <name>startCodeLine</name><parameter_list>()</parameter_list> <block>{ <expr_stmt><expr><name>col</name>=0</expr>;</expr_stmt> }</block></function>
    <function><type><name>void</name></type> <name>endCodeLine</name><parameter_list>()</parameter_list> <block>{ <expr_stmt><expr><call><name>lineBreak</name><argument_list>()</argument_list></call></expr>;</expr_stmt> }</block></function>
    <function><type><name>void</name></type> <name>startEmphasis</name><parameter_list>()</parameter_list> <block>{ <expr_stmt><expr><name>t</name> &lt;&lt; "{\\i "</expr>;</expr_stmt>  }</block></function>
    <function><type><name>void</name></type> <name>endEmphasis</name><parameter_list>()</parameter_list>   <block>{ <expr_stmt><expr><name>t</name> &lt;&lt; "}"</expr>;</expr_stmt> }</block></function>
    <function><type><name>void</name></type> <name>startBold</name><parameter_list>()</parameter_list>     <block>{ <expr_stmt><expr><name>t</name> &lt;&lt; "{\\b "</expr>;</expr_stmt> }</block></function>
    <function><type><name>void</name></type> <name>endBold</name><parameter_list>()</parameter_list>       <block>{ <expr_stmt><expr><name>t</name> &lt;&lt; "}"</expr>;</expr_stmt> }</block></function>
	<function><type><name>void</name></type> <name>startDescription</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (startDescription)}"    &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><name>t</name> &lt;&lt; "{" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <call><name>rtf_DList_DepthStyle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>endDescription</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (endDescription)}"    &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><call><name>newParagraph</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; "}"</expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>startDescItem</name><parameter_list>()</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>newParagraph</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (startDescItem)}"    &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><name>t</name> &lt;&lt; "{\\b "</expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>endDescItem</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (endDescItem)}"    &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><name>t</name> &lt;&lt; "}" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>newParagraph</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>lineBreak</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type><name>style</name>=<init><expr>0</expr></init></decl></param>)</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (lineBreak)}"    &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><name>t</name> &lt;&lt; "\\par" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>m_omitParagraph</name> = <name>TRUE</name></expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>startMemberDoc</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type><name>clname</name></decl></param>,
		<param><decl><type><name>const</name> <name>char</name> *</type><name>memname</name></decl></param>,
		<param><decl><type><name>const</name> <name>char</name> *</type></decl></param>,
		<param><decl><type><name>const</name> <name>char</name> *</type></decl></param>)</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment startMemberDoc}" &lt;&lt; endl</argument>)</argument_list></macro>
			<if>if <condition>(<expr><name>memname</name> &amp;&amp; <name><name>memname</name><index>[<expr>0</expr>]</index></name>!='@'</expr>)</condition><then>
			<block>{
				<expr_stmt><expr><call><name>addIndexItem</name><argument_list>(<argument><expr><name>memname</name></expr></argument>,<argument><expr><name>clname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><call><name>addIndexItem</name><argument_list>(<argument><expr><name>clname</name></expr></argument>,<argument><expr><name>memname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name>t</name> &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <name><name>rtf_Style</name><index>[<expr>"Heading4"</expr>]</index></name>-&gt;<name>reference</name></expr>;</expr_stmt>
			<comment type="line">//styleStack.push(rtf_Style_Heading4);</comment>
			<expr_stmt><expr><name>t</name> &lt;&lt; "{" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
			<comment type="line">//printf("RTFGenerator::startMemberDoc() `%s'\n",rtf_Style["Heading4"]-&gt;reference);</comment>
			<expr_stmt><expr><call><name>startBold</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>t</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>endMemberDoc</name><parameter_list>(<param><decl><type><name>bool</name></type></decl></param>)</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment endMemberDoc}" &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><name>t</name> &lt;&lt; "}" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		<comment type="line">//const char *style = styleStack.pop();</comment>
		<comment type="line">//printf("RTFGenerator::endMemberDoc() `%s'\n",style);</comment>
		<comment type="line">//ASSERT(style==rtf_Style["Heading4"]-&gt;reference);</comment>
		<expr_stmt><expr><call><name>endBold</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>newParagraph</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>startDoxyAnchor</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type></decl></param>,<param><decl><type><name>const</name> <name>char</name> *</type></decl></param>,<param><decl><type><name>const</name> <name>char</name> *</type></decl></param>,<param><decl><type><name>const</name> <name>char</name> *</type></decl></param>,<param><decl><type><name>const</name> <name>char</name> *</type></decl></param>)</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment startDoxyAnchor}" &lt;&lt; endl</argument>)</argument_list></macro>
	}</block></function>

	<function><type><name>void</name></type> <name>endDoxyAnchor</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type><name>fName</name></decl></param>,<param><decl><type><name>const</name> <name>char</name> *</type><name>anchor</name></decl></param>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>QCString</name></type> <name>ref</name></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>fName</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>ref</name>+=<name>fName</name></expr>;</expr_stmt>
		}</block></then></if>
		<if>if <condition>(<expr><name>anchor</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>ref</name>+='_'</expr>;</expr_stmt>
			<expr_stmt><expr><name>ref</name>+=<name>anchor</name></expr>;</expr_stmt>
		}</block></then></if>

		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment endDoxyAnchor}" &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><name>t</name> &lt;&lt; "{\\bkmkstart "</expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; <call><name>rtfFormatBmkStr</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; "}" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; "{\\bkmkend "</expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; <call><name>rtfFormatBmkStr</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; "}" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
	}</block></function>
    <function><type><name>void</name></type> <name>startCodeAnchor</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type></decl></param>)</parameter_list> <block>{}</block></function><empty_stmt>;</empty_stmt>
    <function><type><name>void</name></type> <name>endCodeAnchor</name><parameter_list>()</parameter_list> <block>{}</block></function><empty_stmt>;</empty_stmt>
	<function><type><name>void</name></type> <name>writeChar</name><parameter_list>(<param><decl><type><name>char</name></type> <name>c</name></decl></param>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>char</name></type> <name><name>cs</name><index>[<expr>2</expr>]</index></name></decl>;</decl_stmt>
		<expr_stmt><expr><name><name>cs</name><index>[<expr>0</expr>]</index></name>=<name>c</name></expr>;</expr_stmt>
		<expr_stmt><expr><name><name>cs</name><index>[<expr>1</expr>]</index></name>=0</expr>;</expr_stmt>
		<expr_stmt><expr><call><name>docify</name><argument_list>(<argument><expr><name>cs</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
    <function><type><name>void</name></type> <name>writeLatexSpacing</name><parameter_list>()</parameter_list> <block>{}</block></function><empty_stmt>;</empty_stmt><comment type="line">//{ t &lt;&lt; "\\hspace{0.3cm}"; }</comment>
    <function><type><name>void</name></type> <name>writeStartAnnoItem</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type><name>type</name></decl></param>,<param><decl><type><name>const</name> <name>char</name> *</type><name>file</name></decl></param>, 
		<param><decl><type><name>const</name> <name>char</name> *</type><name>path</name></decl></param>,<param><decl><type><name>const</name> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (writeStartAnnoItem)}" &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><name>t</name> &lt;&lt; "{\\b "</expr>;</expr_stmt>
		<if>if <condition>(<expr><name>path</name></expr>)</condition><then> <expr_stmt><expr><call><name>docify</name><argument_list>(<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<if>if <condition>(<expr><name>file</name> &amp;&amp; <call><name>Config_getBool</name><argument_list>(<argument><expr>"RTF_HYPERLINKS"</expr></argument>)</argument_list></call></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>t</name> &lt;&lt; "{\\field {\\*\\fldinst { HYPERLINK  \\\\l \""</expr>;</expr_stmt>
			<expr_stmt><expr><name>t</name> &lt;&lt; <call><name>rtfFormatBmkStr</name><argument_list>(<argument><expr><name>file</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>t</name> &lt;&lt; "\" }{}"</expr>;</expr_stmt>
			<expr_stmt><expr><name>t</name> &lt;&lt; "}{\\fldrslt {\\cs37\\ul\\cf2 "</expr>;</expr_stmt>

			<expr_stmt><expr><call><name>docify</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>t</name> &lt;&lt; "}}}" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		}</block></then>
		<else>else
		<block>{
			<expr_stmt><expr><call><name>docify</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<expr_stmt><expr><name>t</name> &lt;&lt; "} "</expr>;</expr_stmt>
	}</block></function>

	<function><type><name>void</name></type> <name>writeEndAnnoItem</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (writeEndAnnoItem)}" &lt;&lt; endl</argument>)</argument_list></macro>
			<if>if <condition>(<expr><name>name</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>t</name> &lt;&lt; "\\tab "</expr>;</expr_stmt>
				<expr_stmt><expr><call><name>writeRTFReference</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>t</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
			}</block></then>
			<else>else
			<block>{
				<expr_stmt><expr><name>t</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
			}</block></else></if>
			<expr_stmt><expr><call><name>newParagraph</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>startSubsection</name><parameter_list>()</parameter_list>
	<block>{
		<comment type="line">//beginRTFSubSection();</comment>
		<expr_stmt><expr><name>t</name> &lt;&lt;"\n"</expr>;</expr_stmt>
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment Begin SubSection}\n"</argument>)</argument_list></macro>
			<expr_stmt><expr><name>t</name> &lt;&lt; <name>rtf_Style_Reset</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; <name><name>rtf_Style</name><index>[<expr>"Heading3"</expr>]</index></name>-&gt;<name>reference</name> &lt;&lt; "\n"</expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>endSubsection</name><parameter_list>()</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>newParagraph</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><name>void</name></type> <name>startSubsubsection</name><parameter_list>()</parameter_list>
	<block>{
		<comment type="line">//beginRTFSubSubSection();</comment>
		<expr_stmt><expr><name>t</name> &lt;&lt; "\n"</expr>;</expr_stmt>
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment Begin SubSubSection}\n"</argument>)</argument_list></macro>
			<expr_stmt><expr><name>t</name> &lt;&lt; "{" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <name><name>rtf_Style</name><index>[<expr>"Heading4"</expr>]</index></name>-&gt;<name>reference</name> &lt;&lt; "\n"</expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>endSubsubsection</name><parameter_list>()</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>newParagraph</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; "}" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
	}</block></function>

    <function><type><name>void</name></type> <name>startCenter</name><parameter_list>()</parameter_list>      <block>{ <expr_stmt><expr><name>t</name> &lt;&lt; "{\\qc" &lt;&lt; <name>endl</name></expr>;</expr_stmt> }</block></function>
    <function><type><name>void</name></type> <name>endCenter</name><parameter_list>()</parameter_list>        <block>{ <expr_stmt><expr><name>t</name> &lt;&lt; "}"</expr>;</expr_stmt> }</block></function>
    <function><type><name>void</name></type> <name>startSmall</name><parameter_list>()</parameter_list>       <block>{ <expr_stmt><expr><name>t</name> &lt;&lt; "{\\sub "</expr>;</expr_stmt> }</block></function>
    <function><type><name>void</name></type> <name>endSmall</name><parameter_list>()</parameter_list>         <block>{ <expr_stmt><expr><name>t</name> &lt;&lt; "}"</expr>;</expr_stmt> }</block></function>

	<function><type><name>void</name></type> <name>startMemberDescription</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (startMemberDescription)}"    &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><name>t</name> &lt;&lt; "{" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>incrementIndentLevel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <call><name>rtf_CList_DepthStyle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>startEmphasis</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>endMemberDescription</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (endMemberDescription)}"    &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><call><name>endEmphasis</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>newParagraph</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>decrementIndentLevel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<comment type="line">//t &lt;&lt; "\\par";</comment>
		<expr_stmt><expr><name>t</name> &lt;&lt; "}" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		<comment type="line">//m_omitParagraph = TRUE;</comment>
	}</block></function>
	<function><type><name>void</name></type> <name>startDescList</name><parameter_list>(<param><decl><type><name>SectionTypes</name></type></decl></param>)</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (startDescList)}"    &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><name>t</name> &lt;&lt; "{"</expr>;</expr_stmt> <comment type="line">// ends at endDescList</comment>
		<expr_stmt><expr><name>t</name> &lt;&lt; "{"</expr>;</expr_stmt> <comment type="line">// ends at endDescTitle</comment>
		<expr_stmt><expr><call><name>startBold</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>newParagraph</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><name>void</name></type> <name>startSimpleSect</name><parameter_list>(<param><decl><type><name>SectionTypes</name></type></decl></param>,<param><decl><type><name>const</name> <name>char</name> *</type><name>file</name></decl></param>,<param><decl><type><name>const</name> <name>char</name> *</type><name>anchor</name></decl></param>,<param><decl><type><name>const</name> <name>char</name> *</type><name>title</name></decl></param>)</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (startSimpleSect)}"    &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><name>t</name> &lt;&lt; "{"</expr>;</expr_stmt> <comment type="line">// ends at endDescList</comment>
		<expr_stmt><expr><name>t</name> &lt;&lt; "{"</expr>;</expr_stmt> <comment type="line">// ends at endDescTitle</comment>
		<expr_stmt><expr><call><name>startBold</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>newParagraph</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>file</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name>writeObjectLink</name><argument_list>(<argument><expr>0</expr></argument>,<argument><expr><name>file</name></expr></argument>,<argument><expr><name>anchor</name></expr></argument>,<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else>else
		<block>{
			<expr_stmt><expr><call><name>docify</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></else></if>
		<expr_stmt><expr><call><name>endBold</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; "}"</expr>;</expr_stmt>
		<expr_stmt><expr><call><name>newParagraph</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>incrementIndentLevel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <call><name>rtf_DList_DepthStyle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><name>void</name></type> <name>endSimpleSect</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (endSimpleSect)}"    &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><call><name>newParagraph</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>decrementIndentLevel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>m_omitParagraph</name> = <name>TRUE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; "}"</expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>startParamList</name><parameter_list>(<param><decl><type><name>ParamListTypes</name></type></decl></param>,<param><decl><type><name>const</name> <name>char</name> *</type><name>title</name></decl></param>)</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (startParamList)}"    &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><name>t</name> &lt;&lt; "{"</expr>;</expr_stmt> <comment type="line">// ends at endParamList</comment>
		<expr_stmt><expr><name>t</name> &lt;&lt; "{"</expr>;</expr_stmt> <comment type="line">// ends at endDescTitle</comment>
		<expr_stmt><expr><call><name>startBold</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>newParagraph</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>docify</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>endBold</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; "}"</expr>;</expr_stmt>
		<expr_stmt><expr><call><name>newParagraph</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>incrementIndentLevel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <call><name>rtf_DList_DepthStyle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>endParamList</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (endParamList)}"    &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><call><name>newParagraph</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>decrementIndentLevel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>m_omitParagraph</name> = <name>TRUE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; "}"</expr>;</expr_stmt>
	}</block></function>
    <comment type="line">//void writeDescItem();</comment>
	<function><type><name>void</name></type> <name>startDescForItem</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (startDescForItem) }"    &lt;&lt; endl</argument>)</argument_list></macro>
	}</block></function>
	<function><type><name>void</name></type> <name>endDescForItem</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (endDescForItem) }"    &lt;&lt; endl</argument>)</argument_list></macro>
	}</block></function>
	<function><type><name>void</name></type> <name>startSection</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type></decl></param>,<param><decl><type><name>const</name> <name>char</name> *</type><name>title</name></decl></param>,<param><decl><type><name><name>SectionInfo</name>::<name>SectionType</name></name></type> <name>type</name></decl></param>)</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (startSection)}"    &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><name>t</name> &lt;&lt; "{"</expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name>&lt;&lt; <name>rtf_Style_Reset</name></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>num</name>=<init><expr>4</expr></init></decl>;</decl_stmt>
		<switch>switch<condition>(<expr><name>type</name></expr>)</condition>
		<block>{
		<case>case <expr><name><name>SectionInfo</name>::<name>Page</name></name></expr>:          <expr_stmt><expr><name>num</name>=2</expr>;</expr_stmt> <break>break;</break>
		</case><case>case <expr><name><name>SectionInfo</name>::<name>Section</name></name></expr>:       <expr_stmt><expr><name>num</name>=3</expr>;</expr_stmt> <break>break;</break>
		</case><case>case <expr><name><name>SectionInfo</name>::<name>Subsection</name></name></expr>:    <expr_stmt><expr><name>num</name>=4</expr>;</expr_stmt> <break>break;</break>
		</case><case>case <expr><name><name>SectionInfo</name>::<name>Subsubsection</name></name></expr>: <expr_stmt><expr><name>num</name>=4</expr>;</expr_stmt> <break>break;</break>
		</case><case>case <expr><name><name>SectionInfo</name>::<name>Paragraph</name></name></expr>:     <expr_stmt><expr><name>num</name>=4</expr>;</expr_stmt> <break>break;</break>
		</case><default>default: <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt> <break>break;</break>
		</default>}</block></switch>
		<decl_stmt><decl><type><name>QCString</name></type> <name>heading</name></decl>;</decl_stmt>
		<expr_stmt><expr><name>heading</name>.<call><name>sprintf</name><argument_list>(<argument><expr>"Heading%d"</expr></argument>,<argument><expr><name>num</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<comment type="line">// set style</comment>
		<expr_stmt><expr><name>t</name> &lt;&lt; <name><name>rtf_Style</name><index>[<expr><name>heading</name></expr>]</index></name>-&gt;<name>reference</name></expr>;</expr_stmt>
		<comment type="line">// make table of contents entry</comment>
		<expr_stmt><expr><name>t</name> &lt;&lt; "{\\tc\\tcl" &lt;&lt; <name>num</name> &lt;&lt; " \\v "</expr>;</expr_stmt>
		<expr_stmt><expr><call><name>docify</name><argument_list>(<argument><expr><name>title</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; "}" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><name>void</name></type> <name>endSection</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type><name>lab</name></decl></param>,<param><decl><type><name><name>SectionInfo</name>::<name>SectionType</name></name></type></decl></param>)</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (endSection)}"    &lt;&lt; endl</argument>)</argument_list></macro>
			<comment type="line">// make bookmark</comment>
			<expr_stmt><expr><name>m_omitParagraph</name>=<name>FALSE</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>newParagraph</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>writeAnchor</name><argument_list>(<argument><expr>0</expr></argument>,<argument><expr><name>lab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; "}"</expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>addIndexItem</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type><name>s1</name></decl></param>,<param><decl><type><name>const</name> <name>char</name> *</type><name>s2</name></decl></param>)</parameter_list>
	<block>{
		<if>if <condition>(<expr><name>s1</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>t</name> &lt;&lt; "{\\xe \\v "</expr>;</expr_stmt>
			<expr_stmt><expr><call><name>docify</name><argument_list>(<argument><expr><name>s1</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>s2</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>t</name> &lt;&lt; "\\:"</expr>;</expr_stmt>
				<expr_stmt><expr><call><name>docify</name><argument_list>(<argument><expr><name>s2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			}</block></then></if>
			<expr_stmt><expr><name>t</name> &lt;&lt; "}" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>
	<function><type><name>void</name></type> <name>startIndent</name><parameter_list>()</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>incrementIndentLevel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (startIndent) }" &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><name>t</name> &lt;&lt; "{" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <call><name>rtf_CList_DepthStyle</name><argument_list>()</argument_list></call> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><name>void</name></type> <name>endIndent</name><parameter_list>()</parameter_list>
	<block>{
		<expr_stmt><expr><name>t</name> &lt;&lt; "}" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>decrementIndentLevel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

    <function><type><name>void</name></type> <name>writeSynopsis</name><parameter_list>()</parameter_list>     <block>{}</block></function>
	<function><type><name>void</name></type> <name>startClassDiagram</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt;"{\\comment startClassDiagram }" &lt;&lt; endl</argument>)</argument_list></macro>
	}</block></function>
	<function><type><name>void</name></type> <name>endClassDiagram</name><parameter_list>(<param><decl><type><name>const</name> <name>ClassDiagram</name> &amp;</type><name>d</name></decl></param>,
		<param><decl><type><name>const</name> <name>char</name> *</type><name>fileName</name></decl></param>,<param><decl><type><name>const</name> <name>char</name> *</type></decl></param>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>newParagraph</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// create a png file</comment>
		<expr_stmt><expr><name>d</name>.<call><name>writeImage</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><name>dir</name></expr></argument>,<argument><expr><name>relPath</name></expr></argument>,<argument><expr><name>fileName</name></expr></argument>,<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="line">// display the file</comment>
		<expr_stmt><expr><name>t</name> &lt;&lt; "{" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; "\\par\\pard \\qc {\\field\\flddirty {\\*\\fldinst INCLUDEPICTURE \""</expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; <name>fileName</name> &lt;&lt; ".png\""</expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; " \\\\d \\\\*MERGEFORMAT}{\\fldrslt IMAGE}}\\par" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; "}" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>startPageRef</name><parameter_list>()</parameter_list>
	<block>{
		<expr_stmt><expr><name>t</name> &lt;&lt; " ("</expr>;</expr_stmt>
		<expr_stmt><expr><call><name>startEmphasis</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>endPageRef</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type><name>clname</name></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>anchor</name></decl></param>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>QCString</name></type> <name>ref</name></decl>;</decl_stmt>
		<if>if <condition>(<expr><name>clname</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>ref</name>+=<name>clname</name></expr>;</expr_stmt>
		}</block></then></if>
		<if>if <condition>(<expr><name>anchor</name></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><name>ref</name>+='_'</expr>;</expr_stmt>
			<expr_stmt><expr><name>ref</name>+=<name>anchor</name></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><call><name>writeRTFReference</name><argument_list>(<argument><expr><name>ref</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>endEmphasis</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; ")"</expr>;</expr_stmt>
	}</block></function>
    <function><type><name>void</name></type> <name>startQuickIndices</name><parameter_list>()</parameter_list> <block>{}</block></function>
    <function><type><name>void</name></type> <name>endQuickIndices</name><parameter_list>()</parameter_list> <block>{}</block></function>
    <function><type><name>void</name></type> <name>writeQuickLinks</name><parameter_list>(<param><decl><type><name>bool</name></type></decl></param>,<param><decl><type><name>HighlightedItem</name></type></decl></param>)</parameter_list> <block>{}</block></function>
    <function><type><name>void</name></type> <name>startContents</name><parameter_list>()</parameter_list> <block>{}</block></function>
    <function><type><name>void</name></type> <name>endContents</name><parameter_list>()</parameter_list> <block>{}</block></function>
	<function><type><name>void</name></type> <name>writeNonBreakableSpace</name><parameter_list>(<param><decl><type><name>int</name></type></decl></param>)</parameter_list>
	<block>{
		<expr_stmt><expr><name>t</name> &lt;&lt; "\\~ "</expr>;</expr_stmt>
	}</block></function>
	
	<function><type><name>void</name></type> <name>startDescTable</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (startDescTable) }"    &lt;&lt; endl</argument>)</argument_list></macro>
			<comment type="line">//t &lt;&lt; "{" &lt;&lt; endl;</comment>
			<comment type="line">//incrementIndentLevel();</comment>
			<comment type="line">//t &lt;&lt; rtf_Style_Reset &lt;&lt; rtf_CList_DepthStyle();</comment>
	}</block></function>
	<function><type><name>void</name></type> <name>endDescTable</name><parameter_list>()</parameter_list>
	<block>{
		<comment type="line">//decrementIndentLevel();</comment>
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (endDescTable)}"      &lt;&lt; endl</argument>)</argument_list></macro>
			<comment type="line">//t &lt;&lt; "}" &lt;&lt; endl;</comment>
			<comment type="line">//t &lt;&lt; rtf_Style_Reset &lt;&lt; styleStack.top();</comment>
	}</block></function>
	<function><type><name>void</name></type> <name>startDescTableTitle</name><parameter_list>()</parameter_list>
	<block>{
		<comment type="line">//t &lt;&lt; rtf_BList_DepthStyle() &lt;&lt; endl;</comment>
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (startDescTableTitle) }"    &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><call><name>startBold</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>startEmphasis</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>endDescTableTitle</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (endDescTableTitle) }"    &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><call><name>endEmphasis</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>endBold</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; "  "</expr>;</expr_stmt>
	}</block></function>

	<function><type><name>void</name></type> <name>startDescTableData</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (startDescTableData) }"    &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><name>m_omitParagraph</name> = <name>FALSE</name></expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>endDescTableData</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (endDescTableData) }"    &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><call><name>newParagraph</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>m_omitParagraph</name> = <name>TRUE</name></expr>;</expr_stmt>
	}</block></function>
    
	<function><type><name>void</name></type> <name>startDotGraph</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (startDotGraph)}"    &lt;&lt; endl</argument>)</argument_list></macro>
	}</block></function>
	<function><type><name>void</name></type> <name>endDotGraph</name><parameter_list>(<param><decl><type><name>const</name> <name>DotClassGraph</name> &amp;</type><name>g</name></decl></param>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>newParagraph</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>QCString</name></type> <name>fileName</name> =<init>
			<expr><name>g</name>.<call><name>writeGraph</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><name>BITMAP</name></expr></argument>,<argument><expr><call><name>Config_getString</name><argument_list>(<argument><expr>"RTF_OUTPUT"</expr></argument>)</argument_list></call></expr></argument>,<argument><expr><name>relPath</name></expr></argument>,<argument><expr><name>TRUE</name></expr></argument>,<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// display the file</comment>
		<expr_stmt><expr><name>t</name> &lt;&lt; "{" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; "\\par\\pard \\qc {\\field\\flddirty {\\*\\fldinst INCLUDEPICTURE \""</expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; <name>fileName</name> &lt;&lt; "." &lt;&lt; <call><name>Config_getEnum</name><argument_list>(<argument><expr>"DOT_IMAGE_FORMAT"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; "\" \\\\d \\\\*MERGEFORMAT}{\\fldrslt IMAGE}}\\par" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; "}" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>newParagraph</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (endDotGraph)}"    &lt;&lt; endl</argument>)</argument_list></macro>
	}</block></function>

	<function><type><name>void</name></type> <name>startInclDepGraph</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (startInclDepGraph)}"    &lt;&lt; endl</argument>)</argument_list></macro>
	}</block></function>
	<function><type><name>void</name></type> <name>endInclDepGraph</name><parameter_list>(<param><decl><type><name>const</name> <name>DotInclDepGraph</name> &amp;</type><name>g</name></decl></param>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>newParagraph</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>QCString</name></type> <name>fileName</name> =<init> <expr><name>g</name>.<call><name>writeGraph</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><name>BITMAP</name></expr></argument>,<argument><expr><call><name>Config_getString</name><argument_list>(<argument><expr>"RTF_OUTPUT"</expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name>relPath</name></expr></argument>,<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// display the file</comment>
		<expr_stmt><expr><name>t</name> &lt;&lt; "{" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; "\\par\\pard \\qc {\\field\\flddirty {\\*\\fldinst INCLUDEPICTURE \""</expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; <name>fileName</name> &lt;&lt; "." &lt;&lt; <call><name>Config_getEnum</name><argument_list>(<argument><expr>"DOT_IMAGE_FORMAT"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; "\" \\\\d \\\\*MERGEFORMAT}{\\fldrslt IMAGE}}\\par" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; "}" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (endInclDepGraph)}"    &lt;&lt; endl</argument>)</argument_list></macro>
	}</block></function>
	<function><type><name>void</name></type> <name>startGroupCollaboration</name><parameter_list>()</parameter_list> <block>{ }</block></function>
	<function><type><name>void</name></type> <name>endGroupCollaboration</name><parameter_list>(<param><decl><type><name>const</name> <name>DotGroupCollaboration</name> &amp;</type><name>g</name></decl></param>)</parameter_list> <block>{ }</block></function>
	<function><type><name>void</name></type> <name>startCallGraph</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (startCallGraph)}"    &lt;&lt; endl</argument>)</argument_list></macro>
	}</block></function>
	<function><type><name>void</name></type> <name>endCallGraph</name><parameter_list>(<param><decl><type><name>const</name> <name>DotCallGraph</name> &amp;</type><name>g</name></decl></param>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>newParagraph</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>QCString</name></type> <name>fileName</name> =<init> <expr><name>g</name>.<call><name>writeGraph</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><name>BITMAP</name></expr></argument>,<argument><expr><call><name>Config_getString</name><argument_list>(<argument><expr>"RTF_OUTPUT"</expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name>relPath</name></expr></argument>,<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// display the file</comment>
		<expr_stmt><expr><name>t</name> &lt;&lt; "{" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; "\\par\\pard \\qc {\\field\\flddirty {\\*\\fldinst INCLUDEPICTURE \""</expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; <name>fileName</name> &lt;&lt; "." &lt;&lt; <call><name>Config_getEnum</name><argument_list>(<argument><expr>"DOT_IMAGE_FORMAT"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; "\" \\\\d \\\\*MERGEFORMAT}{\\fldrslt IMAGE}}\\par" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; "}" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (endCallGraph)}"    &lt;&lt; endl</argument>)</argument_list></macro>
	}</block></function>
	<function><type><name>void</name></type> <name>startDirDepGraph</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (startDirDepGraph)}"    &lt;&lt; endl</argument>)</argument_list></macro>
	}</block></function>

	<function><type><name>void</name></type> <name>endDirDepGraph</name><parameter_list>(<param><decl><type><name>const</name> <name>DotDirDeps</name> &amp;</type><name>g</name></decl></param>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>newParagraph</name><argument_list>()</argument_list></call></expr>;</expr_stmt>

		<decl_stmt><decl><type><name>QCString</name></type> <name>fileName</name> =<init> <expr><name>g</name>.<call><name>writeGraph</name><argument_list>(<argument><expr><name>t</name></expr></argument>,<argument><expr><name>BITMAP</name></expr></argument>,<argument><expr><call><name>Config_getString</name><argument_list>(<argument><expr>"RTF_OUTPUT"</expr></argument>)</argument_list></call></expr></argument>,
			<argument><expr><name>relPath</name></expr></argument>,<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// display the file</comment>
		<expr_stmt><expr><name>t</name> &lt;&lt; "{" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; "\\par\\pard \\qc {\\field\\flddirty {\\*\\fldinst INCLUDEPICTURE \""</expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; <name>fileName</name> &lt;&lt; "." &lt;&lt; <call><name>Config_getEnum</name><argument_list>(<argument><expr>"DOT_IMAGE_FORMAT"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; "\" \\\\d \\\\*MERGEFORMAT}{\\fldrslt IMAGE}}\\par" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; "}" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (endDirDepGraph)}"    &lt;&lt; endl</argument>)</argument_list></macro>
	}</block></function>
    <function><type><name>void</name></type> <name>writeGraphicalHierarchy</name><parameter_list>(<param><decl><type><name>const</name> <name>DotGfxHierarchyTable</name> &amp;</type></decl></param>)</parameter_list> <block>{}</block></function>

	<function><type><name>void</name></type> <name>startMemberGroupHeader</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>hasHeader</name></decl></param>)</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment startMemberGroupHeader}" &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><name>t</name> &lt;&lt; "{" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>hasHeader</name></expr>)</condition><then> <expr_stmt><expr><call><name>incrementIndentLevel</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
		<expr_stmt><expr><name>t</name> &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <name><name>rtf_Style</name><index>[<expr>"GroupHeader"</expr>]</index></name>-&gt;<name>reference</name></expr>;</expr_stmt>
	}</block></function>

	<function><type><name>void</name></type> <name>endMemberGroupHeader</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment endMemberGroupHeader}" &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><call><name>newParagraph</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <call><name>rtf_CList_DepthStyle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>startMemberGroupDocs</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment startMemberGroupDocs}" &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><call><name>startEmphasis</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>endMemberGroupDocs</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment endMemberGroupDocs}" &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><call><name>endEmphasis</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>newParagraph</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>startMemberGroup</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment startMemberGroup}" &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><name>t</name> &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <call><name>rtf_BList_DepthStyle</name><argument_list>()</argument_list></call> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>endMemberGroup</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>hasHeader</name></decl></param>)</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment endMemberGroup}" &lt;&lt; endl</argument>)</argument_list></macro>
			<if>if <condition>(<expr><name>hasHeader</name></expr>)</condition><then> <expr_stmt><expr><call><name>decrementIndentLevel</name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
		<expr_stmt><expr><name>t</name> &lt;&lt; "}"</expr>;</expr_stmt>
	}</block></function>
    
	<function><type><name>void</name></type> <name>startTextBlock</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>dense</name></decl></param>)</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment startTextBlock}" &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><name>t</name> &lt;&lt; "{" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; <name>rtf_Style_Reset</name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>dense</name></expr>)</condition><then> <comment type="line">// no spacing between "paragraphs"</comment>
		<block>{
			<expr_stmt><expr><name>t</name> &lt;&lt; <name><name>rtf_Style</name><index>[<expr>"DenseText"</expr>]</index></name>-&gt;<name>reference</name></expr>;</expr_stmt>
		}</block></then>
		<else>else <comment type="line">// some spacing</comment>
		<block>{
			<expr_stmt><expr><name>t</name> &lt;&lt; <name><name>rtf_Style</name><index>[<expr>"BodyText"</expr>]</index></name>-&gt;<name>reference</name></expr>;</expr_stmt>
		}</block></else></if>
	}</block></function>
	<function><type><name>void</name></type> <name>endTextBlock</name><parameter_list>(<param><decl><type><name>bool</name></type></decl></param>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>newParagraph</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment endTextBlock}" &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><name>t</name> &lt;&lt; "}" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
		<comment type="line">//m_omitParagraph = TRUE;</comment>
	}</block></function>
	<function><type><name>void</name></type> <name>lastIndexPage</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt;"{\\comment Beginning Body of RTF Document}\n"</argument>)</argument_list></macro>
			<comment type="line">// end page and setup for rest of document</comment>
			<expr_stmt><expr><name>t</name> &lt;&lt;"\\sect \\sbkpage \\pgndec \\pgnrestart\n"</expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt;"\\sect \\sectd \\sbknone\n"</expr>;</expr_stmt>

		<comment type="line">// set new footer with arabic numbers</comment>
		<expr_stmt><expr><name>t</name> &lt;&lt;"{\\footer "&lt;&lt; <name><name>rtf_Style</name><index>[<expr>"Footer"</expr>]</index></name>-&gt;<name>reference</name> &lt;&lt; "{\\chpgn}}\n"</expr>;</expr_stmt>
		<comment type="line">//t &lt;&lt; rtf_Style["Heading1"]-&gt;reference &lt;&lt; "\n";</comment>

	}</block></function>

    <function><type><name>void</name></type> <name>startMemberDocPrefixItem</name><parameter_list>()</parameter_list> <block>{}</block></function>
    <function><type><name>void</name></type> <name>endMemberDocPrefixItem</name><parameter_list>()</parameter_list> <block>{}</block></function>
    <function><type><name>void</name></type> <name>startMemberDocName</name><parameter_list>(<param><decl><type><name>bool</name></type></decl></param>)</parameter_list> <block>{}</block></function>
    <function><type><name>void</name></type> <name>endMemberDocName</name><parameter_list>()</parameter_list> <block>{}</block></function>
	<function><type><name>void</name></type> <name>startParameterType</name><parameter_list>(<param><decl><type><name>bool</name></type> <name>first</name></decl></param>,<param><decl><type><name>const</name> <name>char</name> *</type><name>key</name></decl></param>)</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (startParameterList)}"    &lt;&lt; endl</argument>)</argument_list></macro>
			<if>if <condition>(<expr>!<name>first</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>t</name> &lt;&lt; " " &lt;&lt; <name>key</name> &lt;&lt; " "</expr>;</expr_stmt>
			}</block></then></if>
	}</block></function>
    <function><type><name>void</name></type> <name>endParameterType</name><parameter_list>()</parameter_list> <block>{}</block></function>
    <function><type><name>void</name></type> <name>startParameterName</name><parameter_list>(<param><decl><type><name>bool</name></type></decl></param>)</parameter_list> <block>{}</block></function>
    <function><type><name>void</name></type> <name>endParameterName</name><parameter_list>(<param><decl><type><name>bool</name></type></decl></param>,<param><decl><type><name>bool</name></type></decl></param>,<param><decl><type><name>bool</name></type></decl></param>)</parameter_list> <block>{}</block></function>
    <function><type><name>void</name></type> <name>startParameterList</name><parameter_list>(<param><decl><type><name>bool</name></type></decl></param>)</parameter_list> <block>{}</block></function>
    <function><type><name>void</name></type> <name>endParameterList</name><parameter_list>()</parameter_list> <block>{}</block></function>

	<function><type><name>void</name></type> <name>startConstraintList</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type><name>header</name></decl></param>)</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (startConstraintList)}"    &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><name>t</name> &lt;&lt; "{"</expr>;</expr_stmt> <comment type="line">// ends at endConstraintList</comment>
		<expr_stmt><expr><name>t</name> &lt;&lt; "{"</expr>;</expr_stmt> 
		<expr_stmt><expr><call><name>startBold</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>newParagraph</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>docify</name><argument_list>(<argument><expr><name>header</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>endBold</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; "}"</expr>;</expr_stmt>
		<expr_stmt><expr><call><name>newParagraph</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>incrementIndentLevel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; <name>rtf_Style_Reset</name> &lt;&lt; <call><name>rtf_DList_DepthStyle</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>

	<function><type><name>void</name></type> <name>startConstraintParam</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (startConstraintParam)}"    &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><call><name>startEmphasis</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>endConstraintParam</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (endConstraintParam)}"    &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><call><name>endEmphasis</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; " : "</expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>startConstraintType</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (startConstraintType)}"    &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><call><name>startEmphasis</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>endConstraintType</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (endConstraintType)}"    &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><call><name>endEmphasis</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; " "</expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>startConstraintDocs</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (startConstraintDocs)}"    &lt;&lt; endl</argument>)</argument_list></macro>
	}</block></function>

	<function><type><name>void</name></type> <name>endConstraintDocs</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (endConstraintDocs)}"    &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><call><name>newParagraph</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>endConstraintList</name><parameter_list>()</parameter_list>
	<block>{
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (endConstraintList)}"    &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><call><name>newParagraph</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>decrementIndentLevel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>m_omitParagraph</name> = <name>TRUE</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; "}"</expr>;</expr_stmt>
	}</block></function>


    <function><type><name>void</name></type> <name>startFontClass</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type></decl></param>)</parameter_list> <block>{}</block></function>
    <function><type><name>void</name></type> <name>endFontClass</name><parameter_list>()</parameter_list> <block>{}</block></function>

    <function><type><name>void</name></type> <name>writeCodeAnchor</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type></decl></param>)</parameter_list> <block>{}</block></function>
    <function><type><name>void</name></type> <name>linkableSymbol</name><parameter_list>(<param><decl><type><name>int</name></type></decl></param>,<param><decl><type><name>const</name> <name>char</name> *</type></decl></param>,<param><decl><type><name>Definition</name> *</type></decl></param>,<param><decl><type><name>Definition</name> *</type></decl></param>)</parameter_list> <block>{}</block></function>

	<function><type><name>static</name> <name>bool</name></type> <name>preProcessFileInplace</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type><name>path</name></decl></param>,<param><decl><type><name>const</name> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list>
	<block>{
		<function_decl><type><name>QDir</name></type> <name>d</name><parameter_list>(<param><decl><type><name>path</name></type></decl></param>)</parameter_list>;</function_decl>
		<comment type="line">// store the original directory</comment>
		<if>if <condition>(<expr>!<name>d</name>.<call><name>exists</name><argument_list>()</argument_list></call></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr>"Error: Output dir %s does not exist!\n"</expr></argument>,<argument><expr><name>path</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>FALSE</name></expr>;</return>
		}</block></then></if>
		<decl_stmt><decl><type><name>QCString</name></type> <name>oldDir</name> =<init> <expr><call><name>convertToQCString</name><argument_list>(<argument><expr><call><name><name>QDir</name>::<name>currentDirPath</name></name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

		<comment type="line">// go to the html output directory (i.e. path)</comment>
		<expr_stmt><expr><call><name><name>QDir</name>::<name>setCurrent</name></name><argument_list>(<argument><expr><name>d</name>.<call><name>absPath</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<decl_stmt><decl><type><name>QDir</name></type> <name>thisDir</name></decl>;</decl_stmt>

		<decl_stmt><decl><type><name>QCString</name></type> <name>combinedName</name> =<init> <expr>(<name>QCString</name>)<name>path</name>+"/combined.rtf"</expr></init></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>QCString</name></type> <name>mainRTFName</name>  =<init> <expr>(<name>QCString</name>)<name>path</name>+"/"+<name>name</name></expr></init></decl>;</decl_stmt>

		<function_decl><type><name>QFile</name></type> <name>outf</name><parameter_list>(<param><decl><type><name>combinedName</name></type></decl></param>)</parameter_list>;</function_decl>
		<if>if <condition>(<expr>!<name>outf</name>.<call><name>open</name><argument_list>(<argument><expr><name>IO_WriteOnly</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr>"Failed to open %s for writing!\n"</expr></argument>,<argument><expr><name>combinedName</name>.<call><name>data</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>FALSE</name></expr>;</return>
		}</block></then></if>
		<decl_stmt><decl><type><name>QTextStream</name></type> <name>outt</name><argument_list>(<argument><expr>&amp;<name>outf</name></expr></argument>)</argument_list></decl>;</decl_stmt>
		<expr_stmt><expr><name>outt</name>.<call><name>setEncoding</name><argument_list>(<argument><expr><name><name>QTextStream</name>::<name>UnicodeUTF8</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if>if <condition>(<expr>!<call><name>PreProcessFile</name><argument_list>(<argument><expr><name>thisDir</name></expr></argument>,<argument><expr><name>mainRTFName</name></expr></argument>,<argument><expr><name>outt</name></expr></argument>)</argument_list></call></expr>)</condition><then>
		<block>{
			<comment type="line">// it failed, remove the temp file</comment>
			<expr_stmt><expr><name>outf</name>.<call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>thisDir</name>.<call><name>remove</name><argument_list>(<argument><expr><name>combinedName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name><name>QDir</name>::<name>setCurrent</name></name><argument_list>(<argument><expr><name>oldDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>FALSE</name></expr>;</return>
		}</block></then></if>

		<comment type="line">// everything worked, move the files</comment>
		<expr_stmt><expr><name>outf</name>.<call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>thisDir</name>.<call><name>remove</name><argument_list>(<argument><expr><name>mainRTFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>thisDir</name>.<call><name>rename</name><argument_list>(<argument><expr><name>combinedName</name></expr></argument>,<argument><expr><name>mainRTFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>testRTFOutput</name><argument_list>(<argument><expr><name>mainRTFName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name><name>QDir</name>::<name>setCurrent</name></name><argument_list>(<argument><expr><name>oldDir</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>TRUE</name></expr>;</return>
	}</block></function>
    
  </public><private>private:
    <constructor_decl><name>RTFGenerator</name><parameter_list>(<param><decl><type><name>const</name> <name>RTFGenerator</name> &amp;</type></decl></param>)</parameter_list>;</constructor_decl>
    <function_decl><type><name>RTFGenerator</name> &amp;</type><name>operator=</name><parameter_list>(<param><decl><type><name>const</name> <name>RTFGenerator</name> &amp;</type></decl></param>)</parameter_list>;</function_decl>

	<function><type><name>const</name> <name>char</name> *</type><name>rtf_BList_DepthStyle</name><parameter_list>()</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>QCString</name></type> <name>n</name>=<init><expr><call><name>makeIndexName</name><argument_list>(<argument><expr>"ListBullet"</expr></argument>,<argument><expr><name>m_listLevel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><name><name>rtf_Style</name><index>[<expr><name>n</name></expr>]</index></name>-&gt;<name>reference</name></expr>;</return>
	}</block></function>
	<function><type><name>const</name> <name>char</name> *</type><name>rtf_CList_DepthStyle</name><parameter_list>()</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>QCString</name></type> <name>n</name>=<init><expr><call><name>makeIndexName</name><argument_list>(<argument><expr>"ListContinue"</expr></argument>,<argument><expr><name>m_listLevel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><name><name>rtf_Style</name><index>[<expr><name>n</name></expr>]</index></name>-&gt;<name>reference</name></expr>;</return>
	}</block></function>

	<function><type><name>const</name> <name>char</name> *</type><name>rtf_EList_DepthStyle</name><parameter_list>()</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>QCString</name></type> <name>n</name>=<init><expr><call><name>makeIndexName</name><argument_list>(<argument><expr>"ListEnum"</expr></argument>,<argument><expr><name>m_listLevel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><name><name>rtf_Style</name><index>[<expr><name>n</name></expr>]</index></name>-&gt;<name>reference</name></expr>;</return>
	}</block></function>
	<function><type><name>const</name> <name>char</name> *</type><name>rtf_LCList_DepthStyle</name><parameter_list>()</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>QCString</name></type> <name>n</name>=<init><expr><call><name>makeIndexName</name><argument_list>(<argument><expr>"LatexTOC"</expr></argument>,<argument><expr><name>m_listLevel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><name><name>rtf_Style</name><index>[<expr><name>n</name></expr>]</index></name>-&gt;<name>reference</name></expr>;</return>
	}</block></function>
	<function><type><name>const</name> <name>char</name> *</type><name>rtf_DList_DepthStyle</name><parameter_list>()</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>QCString</name></type> <name>n</name>=<init><expr><call><name>makeIndexName</name><argument_list>(<argument><expr>"DescContinue"</expr></argument>,<argument><expr><name>m_listLevel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><name><name>rtf_Style</name><index>[<expr><name>n</name></expr>]</index></name>-&gt;<name>reference</name></expr>;</return>
	}</block></function>

	<function><type><name>const</name> <name>char</name> *</type><name>rtf_Code_DepthStyle</name><parameter_list>()</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>QCString</name></type> <name>n</name>=<init><expr><call><name>makeIndexName</name><argument_list>(<argument><expr>"CodeExample"</expr></argument>,<argument><expr><name>m_listLevel</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
		<return>return <expr><name><name>rtf_Style</name><index>[<expr><name>n</name></expr>]</index></name>-&gt;<name>reference</name></expr>;</return>
	}</block></function>
	<function><type><name>void</name></type> <name>incrementIndentLevel</name><parameter_list>()</parameter_list>
	<block>{
		<expr_stmt><expr><name>m_listLevel</name>++</expr>;</expr_stmt>
		<if>if <condition>(<expr><name>m_listLevel</name>&gt;<name>rtf_maxIndentLevels</name>-1</expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name>warn_cont</name><argument_list>(<argument><expr>"Warning: Maximum indent level (%d) exceeded while generating RTF output!\n"</expr></argument>,<argument><expr><name>rtf_maxIndentLevels</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>m_listLevel</name>=<name>rtf_maxIndentLevels</name>-1</expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>
	<function><type><name>void</name></type> <name>decrementIndentLevel</name><parameter_list>()</parameter_list>
	<block>{
		<expr_stmt><expr><name>m_listLevel</name>--</expr>;</expr_stmt>
		<if>if <condition>(<expr><name>m_listLevel</name>&lt;0</expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name>warn_cont</name><argument_list>(<argument><expr>"Warning: Negative indent level while generating RTF output!\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>m_listLevel</name>=0</expr>;</expr_stmt>
		}</block></then></if>
	}</block></function>
    <decl_stmt><decl><type><name>int</name></type>  <name>col</name></decl>;</decl_stmt>

    <decl_stmt><decl><type><name>bool</name></type> <name>m_bstartedBody</name></decl>;</decl_stmt>  <comment type="line">// has startbody been called yet?</comment>
    <decl_stmt><decl><type><name>int</name></type>  <name>m_listLevel</name></decl>;</decl_stmt> <comment type="line">// // RTF does not really have a addative indent...manually set list level.</comment>
    <decl_stmt><decl><type><name>bool</name></type> <name>m_omitParagraph</name></decl>;</decl_stmt> <comment type="line">// should a the next paragraph command be ignored?</comment>
    <decl_stmt><decl><type><name>int</name></type>  <name>m_numCols</name></decl>;</decl_stmt> <comment type="line">// number of columns in a table</comment>
    <decl_stmt><decl><type><name>QCString</name></type> <name>relPath</name></decl>;</decl_stmt>

    <function><type><name>void</name></type> <name>beginRTFDocument</name><parameter_list>()</parameter_list>
<block>{
  <comment type="block">/* all the included RTF files should begin with the
   * same header
   */</comment>
  <expr_stmt><expr><name>t</name> &lt;&lt;"{\\rtf1\\ansi\\ansicpg" &lt;&lt; <name>theTranslator</name>-&gt;<call><name>trRTFansicp</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>t</name> &lt;&lt;"\\uc1 \\deff0\\deflang1033\\deflangfe1033\n"</expr>;</expr_stmt>

  <macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt;"{\\comment Begining font list}\n"</argument>)</argument_list></macro>
  <expr_stmt><expr><name>t</name> &lt;&lt;"{\\fonttbl "</expr>;</expr_stmt>
  <expr_stmt><expr><name>t</name> &lt;&lt;"{\\f0\\froman\\fcharset" &lt;&lt; <name>theTranslator</name>-&gt;<call><name>trRTFCharSet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>t</name> &lt;&lt;"\\fprq2{\\*\\panose 02020603050405020304}Times New Roman;}\n"</expr>;</expr_stmt>
  <expr_stmt><expr><name>t</name> &lt;&lt;"{\\f1\\fswiss\\fcharset" &lt;&lt; <name>theTranslator</name>-&gt;<call><name>trRTFCharSet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>t</name> &lt;&lt;"\\fprq2{\\*\\panose 020b0604020202020204}Arial;}\n"</expr>;</expr_stmt>
  <expr_stmt><expr><name>t</name> &lt;&lt;"{\\f2\\fmodern\\fcharset" &lt;&lt; <name>theTranslator</name>-&gt;<call><name>trRTFCharSet</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><name>t</name> &lt;&lt;"\\fprq1{\\*\\panose 02070309020205020404}Courier New;}\n"</expr>;</expr_stmt>
  <expr_stmt><expr><name>t</name> &lt;&lt;"{\\f3\\froman\\fcharset2\\fprq2{\\*\\panose 05050102010706020507}Symbol;}\n"</expr>;</expr_stmt>
  <expr_stmt><expr><name>t</name> &lt;&lt;"}\n"</expr>;</expr_stmt>
  <macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt;"{\\comment begin colors}\n"</argument>)</argument_list></macro>
  <expr_stmt><expr><name>t</name> &lt;&lt;"{\\colortbl;"</expr>;</expr_stmt>
  <expr_stmt><expr><name>t</name> &lt;&lt;"\\red0\\green0\\blue0;"</expr>;</expr_stmt>
  <expr_stmt><expr><name>t</name> &lt;&lt;"\\red0\\green0\\blue255;"</expr>;</expr_stmt>
  <expr_stmt><expr><name>t</name> &lt;&lt;"\\red0\\green255\\blue255;"</expr>;</expr_stmt>
  <expr_stmt><expr><name>t</name> &lt;&lt;"\\red0\\green255\\blue0;"</expr>;</expr_stmt>
  <expr_stmt><expr><name>t</name> &lt;&lt;"\\red255\\green0\\blue255;"</expr>;</expr_stmt>
  <expr_stmt><expr><name>t</name> &lt;&lt;"\\red255\\green0\\blue0;"</expr>;</expr_stmt>
  <expr_stmt><expr><name>t</name> &lt;&lt;"\\red255\\green255\\blue0;"</expr>;</expr_stmt>
  <expr_stmt><expr><name>t</name> &lt;&lt;"\\red255\\green255\\blue255;"</expr>;</expr_stmt>
  <expr_stmt><expr><name>t</name> &lt;&lt;"\\red0\\green0\\blue128;"</expr>;</expr_stmt>
  <expr_stmt><expr><name>t</name> &lt;&lt;"\\red0\\green128\\blue128;"</expr>;</expr_stmt>
  <expr_stmt><expr><name>t</name> &lt;&lt;"\\red0\\green128\\blue0;"</expr>;</expr_stmt>
  <expr_stmt><expr><name>t</name> &lt;&lt;"\\red128\\green0\\blue128;"</expr>;</expr_stmt>
  <expr_stmt><expr><name>t</name> &lt;&lt;"\\red128\\green0\\blue0;"</expr>;</expr_stmt>
  <expr_stmt><expr><name>t</name> &lt;&lt;"\\red128\\green128\\blue0;"</expr>;</expr_stmt>
  <expr_stmt><expr><name>t</name> &lt;&lt;"\\red128\\green128\\blue128;"</expr>;</expr_stmt>
  <expr_stmt><expr><name>t</name> &lt;&lt;"\\red192\\green192\\blue192;}" &lt;&lt; <name>endl</name></expr>;</expr_stmt>

  <macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt;"{\\comment Beginning style list}\n"</argument>)</argument_list></macro>
  <expr_stmt><expr><name>t</name> &lt;&lt;"{\\stylesheet\n"</expr>;</expr_stmt>
  <expr_stmt><expr><name>t</name> &lt;&lt;"{\\widctlpar\\adjustright \\fs20\\cgrid \\snext0 Normal;}\n"</expr>;</expr_stmt>

  <comment type="line">// sort styles ascending by \s-number via an intermediate QArray</comment>
  <decl_stmt><decl><type><name><name>QArray</name><argument_list>&lt;<argument><name>const</name> <name>StyleData</name>*</argument>&gt;</argument_list></name></type> <name>array</name><argument_list>(<argument><expr>128</expr></argument>)</argument_list></decl>;</decl_stmt>
  <expr_stmt><expr><name>array</name>.<call><name>fill</name><argument_list>(<argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <function_decl><type><name><name>QDictIterator</name><argument_list>&lt;<argument><name>StyleData</name></argument>&gt;</argument_list></name></type> <name>iter</name><parameter_list>(<param><decl><type><name>rtf_Style</name></type></decl></param>)</parameter_list>;</function_decl>
  <decl_stmt><decl><type><name>const</name> <name>StyleData</name>*</type> <name>style</name></decl>;</decl_stmt>
  <for>for(<init>;</init> <condition><expr>(<name>style</name> = <name>iter</name>.<call><name>current</name><argument_list>()</argument_list></call>)</expr>;</condition> <incr><expr>++<name>iter</name></expr></incr>)
  <block>{
    <decl_stmt><decl><type><name>unsigned</name></type> <name>index</name> =<init> <expr><name>style</name>-&gt;<name>index</name></expr></init></decl>;</decl_stmt>
    <decl_stmt><decl><type><name>unsigned</name></type> <name>size</name> =<init> <expr><name>array</name>.<call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>index</name> &gt;= <name>size</name></expr>)</condition><then>
    <block>{
      <comment type="line">// +1 to add at least one element, then align up to multiple of 8</comment>
      <expr_stmt><expr><name>array</name>.<call><name>resize</name><argument_list>(<argument><expr>(<name>index</name> + 1 + 7) &amp; ~7</expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>array</name>.<call><name>fill</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>ASSERT</name><argument_list>(<argument><expr><name>index</name> &lt; <name>array</name>.<call><name>size</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <if>if <condition>(<expr><name>array</name>.<call><name>at</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call> != 0</expr>)</condition><then>
    <block>{
      <decl_stmt><decl><type><name>QCString</name></type> <name>key</name><argument_list>(<argument><expr><call><name>convertToQCString</name><argument_list>(<argument><expr><name>iter</name>.<call><name>currentKey</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
      <expr_stmt><expr><call><name>msg</name><argument_list>(<argument><expr>"Style '%s' redefines \\s%d.\n"</expr></argument>, <argument><expr><name>key</name>.<call><name>data</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>index</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then></if>
    <expr_stmt><expr><name>array</name>.<call><name>at</name><argument_list>(<argument><expr><name>index</name></expr></argument>)</argument_list></call> = <name>style</name></expr>;</expr_stmt>
  }</block></for>

  <comment type="line">// write array elements</comment>
  <decl_stmt><decl><type><name>unsigned</name></type> <name>size</name> =<init> <expr><name>array</name>.<call><name>size</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
  <for>for(<init><decl><type><name>unsigned</name></type> <name>i</name> =<init> <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <name>size</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
  <block>{
    <decl_stmt><decl><type><name>const</name> <name>StyleData</name>*</type> <name>style</name> =<init> <expr><name>array</name>.<call><name>at</name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
    <if>if <condition>(<expr><name>style</name> != 0</expr>)</condition><then>
      <expr_stmt><expr><name>t</name> &lt;&lt;"{" &lt;&lt; <name>style</name>-&gt;<name>reference</name> &lt;&lt; <name>style</name>-&gt;<name>definition</name> &lt;&lt; ";}\n"</expr>;</expr_stmt></then></if>
  }</block></for>

  <expr_stmt><expr><name>t</name> &lt;&lt;"}" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
  <comment type="line">// this comment is needed for postprocessing!</comment>
  <expr_stmt><expr><name>t</name> &lt;&lt;"{\\comment begin body}" &lt;&lt; <name>endl</name></expr>;</expr_stmt>

}</block></function>

	<function><type><name>void</name></type> <name>beginRTFChapter</name><parameter_list>()</parameter_list>
	<block>{
		<expr_stmt><expr><name>t</name> &lt;&lt;"\n"</expr>;</expr_stmt>
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment BeginRTFChapter}\n"</argument>)</argument_list></macro>
			<expr_stmt><expr><name>t</name> &lt;&lt; <name>rtf_Style_Reset</name></expr>;</expr_stmt>

		<comment type="line">// if we are compact, no extra page breaks...</comment>
		<if>if <condition>(<expr><call><name>Config_getBool</name><argument_list>(<argument><expr>"COMPACT_RTF"</expr></argument>)</argument_list></call></expr>)</condition><then>
		<block>{
			<comment type="line">//      t &lt;&lt;"\\sect\\sectd\\sbknone\n";</comment>
			<expr_stmt><expr><name>t</name> &lt;&lt;"\\sect\\sbknone\n"</expr>;</expr_stmt>
			<expr_stmt><expr><call><name>rtfwriteRuler_thick</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else>else
			<expr_stmt><expr><name>t</name> &lt;&lt;"\\sect\\sbkpage\n"</expr>;</expr_stmt></else></if>
		<comment type="line">//t &lt;&lt;"\\sect\\sectd\\sbkpage\n";</comment>

		<expr_stmt><expr><name>t</name> &lt;&lt; <name><name>rtf_Style</name><index>[<expr>"Heading1"</expr>]</index></name>-&gt;<name>reference</name> &lt;&lt; "\n"</expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>beginRTFSection</name><parameter_list>()</parameter_list>
	<block>{
		<expr_stmt><expr><name>t</name> &lt;&lt;"\n"</expr>;</expr_stmt>
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment BeginRTFSection}\n"</argument>)</argument_list></macro>
			<expr_stmt><expr><name>t</name> &lt;&lt; <name>rtf_Style_Reset</name></expr>;</expr_stmt>

		<comment type="line">// if we are compact, no extra page breaks...</comment>
		<if>if <condition>(<expr><call><name>Config_getBool</name><argument_list>(<argument><expr>"COMPACT_RTF"</expr></argument>)</argument_list></call></expr>)</condition><then>
		<block>{
			<comment type="line">//      t &lt;&lt;"\\sect\\sectd\\sbknone\n";</comment>
			<expr_stmt><expr><name>t</name> &lt;&lt;"\\sect\\sbknone\n"</expr>;</expr_stmt>
			<expr_stmt><expr><call><name>rtfwriteRuler_emboss</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		}</block></then>
		<else>else
			<expr_stmt><expr><name>t</name> &lt;&lt;"\\sect\\sbkpage\n"</expr>;</expr_stmt></else></if>
		<comment type="line">//t &lt;&lt;"\\sect\\sectd\\sbkpage\n";</comment>

		<expr_stmt><expr><name>t</name> &lt;&lt; <name><name>rtf_Style</name><index>[<expr>"Heading2"</expr>]</index></name>-&gt;<name>reference</name> &lt;&lt; "\n"</expr>;</expr_stmt>
	}</block></function>
	<function><type><name>void</name></type> <name>rtfwriteRuler_doubleline</name><parameter_list>()</parameter_list>
	<block>{ 
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (rtfwriteRuler_doubleline)}"    &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><name>t</name> &lt;&lt; "{\\pard\\widctlpar\\brdrb\\brdrdb\\brdrw15\\brsp20 \\adjustright \\par}" &lt;&lt; <name>endl</name></expr>;</expr_stmt> 
	}</block></function>
	<function><type><name>void</name></type> <name>rtfwriteRuler_emboss</name><parameter_list>()</parameter_list> 
	<block>{ 
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (rtfwriteRuler_emboss)}"    &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><name>t</name> &lt;&lt; "{\\pard\\widctlpar\\brdrb\\brdremboss\\brdrw15\\brsp20 \\adjustright \\par}" &lt;&lt; <name>endl</name></expr>;</expr_stmt> 
	}</block></function>
	<function><type><name>void</name></type> <name>rtfwriteRuler_thick</name><parameter_list>()</parameter_list> 
	<block>{ 
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (rtfwriteRuler_thick)}"    &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><name>t</name> &lt;&lt; "{\\pard\\widctlpar\\brdrb\\brdrs\\brdrw75\\brsp20 \\adjustright \\par}" &lt;&lt; <name>endl</name></expr>;</expr_stmt> 
	}</block></function>
	<function><type><name>void</name></type> <name>rtfwriteRuler_thin</name><parameter_list>()</parameter_list> 
	<block>{ 
		<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment (rtfwriteRuler_thin)}"    &lt;&lt; endl</argument>)</argument_list></macro>
			<expr_stmt><expr><name>t</name> &lt;&lt; "{\\pard\\widctlpar\\brdrb\\brdrs\\brdrw5\\brsp20 \\adjustright \\par}" &lt;&lt; <name>endl</name></expr>;</expr_stmt> 
	}</block></function>
	<function><type><name>void</name></type> <name>writeRTFReference</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type><name>label</name></decl></param>)</parameter_list>
	<block>{
		<expr_stmt><expr><name>t</name> &lt;&lt; "{\\field\\fldedit {\\*\\fldinst PAGEREF "</expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; <call><name>rtfFormatBmkStr</name><argument_list>(<argument><expr><name>label</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>t</name> &lt;&lt; " \\\\*MERGEFORMAT}{\\fldrslt pagenum}}"</expr>;</expr_stmt>
	}</block></function>
    <comment type="line">//char *getMultiByte(int c);</comment>
</private>}</block>;</class>

<function><type><name>static</name> <name>QCString</name></type> <name>dateToRTFDateString</name><parameter_list>()</parameter_list>
<block>{
	<decl_stmt><decl><type><name>const</name> <name>QDateTime</name> &amp;</type><name>d</name> =<init> <expr><call><name><name>QDateTime</name>::<name>currentDateTime</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>QCString</name></type> <name>result</name></decl>;</decl_stmt>
	<expr_stmt><expr><name>result</name>.<call><name>sprintf</name><argument_list>(<argument><expr>"\\yr%d\\mo%d\\dy%d\\hr%d\\min%d\\sec%d"</expr></argument>,
		<argument><expr><name>d</name>.<call><name>date</name><argument_list>()</argument_list></call>.<call><name>year</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>d</name>.<call><name>date</name><argument_list>()</argument_list></call>.<call><name>month</name><argument_list>()</argument_list></call></expr></argument>, <argument><expr><name>d</name>.<call><name>date</name><argument_list>()</argument_list></call>.<call><name>day</name><argument_list>()</argument_list></call></expr></argument>,
		<argument><expr><name>d</name>.<call><name>time</name><argument_list>()</argument_list></call>.<call><name>hour</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>d</name>.<call><name>time</name><argument_list>()</argument_list></call>.<call><name>minute</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>d</name>.<call><name>time</name><argument_list>()</argument_list></call>.<call><name>second</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>result</name></expr>;</return>
}</block></function> 

<function><type><name>static</name> <name>QCString</name></type> <name>makeIndexName</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type><name>s</name></decl></param>,<param><decl><type><name>int</name></type> <name>i</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>QCString</name></type> <name>result</name>=<init><expr><name>s</name></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>result</name>+=<call>(<name>char</name>)<argument_list>(<argument><expr><name>i</name>+'0'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>result</name></expr>;</return>
}</block></function>

<function><type><name>static</name> <name>bool</name></type> <name>PreProcessFile</name><parameter_list>(<param><decl><type><name>QDir</name> &amp;</type><name>d</name></decl></param>,<param><decl><type><name>QCString</name> &amp;</type><name>infName</name></decl></param>, <param><decl><type><name>QTextStream</name> &amp;</type><name>t</name></decl></param>, <param><decl><type><name>bool</name></type> <name>bIncludeHeader</name></decl></param>)</parameter_list>
<block>{
	<function_decl><type><name>QFile</name></type> <name>f</name><parameter_list>(<param><decl><type><name>infName</name></type></decl></param>)</parameter_list>;</function_decl>
	<if>if <condition>(<expr>!<name>f</name>.<call><name>open</name><argument_list>(<argument><expr><name>IO_ReadOnly</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	<block>{
		<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr>"Error opening rtf file %s for reading\n"</expr></argument>,<argument><expr><name>infName</name>.<call><name>data</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr><name>FALSE</name></expr>;</return>
	}</block></then></if>

	<decl_stmt><decl><type><name>const</name> <name>int</name></type> <name>maxLineLength</name> =<init> <expr>10240</expr></init></decl>;</decl_stmt>
	<function_decl><type><name>static</name> <name>QCString</name></type> <name>lineBuf</name><parameter_list>(<param><decl><type><name>maxLineLength</name></type></decl></param>)</parameter_list>;</function_decl>

	<comment type="line">// scan until find end of header</comment>
	<comment type="line">// this is EXTREEEEEEEMLY brittle.  It works on OUR rtf</comment>
	<comment type="line">// files because the first line before the body</comment>
	<comment type="line">// ALWAYS contains "{\comment begin body}"</comment>
	<do>do
	<block>{
		<if>if <condition>(<expr><name>f</name>.<call><name>readLine</name><argument_list>(<argument><expr><name>lineBuf</name>.<call><name>data</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>maxLineLength</name></expr></argument>)</argument_list></call>==-1</expr>)</condition><then>
		<block>{
			<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr>"ERROR - read error in %s before end of RTF header!\n"</expr></argument>,<argument><expr><name>infName</name>.<call><name>data</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr><name>FALSE</name></expr>;</return>
		}</block></then></if>
		<if>if <condition>(<expr><name>bIncludeHeader</name></expr>)</condition><then> <expr_stmt><expr><name>t</name> &lt;&lt; <name>lineBuf</name></expr>;</expr_stmt></then></if>
	}</block> while <condition>(<expr><name>lineBuf</name>.<call><name>find</name><argument_list>(<argument><expr>"\\comment begin body"</expr></argument>)</argument_list></call>==-1</expr>)</condition>;</do>


	<comment type="line">//while (fgets(buffer,sizeof(buffer),infp) != NULL)</comment>
	<while>while <condition>(<expr><name>f</name>.<call><name>readLine</name><argument_list>(<argument><expr><name>lineBuf</name>.<call><name>data</name><argument_list>()</argument_list></call></expr></argument>,<argument><expr><name>maxLineLength</name></expr></argument>)</argument_list></call>!=-1</expr>)</condition>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>pos</name></decl>;</decl_stmt>
		<if>if <condition>(<expr>(<name>pos</name>=<name>lineBuf</name>.<call><name>find</name><argument_list>(<argument><expr>"INCLUDETEXT"</expr></argument>)</argument_list></call>)!=-1</expr>)</condition><then>
		<block>{
			<decl_stmt><decl><type><name>int</name></type> <name>startNamePos</name>  =<init> <expr><name>lineBuf</name>.<call><name>find</name><argument_list>(<argument><expr>'"'</expr></argument>,<argument><expr><name>pos</name></expr></argument>)</argument_list></call>+1</expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>int</name></type> <name>endNamePos</name>    =<init> <expr><name>lineBuf</name>.<call><name>find</name><argument_list>(<argument><expr>'"'</expr></argument>,<argument><expr><name>startNamePos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<decl_stmt><decl><type><name>QCString</name></type> <name>fileName</name> =<init> <expr><name>lineBuf</name>.<call><name>mid</name><argument_list>(<argument><expr><name>startNamePos</name></expr></argument>,<argument><expr><name>endNamePos</name>-<name>startNamePos</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
			<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment begin include " &lt;&lt; fileName &lt;&lt; "}" &lt;&lt; endl</argument>)</argument_list></macro>
				<if>if <condition>(<expr>!<call><name>PreProcessFile</name><argument_list>(<argument><expr><name>d</name></expr></argument>,<argument><expr><name>fileName</name></expr></argument>,<argument><expr><name>t</name></expr></argument>,<argument><expr><name>FALSE</name></expr></argument>)</argument_list></call></expr>)</condition><then> <return>return <expr><name>FALSE</name></expr>;</return></then></if>
			<macro><name>DBG_RTF</name><argument_list>(<argument>t &lt;&lt; "{\\comment end include " &lt;&lt; fileName &lt;&lt; "}" &lt;&lt; endl</argument>)</argument_list></macro>
		}</block></then>
		<else>else
		<block>{
			<comment type="line">// elaborate hoopla to skip  the final "}" if we didn't include the</comment>
			<comment type="line">// headers</comment>
			<if>if <condition>(<expr>!<name>f</name>.<call><name>atEnd</name><argument_list>()</argument_list></call> || <name>bIncludeHeader</name></expr>)</condition><then>
			<block>{
				<expr_stmt><expr><name>t</name> &lt;&lt; <name>lineBuf</name></expr>;</expr_stmt>
			}</block></then>
			<else>else
			<block>{
				<comment type="line">// null terminate at the last '}'</comment>
				<comment type="line">//char *str = strrchr(buffer,'}');</comment>
				<decl_stmt><decl><type><name>int</name></type> <name>pos</name> =<init> <expr><name>lineBuf</name>.<call><name>findRev</name><argument_list>(<argument><expr>'}'</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

				<if>if <condition>(<expr><name>pos</name> != -1</expr>)</condition><then>
					<expr_stmt><expr><name>lineBuf</name>.<call><name>at</name><argument_list>(<argument><expr><name>pos</name></expr></argument>)</argument_list></call> = '\0'</expr>;</expr_stmt></then>
				<else>else
					<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr>"Strange, the last char was not a '}'\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
				<expr_stmt><expr><name>t</name> &lt;&lt; <name>lineBuf</name></expr>;</expr_stmt>
			}</block></else></if>
		}</block></else></if>
	}</block></while>
	<expr_stmt><expr><name>f</name>.<call><name>close</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<comment type="line">// remove temporary file</comment>
	<expr_stmt><expr><name>d</name>.<call><name>remove</name><argument_list>(<argument><expr><name>infName</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>TRUE</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>testRTFOutput</name><parameter_list>(<param><decl><type><name>const</name> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list>
<block>{
	<decl_stmt><decl><type><name>int</name></type> <name>bcount</name>=<init><expr>0</expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>line</name>=<init><expr>1</expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>c</name></decl>;</decl_stmt>
	<function_decl><type><name>QFile</name></type> <name>f</name><parameter_list>(<param><decl><type><name>name</name></type></decl></param>)</parameter_list>;</function_decl>
	<if>if <condition>(<expr><name>f</name>.<call><name>open</name><argument_list>(<argument><expr><name>IO_ReadOnly</name></expr></argument>)</argument_list></call></expr>)</condition><then>
	<block>{
		<while>while <condition>(<expr>(<name>c</name>=<name>f</name>.<call><name>getch</name><argument_list>()</argument_list></call>)!=-1</expr>)</condition>
		<block>{
			<if>if <condition>(<expr><name>c</name>=='\\'</expr>)</condition><then> <comment type="line">// escape char</comment>
			<block>{
				<expr_stmt><expr><name>c</name>=<name>f</name>.<call><name>getch</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<if>if <condition>(<expr><name>c</name>==-1</expr>)</condition><then> <break>break;</break></then></if>
			}</block></then>
			<else>else <if>if <condition>(<expr><name>c</name>=='{'</expr>)</condition><then> <comment type="line">// open bracket</comment>
			<block>{
				<expr_stmt><expr><name>bcount</name>++</expr>;</expr_stmt>
			}</block></then>
			<else>else <if>if <condition>(<expr><name>c</name>=='}'</expr>)</condition><then> <comment type="line">// close bracket</comment>
			<block>{
				<expr_stmt><expr><name>bcount</name>--</expr>;</expr_stmt>
				<if>if <condition>(<expr><name>bcount</name>&lt;0</expr>)</condition><then>
				<block>{
					<goto>goto <name>err</name>;</goto>
					<break>break;</break>
				}</block></then></if>
			}</block></then>
			<else>else <if>if <condition>(<expr><name>c</name>=='\n'</expr>)</condition><then> <comment type="line">// newline</comment>
			<block>{
				<expr_stmt><expr><name>line</name>++</expr>;</expr_stmt>
			}</block></then></if></else></if></else></if></else></if>
		}</block></while>
	}</block></then></if>
	<if>if <condition>(<expr><name>bcount</name>==0</expr>)</condition><then> <return>return;</return></then></if> <comment type="line">// file is OK.</comment>
<label><name>err</name>:</label>
	<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr>"Error: RTF integrity test failed at line %d of %s due to a bracket mismatch.\n"</expr></argument>,<argument><expr><name>line</name></expr></argument>,<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><call><name>err</name><argument_list>(<argument><expr>"       Please try to create a small code example that produces this error \n"
		"       and send that to dimitri@stack.nl.\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>



</unit>
