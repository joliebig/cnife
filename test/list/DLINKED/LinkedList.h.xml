<?xml version="1.0" encoding="UTF-8"?><unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" dir="" filename="vorlage.h" language="C++">
<comment>//---refactored defines</comment>
<class>refines class <name>LinkedList</name>
<block>{
<comment>//---refactored functions</comment>
<function>	<type><name>void</name></type> <name>/home/joliebig/workspace/cnife/test/list/Base/LinkedListHookFunction2</name><parameterlist>(<param><decl><type><name>Node</name> *&amp;</type> <name>two</name></decl></param>)</parameterlist>
	<block>{
	
		<if>if <condition>(<expr><name>two</name> != <name>NULL</name></expr>)</condition><then>
			<expr_stmt><expr><name>two</name>-&gt;<name>prev</name> = <name>NULL</name></expr>;</expr_stmt></then></if>
<comment>//--functionbody</comment>
	}</block></function>

<function>	<type><name>void</name></type> <name>/home/joliebig/workspace/cnife/test/list/Base/LinkedListHookFunction6</name><parameterlist>(<param><decl><type><name>Node</name> *&amp;</type> <name>b</name></decl></param>, <param><decl><type><name>Node</name> *&amp;</type> <name>a</name></decl></param>)</parameterlist>
	<block>{
	
					<expr_stmt><expr><name>b</name>-&gt;<name>prev</name> = <name>c</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>a</name>-&gt;<name>prev</name> = <name>b</name></expr>;</expr_stmt>
<comment>//--functionbody</comment>
	}</block></function>

<function>	<type><name>void</name></type> <name>/home/joliebig/workspace/cnife/test/list/Base/LinkedListHookFunction5</name><parameterlist>(<param><decl><type><name>Node</name> *&amp;</type> <name>a</name></decl></param>)</parameterlist>
	<block>{
	
					<expr_stmt><expr><name>a</name>-&gt;<name>prev</name> = <name>b</name></expr>;</expr_stmt>
<comment>//--functionbody</comment>
	}</block></function>

<function>	<type><name>void</name></type> <name>/home/joliebig/workspace/cnife/test/list/Base/LinkedListHookFunction4</name><parameterlist>(<param><decl><type><name>Node</name> *&amp;</type> <name>n</name></decl></param>, <param><decl><type><name>Node</name> *&amp;</type> <name>b</name></decl></param>)</parameterlist>
	<block>{
	
		<expr_stmt><expr><name>n</name>-&gt;<name>prev</name> = <name>a</name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>NULL</name> != <name>b</name></expr>)</condition><then>
			<expr_stmt><expr><name>b</name>-&gt;<name>prev</name> = <name>n</name></expr>;</expr_stmt></then></if>
<comment>//--functionbody</comment>
	}</block></function>

<function>	<type><name>void</name></type> <name>/home/joliebig/workspace/cnife/test/list/Base/LinkedListHookFunction3</name><parameterlist>()</parameterlist>
	<block>{
	
			<expr_stmt><expr><name>first</name>-&gt;<name>prev</name> = <name>n</name></expr>;</expr_stmt>
<comment>//--functionbody</comment>
	}</block></function>

<function>	<type><name>void</name></type> <name>/home/joliebig/workspace/cnife/test/list/Base/LinkedListHookFunction1</name><parameterlist>()</parameterlist>
	<block>{
	
	<expr_stmt><expr><name>last</name> = <name>NULL</name></expr>;</expr_stmt>
<comment>//--functionbody</comment>
	}</block></function>
<private>
private:

		<decl_stmt><decl><type><name>Node</name>*</type> <name>last</name></decl>;</decl_stmt>
</private>
}</block></class>;</unit>