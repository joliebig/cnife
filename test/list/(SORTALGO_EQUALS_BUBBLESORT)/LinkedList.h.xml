<?xml version="1.0" encoding="UTF-8"?><unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" dir="" filename="vorlage.h" language="C++">
<comment>//---refactored defines</comment>
<class>refines class <name>LinkedList</name>
<block>{
<comment>//---refactored functions</comment>
<function>	<type><name>void</name></type> <name>/home/joliebig/workspace/cnife/test/list/Base/LinkedListHookFunction1</name><parameterlist>(<param><decl><type><name>Node</name> *&amp;</type> <name>e</name></decl></param>, <param><decl><type><name>Node</name> *&amp;</type> <name>c</name></decl></param>, <param><decl><type><name>Node</name> *&amp;</type> <name>a</name></decl></param>, <param><decl><type><name>Node</name> *&amp;</type> <name>b</name></decl></param>, <param><decl><type><name>Node</name> *&amp;</type> <name>tmp</name></decl></param>)</parameterlist>
	<block>{
	
	<while>while <condition>(<expr><name>e</name> != <name>first</name>-&gt;<name>next</name></expr>)</condition> <block>{
		<expr_stmt><expr><name>c</name> = <name>a</name> = <name>first</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>b</name> = <name>a</name>-&gt;<name>next</name></expr>;</expr_stmt>
		<while>while <condition>(<expr><name>a</name> != <name>e</name></expr>)</condition> <block>{
			<if>if <condition>(<expr><name>a</name>-&gt;<name>data</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SORTORDER</name> == <name>UPWARD</name></expr></cpp:if>
				&gt;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
				&lt;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
				<name>b</name>-&gt;<name>data</name></expr>)</condition><then> <block>{
				<if>if <condition>(<expr><name>a</name> == <name>first</name></expr>)</condition><then> <block>{
					<expr_stmt><expr><name>tmp</name> = <name>b</name>-&gt;<name>next</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>b</name>-&gt;<name>next</name> = <name>a</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>a</name>-&gt;<name>next</name> = <name>tmp</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>/home/joliebig/workspace/cnife/test/list/Base/LinkedListHookFunction5</name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>first</name> = <name>b</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>c</name> = <name>b</name></expr>;</expr_stmt>
				}</block></then> <else>else <block>{
					<expr_stmt><expr><name>tmp</name> = <name>b</name>-&gt;<name>next</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>b</name>-&gt;<name>next</name> = <name>a</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>a</name>-&gt;<name>next</name> = <name>tmp</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>c</name>-&gt;<name>next</name> = <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>/home/joliebig/workspace/cnife/test/list/Base/LinkedListHookFunction6</name><argument_list>(<argument><expr><name>b</name></expr></argument>, <argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
					<expr_stmt><expr><name>c</name> = <name>b</name></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><name>c</name> = <name>a</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>a</name> = <name>a</name>-&gt;<name>next</name></expr>;</expr_stmt>
			}</block></else></if>
			<expr_stmt><expr><name>b</name> = <name>a</name>-&gt;<name>next</name></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>b</name> == <name>e</name></expr>)</condition><then>
				<expr_stmt><expr><name>e</name> == <name>a</name></expr>;</expr_stmt></then></if>
		}</block></while>
	}</block></while>
<comment>//--functionbody</comment>
	}</block></function>

}</block></class>;</unit>