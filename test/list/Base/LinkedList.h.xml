<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="LinkedList.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Config.cpp"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Node.cpp"</cpp:file></cpp:include>

<decl_stmt><decl><type><name>using</name> <name>namespace</name></type> <name>std</name></decl>;</decl_stmt>

<decl_stmt><decl><type><name>class</name></type> <name>LinkedList</name> <block>{
	<label><name>public</name>:</label>
		<expr_stmt><expr><call><name>LinkedList</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<destructor_decl><name>~<name>LinkedList</name></name><parameter_list>()</parameter_list>;</destructor_decl>

		<function_decl><type><name>void</name></type> <name>insert</name><parameter_list>( <param><decl><type><name>int</name></type></decl></param> )</parameter_list>;</function_decl>
		<function_decl><type><name>void</name></type> <name>deleteAllNodes</name><parameter_list>()</parameter_list>;</function_decl>

		<function_decl><type><name>bool</name></type> <name>isEmpty</name><parameter_list>()</parameter_list>;</function_decl>
		<function_decl><type><name>void</name></type> <name>displayAllNodes</name><parameter_list>()</parameter_list>;</function_decl>

<label><name>private</name>:</label>
		<function_decl><type><name>void</name></type> <name>displayNode</name><parameter_list>( <param><decl><type><name>Node</name>*</type></decl></param> )</parameter_list>;</function_decl>

		<decl_stmt><decl><type><name>Node</name>*</type> <name>first</name></decl>;</decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DLINKED</name></expr></cpp:if>
		<decl_stmt><decl><type><name>Node</name>*</type> <name>last</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

}</block></decl></decl_stmt><empty_stmt>;</empty_stmt>

<expr_stmt><expr><name>LinkedList</name>::<macro><name>LinkedList</name><argument_list>()</argument_list></macro> <block>{
	<expr><name>first</name> = <name>NULL</name></expr>;
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DLINKED</name></expr></cpp:if>
	<expr><name>last</name> = <name>NULL</name></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<return>return;</return></block></expr></expr_stmt>
}

<expr_stmt><expr><name>LinkedList</name>::~<macro><name>LinkedList</name><argument_list>()</argument_list></macro> <block>{
	<expr><call><name>deleteAllNodes</name><argument_list>()</argument_list></call></expr>;
	<return>return;</return></block></expr></expr_stmt>
}

<expr_stmt><expr><name>void</name> <name>LinkedList</name>::<macro><name>insert</name><argument_list>( <argument>int newData</argument> )</argument_list></macro> <block>{
	<expr><name>Node</name> *<name>n</name> = <name>new</name> <call><name>Node</name><argument_list>()</argument_list></call></expr>;
	<expr><name>n</name>-&gt;<name>data</name> = <name>newData</name></expr>;
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SORTALGO</name> == <name>BUBBLESORT</name> || <name>SORTALGO</name> == <name>INSERTIONSORT</name></expr></cpp:if>
	<expr><name>Node</name> *<name>a</name> = <name>NULL</name></expr>;
	<expr><name>Node</name> *<name>b</name> = <name>NULL</name></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SORTALGO</name> == <name>BUBBLESORT</name></expr></cpp:if>
	<expr><name>Node</name> *<name>c</name> = <name>NULL</name></expr>;
	<expr><name>Node</name> *<name>e</name> = <name>NULL</name></expr>;
	<expr><name>Node</name> *<name>tmp</name> = <name>NULL</name></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if>if <condition>(<expr><name>NULL</name> == <name>first</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>first</name> = <name>n</name></expr>;</expr_stmt>
	<expr_stmt/></block></then></if>}</block></expr></expr_stmt> <else>else <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SORTALGO</name> == <name>INSERTIONSORT</name></expr></cpp:if>
		<expr_stmt><expr><name>a</name> = <name>first</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>b</name> = <name>first</name>-&gt;<name>next</name></expr>;</expr_stmt>

		<if>if <condition>(<expr><name>first</name>-&gt;<name>data</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SORTORDER</name> == <name>UPWARD</name></expr></cpp:if>
			&gt;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			&lt;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<name>n</name>-&gt;<name>data</name></expr>)</condition><then> <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<expr_stmt><expr><name>n</name>-&gt;<name>next</name> = <name>first</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DLINKED</name></expr></cpp:if>
			<expr_stmt><expr><name>first</name>-&gt;<name>prev</name> = <name>n</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<expr_stmt><expr><name>first</name> = <name>n</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SORTALGO</name> == <name>INSERTIONSORT</name></expr></cpp:if>
			<return>return;</return>
		}</block></then></if>
		<while>while <condition>(<expr><name>NULL</name> != <name>b</name> &amp;&amp; <name>b</name>-&gt;<name>data</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SORTORDER</name> == <name>UPWARD</name></expr></cpp:if>
			&lt;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			&gt;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<name>n</name>-&gt;<name>data</name></expr>)</condition> <block>{
			<expr_stmt><expr><name>a</name> = <name>a</name>-&gt;<name>next</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>b</name> = <name>b</name>-&gt;<name>next</name></expr>;</expr_stmt>
		}</block></while>
		<expr_stmt><expr><name>a</name>-&gt;<name>next</name> = <name>n</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name>-&gt;<name>next</name> = <name>b</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DLINKED</name></expr></cpp:if>
		<expr_stmt><expr><name>n</name>-&gt;<name>prev</name> = <name>a</name></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>NULL</name> != <name>b</name></expr>)</condition><then>
			<expr_stmt><expr><name>b</name>-&gt;<name>prev</name> = <name>n</name></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	}</block>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SORTALGO</name> == <name>BUBBLESORT</name></expr></cpp:if>
	<while>while <condition>(<expr><name>e</name> != <name>first</name>-&gt;<name>next</name></expr>)</condition> <block>{
		<expr_stmt><expr><name>c</name> = <name>a</name> = <name>first</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>b</name> = <name>a</name>-&gt;<name>next</name></expr>;</expr_stmt>
		<while>while <condition>(<expr><name>a</name> != <name>e</name></expr>)</condition> <block>{
			<if>if <condition>(<expr><name>a</name>-&gt;<name>data</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SORTORDER</name> == <name>UPWARD</name></expr></cpp:if>
				&gt;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
				&lt;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
				<name>b</name>-&gt;<name>data</name></expr>)</condition><then> <block>{
				<if>if <condition>(<expr><name>a</name> == <name>first</name></expr>)</condition><then> <block>{
					<expr_stmt><expr><name>tmp</name> = <name>b</name>-&gt;<name>next</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>b</name>-&gt;<name>next</name> = <name>a</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>a</name>-&gt;<name>next</name> = <name>tmp</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DLINKED</name></expr></cpp:if>
					<expr_stmt><expr><name>a</name>-&gt;<name>prev</name> = <name>b</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
					<expr_stmt><expr><name>first</name> = <name>b</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>c</name> = <name>b</name></expr>;</expr_stmt>
				}</block></then> <else>else <block>{
					<expr_stmt><expr><name>tmp</name> = <name>b</name>-&gt;<name>next</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>b</name>-&gt;<name>next</name> = <name>a</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>a</name>-&gt;<name>next</name> = <name>tmp</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>c</name>-&gt;<name>next</name> = <name>b</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DLINKED</name></expr></cpp:if>
					<expr_stmt><expr><name>b</name>-&gt;<name>prev</name> = <name>c</name></expr>;</expr_stmt>
					<expr_stmt><expr><name>a</name>-&gt;<name>prev</name> = <name>b</name></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
					<expr_stmt><expr><name>c</name> = <name>b</name></expr>;</expr_stmt>
				}</block></else></if>
			}</block></then> <else>else <block>{
				<expr_stmt><expr><name>c</name> = <name>a</name></expr>;</expr_stmt>
				<expr_stmt><expr><name>a</name> = <name>a</name>-&gt;<name>next</name></expr>;</expr_stmt>
			}</block></else></if>
			<expr_stmt><expr><name>b</name> = <name>a</name>-&gt;<name>next</name></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>b</name> == <name>e</name></expr>)</condition><then>
				<expr_stmt><expr><name>e</name> == <name>a</name></expr>;</expr_stmt></then></if>
		}</block></while>
	}</block></while></else>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}

<expr_stmt><expr><name>void</name> <name>LinkedList</name>::<macro><name>deleteAllNodes</name><argument_list>()</argument_list></macro> <block>{
	<expr><name>Node</name> *<name>one</name></expr>;
	<expr><name>Node</name> *<name>two</name></expr>;

	<if>if <condition>(<expr><name>NULL</name> == <name>first</name></expr>)</condition><then>
		<return>return;</return></then></if></block></expr></expr_stmt>

	<while>while <condition>(<expr><name>NULL</name> != <name>two</name></expr>)</condition> <block>{
		<expr_stmt><expr><name>one</name> = <name>first</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>first</name> = <name>two</name> = <name>first</name>-&gt;<name>next</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>one</name>-&gt;<name>next</name> = <name>NULL</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>DLINKED</name></expr></cpp:if>
		<if>if <condition>(<expr><name>two</name> != <name>NULL</name></expr>)</condition><then>
			<expr_stmt><expr><name>two</name>-&gt;<name>prev</name> = <name>NULL</name></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<decl_stmt><decl><type><name>delete</name></type> <name>one</name></decl>;</decl_stmt>
	}</block></while>
}

<expr_stmt><expr><name>bool</name> <name>LinkedList</name>::<macro><name>isEmpty</name><argument_list>()</argument_list></macro> <block>{
	<return>return <expr><name>first</name> == <name>last</name></expr>;</return></block></expr></expr_stmt>
}


<expr_stmt><expr><name>void</name> <name>LinkedList</name>::<macro><name>displayAllNodes</name><argument_list>()</argument_list></macro> <block>{
	<expr><name>Node</name> *<name>pCur</name> = <name>first</name></expr>;
	<expr><name>int</name> <name>nodeCount</name> = 1</expr>;

	<while>while <condition>( <expr><name>pCur</name></expr> )</condition> <block>{
		<expr_stmt><expr><name>cout</name> &lt;&lt; "Node " &lt;&lt; <name>nodeCount</name> &lt;&lt; ": "</expr>;</expr_stmt>
		<expr_stmt><expr><call><name>displayNode</name><argument_list>( <argument><expr><name>pCur</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>cout</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>nodeCount</name>++</expr>;</expr_stmt>
		<expr_stmt><expr><name>pCur</name> = <name>pCur</name>-&gt;<name>next</name></expr>;</expr_stmt>
	<expr_stmt/></block></while>}</block></expr></expr_stmt>

	<return>return;</return>
}


<expr_stmt><expr><name>void</name> <name>LinkedList</name>::<macro><name>displayNode</name><argument_list>( <argument>Node *node</argument> )</argument_list></macro> <block>{
	<expr><name>cout</name> &lt;&lt; <name>node</name> -&gt; <name>data</name></expr>;
	<return>return;</return></block></expr></expr_stmt>
}

<function><type><name>void</name></type> <name>printMenu</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><name>cout</name> &lt;&lt; "1. Add node " &lt;&lt; <name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> &lt;&lt; "2. Delete all nodes" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> &lt;&lt; "3. Is the list empty?" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> &lt;&lt; "4. Display all nodes" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> &lt;&lt; "5. Quit" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>getChoice</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>choice</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cout</name> &lt;&lt; "Select choice: "</expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name> &gt;&gt; <name>choice</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name>.<call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name>.<call><name>ignore</name><argument_list>( <argument><expr>200</expr></argument>, <argument><expr>'\n'</expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>choice</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>getData</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>data</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cout</name> &lt;&lt; "Enter data: "</expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name> &gt;&gt; <name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name>.<call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name>.<call><name>ignore</name><argument_list>( <argument><expr>200</expr></argument>, <argument><expr>'\n'</expr></argument> )</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>data</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>processChoice</name><parameter_list>( <param><decl><type><name>int</name></type> <name>choice</name></decl></param>, <param><decl><type><name>LinkedList</name>&amp;</type> <name>list</name></decl></param> )</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>opStatus</name></decl>;</decl_stmt>

	<switch>switch <condition>( <expr><name>choice</name></expr> )</condition> <block>{
		<case>case <expr>1</expr>: <expr_stmt><expr><name>data</name> = <call><name>getData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>list</name>.<call><name>insert</name><argument_list>( <argument><expr><name>data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>cout</name> &lt;&lt; "Node " &lt;&lt; <name>data</name>
					&lt;&lt; " added"</expr>;</expr_stmt>
				<expr_stmt><expr><name>cout</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
				<break>break;</break>
		</case><case>case <expr>2</expr>: <expr_stmt><expr><name>list</name>.<call><name>deleteAllNodes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>cout</name> &lt;&lt; "All nodes deleted" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
				<break>break;</break>
		</case><case>case <expr>3</expr>: <expr_stmt><expr><name>cout</name> &lt;&lt; ( <name>list</name>.<call><name>isEmpty</name><argument_list>()</argument_list></call> ?
						"List is empty" : "List is not empty" )</expr>;</expr_stmt>
				<expr_stmt><expr><name>cout</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
				<break>break;</break>
		</case><case>case <expr>4</expr>: <expr_stmt><expr><name>list</name>.<call><name>displayAllNodes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
		</case><case>case <expr>5</expr>: <break>break;</break>
		</case><default>default: <expr_stmt><expr><name>cout</name> &lt;&lt; "Invalid choice" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
	</default>}</block></switch>

}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>LinkedList</name></type> <name>list</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>choice</name></decl>;</decl_stmt>
	<do>do
	<block>{
		<expr_stmt><expr><call><name>printMenu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>choice</name> = <call><name>getChoice</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>processChoice</name><argument_list>( <argument><expr><name>choice</name></expr></argument>, <argument><expr><name>list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

	}</block> while <condition>( <expr><name>choice</name> != 5</expr> )</condition>;</do>

	<return>return <expr>0</expr>;</return>
}</block></function>
</unit>
