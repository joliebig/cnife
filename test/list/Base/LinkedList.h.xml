<?xml version="1.0" encoding="UTF-8"?><unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" dir="java_impl\workspace\FeatureRefactoringv2\linkedlist" filename="LinkedList.h" language="C++"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Config.cpp"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Node.cpp"</cpp:file></cpp:include>

<using>using namespace <name>std</name>;</using>

<class>class <name>LinkedList</name> <block>{<private type="default">
	</private><public>public:
		<constructor_decl><name>LinkedList</name><parameter_list>()</parameter_list>;</constructor_decl>
		<destructor_decl><name>~<name>LinkedList</name></name><parameter_list>()</parameter_list>;</destructor_decl>

		<function_decl><type><name>void</name></type> <name>insert</name><parameter_list>( <param><decl><type><name>int</name></type></decl></param> )</parameter_list>;</function_decl>
		<function_decl><type><name>void</name></type> <name>deleteAllNodes</name><parameter_list>()</parameter_list>;</function_decl>

		<function_decl><type><name>bool</name></type> <name>isEmpty</name><parameter_list>()</parameter_list>;</function_decl>
		<function_decl><type><name>void</name></type> <name>displayAllNodes</name><parameter_list>()</parameter_list>;</function_decl>

</public><private>private:
		<function_decl><type><name>void</name></type> <name>displayNode</name><parameter_list>( <param><decl><type><name>Node</name>*</type></decl></param> )</parameter_list>;</function_decl>

		<decl_stmt><decl><type><name>Node</name>*</type> <name>first</name></decl>;</decl_stmt>


</private>}</block>;</class>

<function>	<type><name>void</name></type> <name>/home/joliebig/workspace/cnife/test/list/Base/LinkedListHookFunction1</name><parameterlist>()</parameterlist>
	<block>{
	<comment>//--functionbody</comment>
	}</block></function><constructor><name><name>LinkedList</name>::<name>LinkedList</name></name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><name>first</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>/home/joliebig/workspace/cnife/test/list/Base/LinkedListHookFunction1</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
}</block></constructor>

<destructor><name><name>LinkedList</name>::~<name>LinkedList</name></name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><call><name>deleteAllNodes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<return>return;</return>
}</block></destructor>

<function>	<type><name>void</name></type> <name>/home/joliebig/workspace/cnife/test/list/Base/LinkedListHookFunction3</name><parameterlist>()</parameterlist>
	<block>{
	<comment>//--functionbody</comment>
	}</block></function><function>	<type><name>void</name></type> <name>/home/joliebig/workspace/cnife/test/list/Base/LinkedListHookFunction4</name><parameterlist>(<param><decl><type><name>Node</name> *&amp;</type> <name>n</name></decl></param>, <param><decl><type><name>Node</name> *&amp;</type> <name>b</name></decl></param>)</parameterlist>
	<block>{
	<comment>//--functionbody</comment>
	}</block></function><function>	<type><name>void</name></type> <name>/home/joliebig/workspace/cnife/test/list/Base/LinkedListHookFunction5</name><parameterlist>(<param><decl><type><name>Node</name> *&amp;</type> <name>a</name></decl></param>)</parameterlist>
	<block>{
	<comment>//--functionbody</comment>
	}</block></function><function>	<type><name>void</name></type> <name>/home/joliebig/workspace/cnife/test/list/Base/LinkedListHookFunction6</name><parameterlist>(<param><decl><type><name>Node</name> *&amp;</type> <name>b</name></decl></param>, <param><decl><type><name>Node</name> *&amp;</type> <name>a</name></decl></param>)</parameterlist>
	<block>{
	<comment>//--functionbody</comment>
	}</block></function><function>	<type><name>void</name></type> <name>/home/joliebig/workspace/cnife/test/list/Base/LinkedListHookFunction1</name><parameterlist>(<param><decl><type><name>Node</name> *&amp;</type> <name>e</name></decl></param>, <param><decl><type><name>Node</name> *&amp;</type> <name>c</name></decl></param>, <param><decl><type><name>Node</name> *&amp;</type> <name>a</name></decl></param>, <param><decl><type><name>Node</name> *&amp;</type> <name>b</name></decl></param>, <param><decl><type><name>Node</name> *&amp;</type> <name>tmp</name></decl></param>)</parameterlist>
	<block>{
	<comment>//--functionbody</comment>
	}</block></function><function><type><name>void</name></type> <name><name>LinkedList</name>::<name>insert</name></name><parameter_list>( <param><decl><type><name>int</name></type> <name>newData</name></decl></param> )</parameter_list> <block>{
	<decl_stmt><decl><type><name>Node</name> *</type><name>n</name> =<init> <expr>new <call><name>Node</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
	<expr_stmt><expr><name>n</name>-&gt;<name>data</name> = <name>newData</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SORTALGO</name> == <name>BUBBLESORT</name> || <name>SORTALGO</name> == <name>INSERTIONSORT</name></expr></cpp:if>
	<decl_stmt><decl><type><name>Node</name> *</type><name>a</name> =<init> <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Node</name> *</type><name>b</name> =<init> <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SORTALGO</name> == <name>BUBBLESORT</name></expr></cpp:if>
	<decl_stmt><decl><type><name>Node</name> *</type><name>c</name> =<init> <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Node</name> *</type><name>e</name> =<init> <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Node</name> *</type><name>tmp</name> =<init> <expr><name>NULL</name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<if>if <condition>(<expr><name>NULL</name> == <name>first</name></expr>)</condition><then> <block>{
		<expr_stmt><expr><name>first</name> = <name>n</name></expr>;</expr_stmt>
	}</block></then> <else>else <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SORTALGO</name> == <name>INSERTIONSORT</name></expr></cpp:if>
		<expr_stmt><expr><name>a</name> = <name>first</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>b</name> = <name>first</name>-&gt;<name>next</name></expr>;</expr_stmt>

		<if>if <condition>(<expr><name>first</name>-&gt;<name>data</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SORTORDER</name> == <name>UPWARD</name></expr></cpp:if>
			&gt;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			&lt;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<name>n</name>-&gt;<name>data</name></expr>)</condition><then> <block>{
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<expr_stmt><expr><name>n</name>-&gt;<name>next</name> = <name>first</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>/home/joliebig/workspace/cnife/test/list/Base/LinkedListHookFunction3</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>first</name> = <name>n</name></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SORTALGO</name> == <name>INSERTIONSORT</name></expr></cpp:if>
			<return>return;</return>
		}</block></then></if>
		<while>while <condition>(<expr><name>NULL</name> != <name>b</name> &amp;&amp; <name>b</name>-&gt;<name>data</name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>SORTORDER</name> == <name>UPWARD</name></expr></cpp:if>
			&lt;
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			&gt;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<name>n</name>-&gt;<name>data</name></expr>)</condition> <block>{
			<expr_stmt><expr><name>a</name> = <name>a</name>-&gt;<name>next</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>b</name> = <name>b</name>-&gt;<name>next</name></expr>;</expr_stmt>
		}</block></while>
		<expr_stmt><expr><name>a</name>-&gt;<name>next</name> = <name>n</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>n</name>-&gt;<name>next</name> = <name>b</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>/home/joliebig/workspace/cnife/test/list/Base/LinkedListHookFunction4</name><argument_list>(<argument><expr><name>n</name></expr></argument>, <argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	}</block></else></if>

<expr_stmt><expr><call><name>/home/joliebig/workspace/cnife/test/list/Base/LinkedListHookFunction1</name><argument_list>(<argument><expr><name>e</name></expr></argument>, <argument><expr><name>c</name></expr></argument>, <argument><expr><name>a</name></expr></argument>, <argument><expr><name>b</name></expr></argument>, <argument><expr><name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function>	<type><name>void</name></type> <name>/home/joliebig/workspace/cnife/test/list/Base/LinkedListHookFunction2</name><parameterlist>(<param><decl><type><name>Node</name> *&amp;</type> <name>two</name></decl></param>)</parameterlist>
	<block>{
	<comment>//--functionbody</comment>
	}</block></function><function><type><name>void</name></type> <name><name>LinkedList</name>::<name>deleteAllNodes</name></name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>Node</name> *</type><name>one</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>Node</name> *</type><name>two</name></decl>;</decl_stmt>

	<if>if <condition>(<expr><name>NULL</name> == <name>first</name></expr>)</condition><then>
		<return>return;</return></then></if>

	<while>while <condition>(<expr><name>NULL</name> != <name>two</name></expr>)</condition> <block>{
		<expr_stmt><expr><name>one</name> = <name>first</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>first</name> = <name>two</name> = <name>first</name>-&gt;<name>next</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>one</name>-&gt;<name>next</name> = <name>NULL</name></expr>;</expr_stmt>
<expr_stmt><expr><call><name>/home/joliebig/workspace/cnife/test/list/Base/LinkedListHookFunction2</name><argument_list>(<argument><expr><name>two</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr>delete <name>one</name></expr>;</expr_stmt>
	}</block></while>
}</block></function>

<function><type><name>bool</name></type> <name><name>LinkedList</name>::<name>isEmpty</name></name><parameter_list>()</parameter_list> <block>{
	<return>return <expr><name>first</name> == <name>last</name></expr>;</return>
}</block></function>


<function><type><name>void</name></type> <name><name>LinkedList</name>::<name>displayAllNodes</name></name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>Node</name> *</type><name>pCur</name> =<init> <expr><name>first</name></expr></init></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>nodeCount</name> =<init> <expr>1</expr></init></decl>;</decl_stmt>

	<while>while <condition>( <expr><name>pCur</name></expr> )</condition> <block>{
		<expr_stmt><expr><name>cout</name> &lt;&lt; "Node " &lt;&lt; <name>nodeCount</name> &lt;&lt; ": "</expr>;</expr_stmt>
		<expr_stmt><expr><call><name>displayNode</name><argument_list>( <argument><expr><name>pCur</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>cout</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>nodeCount</name>++</expr>;</expr_stmt>
		<expr_stmt><expr><name>pCur</name> = <name>pCur</name>-&gt;<name>next</name></expr>;</expr_stmt>
	}</block></while>

	<return>return;</return>
}</block></function>


<function><type><name>void</name></type> <name><name>LinkedList</name>::<name>displayNode</name></name><parameter_list>( <param><decl><type><name>Node</name> *</type><name>node</name></decl></param> )</parameter_list> <block>{
	<expr_stmt><expr><name>cout</name> &lt;&lt; <name>node</name> -&gt; <name>data</name></expr>;</expr_stmt>
	<return>return;</return>
}</block></function>

<function><type><name>void</name></type> <name>printMenu</name><parameter_list>()</parameter_list> <block>{
	<expr_stmt><expr><name>cout</name> &lt;&lt; "1. Add node " &lt;&lt; <name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> &lt;&lt; "2. Delete all nodes" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> &lt;&lt; "3. Is the list empty?" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> &lt;&lt; "4. Display all nodes" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cout</name> &lt;&lt; "5. Quit" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
}</block></function>

<function><type><name>int</name></type> <name>getChoice</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>choice</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cout</name> &lt;&lt; "Select choice: "</expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name> &gt;&gt; <name>choice</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name>.<call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name>.<call><name>ignore</name><argument_list>( <argument><expr>200</expr></argument>, <argument><expr>'\n'</expr></argument> )</argument_list></call></expr>;</expr_stmt>
	<return>return <expr><name>choice</name></expr>;</return>
}</block></function>

<function><type><name>int</name></type> <name>getData</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>data</name></decl>;</decl_stmt>

	<expr_stmt><expr><name>cout</name> &lt;&lt; "Enter data: "</expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name> &gt;&gt; <name>data</name></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name>.<call><name>clear</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
	<expr_stmt><expr><name>cin</name>.<call><name>ignore</name><argument_list>( <argument><expr>200</expr></argument>, <argument><expr>'\n'</expr></argument> )</argument_list></call></expr>;</expr_stmt>

	<return>return <expr><name>data</name></expr>;</return>
}</block></function>

<function><type><name>void</name></type> <name>processChoice</name><parameter_list>( <param><decl><type><name>int</name></type> <name>choice</name></decl></param>, <param><decl><type><name>LinkedList</name>&amp;</type> <name>list</name></decl></param> )</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>data</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>bool</name></type> <name>opStatus</name></decl>;</decl_stmt>

	<switch>switch <condition>( <expr><name>choice</name></expr> )</condition> <block>{
		<case>case <expr>1</expr>: <expr_stmt><expr><name>data</name> = <call><name>getData</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>list</name>.<call><name>insert</name><argument_list>( <argument><expr><name>data</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>cout</name> &lt;&lt; "Node " &lt;&lt; <name>data</name>
					&lt;&lt; " added"</expr>;</expr_stmt>
				<expr_stmt><expr><name>cout</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
				<break>break;</break>
		</case><case>case <expr>2</expr>: <expr_stmt><expr><name>list</name>.<call><name>deleteAllNodes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>cout</name> &lt;&lt; "All nodes deleted" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
				<break>break;</break>
		</case><case>case <expr>3</expr>: <expr_stmt><expr><name>cout</name> &lt;&lt; ( <name>list</name>.<call><name>isEmpty</name><argument_list>()</argument_list></call> ?
						"List is empty" : "List is not empty" )</expr>;</expr_stmt>
				<expr_stmt><expr><name>cout</name> &lt;&lt; <name>endl</name></expr>;</expr_stmt>
				<break>break;</break>
		</case><case>case <expr>4</expr>: <expr_stmt><expr><name>list</name>.<call><name>displayAllNodes</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
				<break>break;</break>
		</case><case>case <expr>5</expr>: <break>break;</break>
		</case><default>default: <expr_stmt><expr><name>cout</name> &lt;&lt; "Invalid choice" &lt;&lt; <name>endl</name></expr>;</expr_stmt>
	</default>}</block></switch>

}</block></function>

<function><type><name>int</name></type> <name>main</name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>LinkedList</name></type> <name>list</name></decl>;</decl_stmt>
	<decl_stmt><decl><type><name>int</name></type> <name>choice</name></decl>;</decl_stmt>
	<do>do
	<block>{
		<expr_stmt><expr><call><name>printMenu</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>choice</name> = <call><name>getChoice</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>processChoice</name><argument_list>( <argument><expr><name>choice</name></expr></argument>, <argument><expr><name>list</name></expr></argument> )</argument_list></call></expr>;</expr_stmt>

	}</block> while <condition>( <expr><name>choice</name> != 5</expr> )</condition>;</do>

	<return>return <expr>0</expr>;</return>
}</block></function>
</unit>