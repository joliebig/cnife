<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="HashMethod.h"><comment type="block">/*-
* See the file LICENSE for redistribution information.
*
* Copyright (c) 1999-2005
*	Sleepycat Software.  All rights reserved.
*
* $Id: HashMethod.cpp,v 1.4 2006/08/16 17:43:23 rosenmue Exp $
*/</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db_config.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NO_SYSTEM_INCLUDES</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db_int.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db_page.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"HashMethod.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"DbMethod.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"EnvMethod.h"</cpp:file></cpp:include>


<class>class <name>CHashMethod</name>
<block>{<private type="default">
</private><public>public:

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_HASH</name></cpp:ifndef>
	<function><type><name>static</name> <name>int</name></type> <name>ham_db_create</name><parameter_list>(<param><decl><type><name>DB</name> *</type><name>dbp</name></decl></param>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>COMPQUIET</name><argument_list>(<argument><expr><name>dbp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>(0)</expr>;</return>
	}</block></function>


	<function><type><name>static</name> <name>int</name></type> <name>ham_db_close</name><parameter_list>(<param><decl><type><name>DB</name> *</type><name>dbp</name></decl></param>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>COMPQUIET</name><argument_list>(<argument><expr><name>dbp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>(0)</expr>;</return>
	}</block></function>

	<function_decl><type><name>static</name> <name>int</name></type> <name>ham_get_h_ffactor</name><parameter_list>(<param><decl><type><name>DB</name> *</type><name>dbp</name></decl></param>, <param><decl><type><name>u_int32_t</name> *</type><name>h_ffactorp</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name>static</name> <name>int</name></type> <name>ham_set_h_ffactor</name><parameter_list>(<param><decl><type><name>DB</name> *</type><name>dbp</name></decl></param>, <param><decl><type><name>u_int32_t</name></type> <name>h_ffactor</name></decl></param>)</parameter_list>;</function_decl>
	<decl_stmt><decl><type><name>static</name> <name>int</name></type> <name>ham_set_h_hash</name>(DB *<name>dbp</name>, <name>u_int32_t</name> (*<name>func</name>) <specifier>__P</specifier><parameter_list>(<param/></parameter_list>(<specifier>DB</specifier> *, <specifier>const</specifier> <specifier>void</specifier> *, <specifier>u_int32_t</specifier>)</decl></decl_stmt></public>)</block></class>)<empty_stmt>;</empty_stmt>
	<function_decl><type><name>static</name> <name>int</name></type> <name>ham_get_h_nelem</name><parameter_list>(<param><decl><type><name>DB</name> *</type><name>dbp</name></decl></param>, <param><decl><type><name>u_int32_t</name> *</type><name>h_nelemp</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name>static</name> <name>int</name></type> <name>ham_set_h_nelem</name><parameter_list>(<param><decl><type><name>DB</name> *</type><name>dbp</name></decl></param>, <param><decl><type><name>u_int32_t</name></type> <name>h_nelem</name></decl></param>)</parameter_list>;</function_decl>

<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
	<comment type="block">/*
	* __ham_db_create --
	*	Hash specific initialization of the DB structure.
	*
	* PUBLIC: int __ham_db_create __P((DB *));
	*/</comment>
	<function><type><name>static</name> <name>int</name></type> <name>ham_db_create</name><parameter_list>(<param><decl><type><name>DB</name> *</type><name>dbp</name></decl></param>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>HASH</name> *</type><name>hashp</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

		<if>if <condition>(<expr>(<name>ret</name> = <call><name><name>COsAlloc</name>::<name>os_malloc</name></name><argument_list>(<argument><expr><name>dbp</name>-&gt;<name>dbenv</name></expr></argument>,
			<argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>HASH</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>&amp;<name>dbp</name>-&gt;<name>h_internal</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
			<return>return <expr>(<name>ret</name>)</expr>;</return></then></if>

		<expr_stmt><expr><name>hashp</name> = <call><name><name>static_cast</name><argument_list>&lt;<argument><name>HASH</name>*</argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>dbp</name>-&gt;<name>h_internal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>hashp</name>-&gt;<name>h_nelem</name> = 0</expr>;</expr_stmt>			<comment type="block">/* Defaults. */</comment>
		<expr_stmt><expr><name>hashp</name>-&gt;<name>h_ffactor</name> = 0</expr>;</expr_stmt>
		<expr_stmt><expr><name>hashp</name>-&gt;<name>h_hash</name> = <name>NULL</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>dbp</name>-&gt;<name>get_h_ffactor</name> = <name>ham_get_h_ffactor</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>dbp</name>-&gt;<name>set_h_ffactor</name> = <name>ham_set_h_ffactor</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>dbp</name>-&gt;<name>set_h_hash</name> = <name>ham_set_h_hash</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>dbp</name>-&gt;<name>get_h_nelem</name> = <name>ham_get_h_nelem</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>dbp</name>-&gt;<name>set_h_nelem</name> = <name>ham_set_h_nelem</name></expr>;</expr_stmt>

		<return>return <expr>(0)</expr>;</return>
	}</block></function>

	<comment type="block">/*
	* PUBLIC: int __ham_db_close __P((DB *));
	*/</comment>

	<function><type><name>static</name> <name>int</name></type> <name>ham_db_close</name><parameter_list>(<param><decl><type><name>DB</name> *</type><name>dbp</name></decl></param>)</parameter_list>
	<block>{
		<if>if <condition>(<expr><name>dbp</name>-&gt;<name>h_internal</name> == <name>NULL</name></expr>)</condition><then>
			<return>return <expr>(0)</expr>;</return></then></if>
		<expr_stmt><expr><call><name><name>COsAlloc</name>::<name>os_free</name></name><argument_list>(<argument><expr><name>dbp</name>-&gt;<name>dbenv</name></expr></argument>, <argument><expr><name>dbp</name>-&gt;<name>h_internal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>dbp</name>-&gt;<name>h_internal</name> = <name>NULL</name></expr>;</expr_stmt>
		<return>return <expr>(0)</expr>;</return>
	}</block></function>



	<comment type="block">/*
	* __ham_get_h_ffactor --
	*
	* PUBLIC: int __ham_get_h_ffactor __P((DB *, u_int32_t *));
	*/</comment>

	<function><type><name>static</name> <name>int</name></type> <name>ham_get_h_ffactor</name><parameter_list>(<param><decl><type><name>DB</name> *</type><name>dbp</name></decl></param>, <param><decl><type><name>u_int32_t</name> *</type><name>h_ffactorp</name></decl></param>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>HASH</name> *</type><name>hashp</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>hashp</name> = <call><name><name>static_cast</name><argument_list>&lt;<argument><name>HASH</name>*</argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>dbp</name>-&gt;<name>h_internal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr>*<name>h_ffactorp</name> = <name>hashp</name>-&gt;<name>h_ffactor</name></expr>;</expr_stmt>
		<return>return <expr>(0)</expr>;</return>
	}</block></function>

	<comment type="block">/*
	* __ham_set_h_ffactor --
	*	Set the fill factor.
	*/</comment>

	<function><type><name>static</name> <name>int</name></type> <name>ham_set_h_ffactor</name><parameter_list>(<param><decl><type><name>DB</name> *</type><name>dbp</name></decl></param>, <param><decl><type><name>u_int32_t</name></type> <name>h_ffactor</name></decl></param>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>HASH</name> *</type><name>hashp</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>DB_ILLEGAL_AFTER_OPEN</name><argument_list>(<argument><expr><name>dbp</name></expr></argument>, <argument><expr>"DB-&gt;set_h_ffactor"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>DB_ILLEGAL_METHOD</name><argument_list>(<argument><expr><name>dbp</name></expr></argument>, <argument><expr><name>DB_OK_HASH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>hashp</name> = <call><name><name>static_cast</name><argument_list>&lt;<argument><name>HASH</name>*</argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>dbp</name>-&gt;<name>h_internal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>hashp</name>-&gt;<name>h_ffactor</name> = <name>h_ffactor</name></expr>;</expr_stmt>
		<return>return <expr>(0)</expr>;</return>
	}</block></function>

	<comment type="block">/*
	* __ham_set_h_hash --
	*	Set the hash function.
	*/</comment>

	<decl_stmt><decl><type><name>static</name> <name>int</name></type> <name>ham_set_h_hash</name>(DB *<name>dbp</name>, <name>u_int32_t</name> (*<name>func</name>) <specifier>__P</specifier><parameter_list>(<param/></parameter_list>(<specifier>DB</specifier> *, <specifier>const</specifier> <specifier>void</specifier> *, <specifier>u_int32_t</specifier>)</decl></decl_stmt>))
	<block>{
		<decl_stmt><decl><type><name>HASH</name> *</type><name>hashp</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>DB_ILLEGAL_AFTER_OPEN</name><argument_list>(<argument><expr><name>dbp</name></expr></argument>, <argument><expr>"DB-&gt;set_h_hash"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>DB_ILLEGAL_METHOD</name><argument_list>(<argument><expr><name>dbp</name></expr></argument>, <argument><expr><name>DB_OK_HASH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>hashp</name> = <call><name><name>static_cast</name><argument_list>&lt;<argument><name>HASH</name>*</argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>dbp</name>-&gt;<name>h_internal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>hashp</name>-&gt;<name>h_hash</name> = <name>func</name></expr>;</expr_stmt>
		<return>return <expr>(0)</expr>;</return>
	}</block>

	<comment type="block">/*
	* __db_get_h_nelem --
	*
	* PUBLIC: int __ham_get_h_nelem __P((DB *, u_int32_t *));
	*/</comment>

	<function><type><name>static</name> <name>int</name></type> <name>ham_get_h_nelem</name><parameter_list>(<param><decl><type><name>DB</name> *</type><name>dbp</name></decl></param>, <param><decl><type><name>u_int32_t</name> *</type><name>h_nelemp</name></decl></param>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>HASH</name> *</type><name>hashp</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>DB_ILLEGAL_METHOD</name><argument_list>(<argument><expr><name>dbp</name></expr></argument>, <argument><expr><name>DB_OK_HASH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>hashp</name> = <call><name><name>static_cast</name><argument_list>&lt;<argument><name>HASH</name>*</argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>dbp</name>-&gt;<name>h_internal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr>*<name>h_nelemp</name> = <name>hashp</name>-&gt;<name>h_nelem</name></expr>;</expr_stmt>
		<return>return <expr>(0)</expr>;</return>
	}</block></function>

	<comment type="block">/*
	* __ham_set_h_nelem --
	*	Set the table size.
	*/</comment>

	<function><type><name>static</name> <name>int</name></type> <name>ham_set_h_nelem</name><parameter_list>(<param><decl><type><name>DB</name> *</type><name>dbp</name></decl></param>, <param><decl><type><name>u_int32_t</name></type> <name>h_nelem</name></decl></param>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>HASH</name> *</type><name>hashp</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>DB_ILLEGAL_AFTER_OPEN</name><argument_list>(<argument><expr><name>dbp</name></expr></argument>, <argument><expr>"DB-&gt;set_h_nelem"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>DB_ILLEGAL_METHOD</name><argument_list>(<argument><expr><name>dbp</name></expr></argument>, <argument><expr><name>DB_OK_HASH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>hashp</name> = <call><name><name>static_cast</name><argument_list>&lt;<argument><name>HASH</name>*</argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>dbp</name>-&gt;<name>h_internal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>hashp</name>-&gt;<name>h_nelem</name> = <name>h_nelem</name></expr>;</expr_stmt>
		<return>return <expr>(0)</expr>;</return>
	}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>	<comment type="line">//#ifndef HAVE_HASH #else</comment>

};

</unit>
