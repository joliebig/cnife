<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="HashOpen.h"><comment type="block">/*-
 * See the file LICENSE for redistribution information.
 *
 * Copyright (c) 1996-2005
 *	Sleepycat Software.  All rights reserved.
 */</comment>
<comment type="block">/*
 * Copyright (c) 1990, 1993, 1994
 *	Margo Seltzer.  All rights reserved.
 */</comment>
<comment type="block">/*
 * Copyright (c) 1990, 1993, 1994
 *	The Regents of the University of California.  All rights reserved.
 *
 * This code is derived from software contributed to Berkeley by
 * Margo Seltzer.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db_config.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NO_SYSTEM_INCLUDES</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db_int.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Crypto.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db_page.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"log.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db_shash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"lock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"mp.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"BtreeMacros.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"fop.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"HashOpen.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"HashMeta.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"HashFunc.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"HashConv.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"HashAuto.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"MpFget.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"MpFput.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"DbIface.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"DbCam.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"DbMethod.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Db.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"DbMeta.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"DbConv.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"BTreeCompare.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"FileOpBasic.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Lock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"DbErr.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Hash.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"DbLog2.h"</cpp:file></cpp:include>


<class>class <name>CHashOpen</name>
<block>{<private type="default">
</private><public>public:
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>HAVE_HASH</name></cpp:ifndef>
	<function_decl><type><name>static</name> <name>int</name></type> <name>db_no_hash_am</name><parameter_list>(<param><decl><type><name>DB_ENV</name> *</type><name>dbenv</name></decl></param>)</parameter_list>;</function_decl>
	<function><type><name>static</name> <name>int</name></type> <name>ham_open</name><parameter_list>(<param><decl><type><name>DB</name> *</type><name>dbp</name></decl></param>, <param><decl><type><name>DB_TXN</name> *</type><name>txn</name></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>db_pgno_t</name></type> <name>base_pgno</name></decl></param>, <param><decl><type><name>u_int32_t</name></type> <name>flags</name></decl></param>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>COMPQUIET</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>COMPQUIET</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>COMPQUIET</name><argument_list>(<argument><expr><name>base_pgno</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>COMPQUIET</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>(<call><name><name>CHash</name>::<name>db_no_hash_am</name></name><argument_list>(<argument><expr><name>dbp</name>-&gt;<name>dbenv</name></expr></argument>)</argument_list></call>)</expr>;</return>
	}</block></function>
	<function><type><name>static</name> <name>int</name></type> <name>ham_metachk</name><parameter_list>(<param><decl><type><name>DB</name> *</type><name>dbp</name></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>HMETA</name> *</type><name>hashm</name></decl></param>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>COMPQUIET</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>COMPQUIET</name><argument_list>(<argument><expr><name>hashm</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>(<call><name><name>CHash</name>::<name>db_no_hash_am</name></name><argument_list>(<argument><expr><name>dbp</name>-&gt;<name>dbenv</name></expr></argument>)</argument_list></call>)</expr>;</return>
	}</block></function>
	<function><type><name>static</name> <name>int</name></type> <name>ham_new_file</name><parameter_list>(<param><decl><type><name>DB</name> *</type><name>dbp</name></decl></param>, <param><decl><type><name>DB_TXN</name> *</type><name>txn</name></decl></param>, <param><decl><type><name>DB_FH</name> *</type><name>fhp</name></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>COMPQUIET</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>COMPQUIET</name><argument_list>(<argument><expr><name>fhp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>COMPQUIET</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>(<call><name><name>CHash</name>::<name>db_no_hash_am</name></name><argument_list>(<argument><expr><name>dbp</name>-&gt;<name>dbenv</name></expr></argument>)</argument_list></call>)</expr>;</return>
	}</block></function>
	<function><type><name>static</name> <name>int</name></type> <name>ham_new_subdb</name><parameter_list>(<param><decl><type><name>DB</name> *</type><name>mdbp</name></decl></param>, <param><decl><type><name>DB</name> *</type><name>dbp</name></decl></param>, <param><decl><type><name>DB_TXN</name> *</type><name>txn</name></decl></param>)</parameter_list>
	<block>{
		<expr_stmt><expr><call><name>COMPQUIET</name><argument_list>(<argument><expr><name>dbp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>COMPQUIET</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<return>return <expr>(<call><name><name>CHash</name>::<name>db_no_hash_am</name></name><argument_list>(<argument><expr><name>mdbp</name>-&gt;<name>dbenv</name></expr></argument>)</argument_list></call>)</expr>;</return>
	}</block></function>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else> 
	<function><type><name>static</name> <name>int</name></type> <name>ham_open</name><parameter_list>(<param><decl><type><name>DB</name> *</type><name>dbp</name></decl></param>, <param><decl><type><name>DB_TXN</name> *</type><name>txn</name></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>db_pgno_t</name></type> <name>base_pgno</name></decl></param>, <param><decl><type><name>u_int32_t</name></type> <name>flags</name></decl></param>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>DB_ENV</name> *</type><name>dbenv</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>DBC</name> *</type><name>dbc</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HASH_CURSOR</name> *</type><name>hcp</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HASH</name> *</type><name>hashp</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ret</name>, <name>t_ret</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>dbenv</name> = <name>dbp</name>-&gt;<name>dbenv</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>dbc</name> = <name>NULL</name></expr>;</expr_stmt>

		<comment type="block">/*
		 * Get a cursor.  If DB_CREATE is specified, we may be creating
		 * pages, and to do that safely in CDB we need a write cursor.
		 * In STD_LOCKING mode, we'll synchronize using the meta page
		 * lock instead.
		 */</comment>
		<if>if <condition>(<expr>(<name>ret</name> = <call><name><name>CDbIface</name>::<name>db_cursor</name></name><argument_list>(<argument><expr><name>dbp</name></expr></argument>,
			<argument><expr><name>txn</name></expr></argument>, <argument><expr>&amp;<name>dbc</name></expr></argument>, <argument><expr><call><name>LF_ISSET</name><argument_list>(<argument><expr><name>DB_CREATE</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>CDB_LOCKING</name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>)</argument_list></call> ?
			<name>DB_WRITECURSOR</name> : 0</expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
			<return>return <expr>(<name>ret</name>)</expr>;</return></then></if>

		<expr_stmt><expr><name>hcp</name> = (<name>HASH_CURSOR</name> *)<name>dbc</name>-&gt;<name>internal</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>hashp</name> = <call><name><name>static_cast</name><argument_list>&lt;<argument><name>HASH</name>*</argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>dbp</name>-&gt;<name>h_internal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>hashp</name>-&gt;<name>meta_pgno</name> = <name>base_pgno</name></expr>;</expr_stmt>
		<if>if <condition>(<expr>(<name>ret</name> = <call><name><name>CHashMeta</name>::<name>ham_get_meta</name></name><argument_list>(<argument><expr><name>dbc</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
			<goto>goto <name>err1</name>;</goto></then></if>

		<comment type="block">/* Initialize the hdr structure.  */</comment>
		<if>if <condition>(<expr><name>hcp</name>-&gt;<name>hdr</name>-&gt;<name>dbmeta</name>.<name>magic</name> == <name>DB_HASHMAGIC</name></expr>)</condition><then> <block>{
			<comment type="block">/* File exists, verify the data in the header. */</comment>
			<if>if <condition>(<expr><name>hashp</name>-&gt;<name>h_hash</name> == <name>NULL</name></expr>)</condition><then>
				<expr_stmt><expr><name>hashp</name>-&gt;<name>h_hash</name> = <name>hcp</name>-&gt;<name>hdr</name>-&gt;<name>dbmeta</name>.<name>version</name> &lt; 5
				? <name><name>CHashFunc</name>::<name>ham_func4</name></name> : <name><name>CHashFunc</name>::<name>ham_func5</name></name></expr>;</expr_stmt></then></if>
			<if>if <condition>(<expr>!<call><name>F_ISSET</name><argument_list>(<argument><expr><name>dbp</name></expr></argument>, <argument><expr><name>DB_AM_RDONLY</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>IS_RECOVERING</name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>)</argument_list></call> &amp;&amp;
				<name>hashp</name>-&gt;<call><name>h_hash</name><argument_list>(<argument><expr><name>dbp</name></expr></argument>,
				<argument><expr><name>CHARKEY</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>CHARKEY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call> != <name>hcp</name>-&gt;<name>hdr</name>-&gt;<name>h_charkey</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>CDbErr</name>::<name>db_err</name></name><argument_list>(<argument><expr><name>dbp</name>-&gt;<name>dbenv</name></expr></argument>,
					<argument><expr>"hash: incompatible hash function"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>ret</name> = <name>EINVAL</name></expr>;</expr_stmt>
				<goto>goto <name>err2</name>;</goto>
			}</block></then></if>
			<expr_stmt><expr><name>hashp</name>-&gt;<name>h_nelem</name> = <name>hcp</name>-&gt;<name>hdr</name>-&gt;<name>nelem</name></expr>;</expr_stmt>
			<if>if <condition>(<expr><call><name>F_ISSET</name><argument_list>(<argument><expr>&amp;<name>hcp</name>-&gt;<name>hdr</name>-&gt;<name>dbmeta</name></expr></argument>, <argument><expr><name>DB_HASH_DUP</name></expr></argument>)</argument_list></call></expr>)</condition><then>
				<expr_stmt><expr><call><name>F_SET</name><argument_list>(<argument><expr><name>dbp</name></expr></argument>, <argument><expr><name>DB_AM_DUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
			<if>if <condition>(<expr><call><name>F_ISSET</name><argument_list>(<argument><expr>&amp;<name>hcp</name>-&gt;<name>hdr</name>-&gt;<name>dbmeta</name></expr></argument>, <argument><expr><name>DB_HASH_DUPSORT</name></expr></argument>)</argument_list></call></expr>)</condition><then>
				<expr_stmt><expr><call><name>F_SET</name><argument_list>(<argument><expr><name>dbp</name></expr></argument>, <argument><expr><name>DB_AM_DUPSORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
			<if>if <condition>(<expr><call><name>F_ISSET</name><argument_list>(<argument><expr>&amp;<name>hcp</name>-&gt;<name>hdr</name>-&gt;<name>dbmeta</name></expr></argument>, <argument><expr><name>DB_HASH_SUBDB</name></expr></argument>)</argument_list></call></expr>)</condition><then>
				<expr_stmt><expr><call><name>F_SET</name><argument_list>(<argument><expr><name>dbp</name></expr></argument>, <argument><expr><name>DB_AM_SUBDB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

		}</block></then> <else>else <if>if <condition>(<expr>!<call><name>IS_RECOVERING</name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>F_ISSET</name><argument_list>(<argument><expr><name>dbp</name></expr></argument>, <argument><expr><name>DB_AM_RECOVER</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>CDbErr</name>::<name>db_err</name></name><argument_list>(<argument><expr><name>dbp</name>-&gt;<name>dbenv</name></expr></argument>,
				<argument><expr>"%s: Invalid hash meta page %d"</expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>base_pgno</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>ret</name> = <name>EINVAL</name></expr>;</expr_stmt>
		}</block></then></if></else></if>

	<label><name>err2</name>:</label>	<comment type="block">/* Release the meta data page */</comment>
		<if>if <condition>(<expr>(<name>t_ret</name> = <call><name><name>CHashMeta</name>::<name>ham_release_meta</name></name><argument_list>(<argument><expr><name>dbc</name></expr></argument>)</argument_list></call>) != 0 &amp;&amp; <name>ret</name> == 0</expr>)</condition><then>
			<expr_stmt><expr><name>ret</name> = <name>t_ret</name></expr>;</expr_stmt></then></if>
	<label><name>err1</name>:</label>	<if>if <condition>(<expr>(<name>t_ret</name>  = <call><name><name>CDbCam</name>::<name>db_c_close</name></name><argument_list>(<argument><expr><name>dbc</name></expr></argument>)</argument_list></call>) != 0 &amp;&amp; <name>ret</name> == 0</expr>)</condition><then>
			<expr_stmt><expr><name>ret</name> = <name>t_ret</name></expr>;</expr_stmt></then></if>

		<return>return <expr>(<name>ret</name>)</expr>;</return>
	}</block></function>
	<function><type><name>static</name> <name>int</name></type> <name>ham_metachk</name><parameter_list>(<param><decl><type><name>DB</name> *</type><name>dbp</name></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>name</name></decl></param>, <param><decl><type><name>HMETA</name> *</type><name>hashm</name></decl></param>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>DB_ENV</name> *</type><name>dbenv</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>u_int32_t</name></type> <name>vers</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>dbenv</name> = <name>dbp</name>-&gt;<name>dbenv</name></expr>;</expr_stmt>

		<comment type="block">/*
		 * At this point, all we know is that the magic number is for a Hash.
		 * Check the version, the database may be out of date.
		 */</comment>
		<expr_stmt><expr><name>vers</name> = <name>hashm</name>-&gt;<name>dbmeta</name>.<name>version</name></expr>;</expr_stmt>
		<if>if <condition>(<expr><call><name>F_ISSET</name><argument_list>(<argument><expr><name>dbp</name></expr></argument>, <argument><expr><name>DB_AM_SWAP</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<expr_stmt><expr><call><name>M_32_SWAP</name><argument_list>(<argument><expr><name>vers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<switch>switch <condition>(<expr><name>vers</name></expr>)</condition> <block>{
		<case>case <expr>4</expr>:
		</case><case>case <expr>5</expr>:
		</case><case>case <expr>6</expr>:
			<expr_stmt><expr><call><name><name>CDbErr</name>::<name>db_err</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>,
				<argument><expr>"%s: hash version %lu requires a version upgrade"</expr></argument>,
				<argument><expr><name>name</name></expr></argument>, <argument><expr>(<name>u_long</name>)<name>vers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr>(<name>DB_OLD_VERSION</name>)</expr>;</return>
		</case><case>case <expr>7</expr>:
		</case><case>case <expr>8</expr>:
			<break>break;</break>
		</case><default>default:
			<expr_stmt><expr><call><name><name>CDbErr</name>::<name>db_err</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>,
				<argument><expr>"%s: unsupported hash version: %lu"</expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr>(<name>u_long</name>)<name>vers</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr>(<name>EINVAL</name>)</expr>;</return>
		</default>}</block></switch>

		<comment type="block">/* Swap the page if we need to. */</comment>
		<if>if <condition>(<expr><call><name>F_ISSET</name><argument_list>(<argument><expr><name>dbp</name></expr></argument>, <argument><expr><name>DB_AM_SWAP</name></expr></argument>)</argument_list></call> &amp;&amp; (<name>ret</name> = <call><name><name>CHashConv</name>::<name>ham_mswap</name></name><argument_list>(<argument><expr>(<name>PAGE</name> *)<name>hashm</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
			<return>return <expr>(<name>ret</name>)</expr>;</return></then></if>

		<comment type="block">/* Check the type. */</comment>
		<if>if <condition>(<expr><name>dbp</name>-&gt;<name>type</name> != <name>DB_HASH</name> &amp;&amp; <name>dbp</name>-&gt;<name>type</name> != <name>DB_UNKNOWN</name></expr>)</condition><then>
			<return>return <expr>(<name>EINVAL</name>)</expr>;</return></then></if>
		<expr_stmt><expr><name>dbp</name>-&gt;<name>type</name> = <name>DB_HASH</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>DB_ILLEGAL_METHOD</name><argument_list>(<argument><expr><name>dbp</name></expr></argument>, <argument><expr><name>DB_OK_HASH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		 * Check application info against metadata info, and set info, flags,
		 * and type based on metadata info.
		 */</comment>
		<if>if <condition>(<expr>(<name>ret</name> = <call><name><name>CDbErr</name>::<name>db_fchk</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>,
			<argument><expr>"DB-&gt;open"</expr></argument>, <argument><expr><name>hashm</name>-&gt;<name>dbmeta</name>.<name>flags</name></expr></argument>,
			<argument><expr><name>DB_HASH_DUP</name> | <name>DB_HASH_SUBDB</name> | <name>DB_HASH_DUPSORT</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
			<return>return <expr>(<name>ret</name>)</expr>;</return></then></if>

		<if>if <condition>(<expr><call><name>F_ISSET</name><argument_list>(<argument><expr>&amp;<name>hashm</name>-&gt;<name>dbmeta</name></expr></argument>, <argument><expr><name>DB_HASH_DUP</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<expr_stmt><expr><call><name>F_SET</name><argument_list>(<argument><expr><name>dbp</name></expr></argument>, <argument><expr><name>DB_AM_DUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
		<else>else
			<if>if <condition>(<expr><call><name>F_ISSET</name><argument_list>(<argument><expr><name>dbp</name></expr></argument>, <argument><expr><name>DB_AM_DUP</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>CDbErr</name>::<name>db_err</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>,
			<argument><expr>"%s: DB_DUP specified to open method but not set in database"</expr></argument>,
					<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr>(<name>EINVAL</name>)</expr>;</return>
			}</block></then></if></else></if>

		<if>if <condition>(<expr><call><name>F_ISSET</name><argument_list>(<argument><expr>&amp;<name>hashm</name>-&gt;<name>dbmeta</name></expr></argument>, <argument><expr><name>DB_HASH_SUBDB</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<expr_stmt><expr><call><name>F_SET</name><argument_list>(<argument><expr><name>dbp</name></expr></argument>, <argument><expr><name>DB_AM_SUBDB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
		<else>else
			<if>if <condition>(<expr><call><name>F_ISSET</name><argument_list>(<argument><expr><name>dbp</name></expr></argument>, <argument><expr><name>DB_AM_SUBDB</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>CDbErr</name>::<name>db_err</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>,
			<argument><expr>"%s: multiple databases specified but not supported in file"</expr></argument>,
				<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr>(<name>EINVAL</name>)</expr>;</return>
			}</block></then></if></else></if>

		<if>if <condition>(<expr><call><name>F_ISSET</name><argument_list>(<argument><expr>&amp;<name>hashm</name>-&gt;<name>dbmeta</name></expr></argument>, <argument><expr><name>DB_HASH_DUPSORT</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<if>if <condition>(<expr><name>dbp</name>-&gt;<name>dup_compare</name> == <name>NULL</name></expr>)</condition><then>
				<expr_stmt><expr><name>dbp</name>-&gt;<name>dup_compare</name> = <name><name>CBTreeCompare</name>::<name>bam_defcmp</name></name></expr>;</expr_stmt></then></if>
		}</block></then> <else>else
			<if>if <condition>(<expr><name>dbp</name>-&gt;<name>dup_compare</name> != <name>NULL</name></expr>)</condition><then> <block>{
				<expr_stmt><expr><call><name><name>CDbErr</name>::<name>db_err</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>,
			<argument><expr>"%s: duplicate sort function specified but not set in database"</expr></argument>,
					<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<return>return <expr>(<name>EINVAL</name>)</expr>;</return>
			}</block></then></if></else></if>

		<comment type="block">/* Set the page size. */</comment>
		<expr_stmt><expr><name>dbp</name>-&gt;<name>pgsize</name> = <name>hashm</name>-&gt;<name>dbmeta</name>.<name>pagesize</name></expr>;</expr_stmt>

		<comment type="block">/* Copy the file's ID. */</comment>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>dbp</name>-&gt;<name>fileid</name></expr></argument>, <argument><expr><name>hashm</name>-&gt;<name>dbmeta</name>.<name>uid</name></expr></argument>, <argument><expr><name>DB_FILE_ID_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return <expr>(0)</expr>;</return>
	}</block></function>
	<function><type><name>int</name></type> <name><name>CHashOpen</name>::<name>ham_new_file</name></name><parameter_list>(<param><decl><type><name>DB</name> *</type><name>dbp</name></decl></param>, <param><decl><type><name>DB_TXN</name> *</type><name>txn</name></decl></param>, <param><decl><type><name>DB_FH</name> *</type><name>fhp</name></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>name</name></decl></param>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>DB_ENV</name> *</type><name>dbenv</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>DB_LSN</name></type> <name>lsn</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>DB_MPOOLFILE</name> *</type><name>mpf</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>DB_PGINFO</name></type> <name>pginfo</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>DBT</name></type> <name>pdbt</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HMETA</name> *</type><name>meta</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PAGE</name> *</type><name>page</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>db_pgno_t</name></type> <name>lpgno</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>void</name> *</type><name>buf</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>dbenv</name> = <name>dbp</name>-&gt;<name>dbenv</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mpf</name> = <name>dbp</name>-&gt;<name>mpf</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>meta</name> = <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>page</name> = <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>buf</name> = <name>NULL</name></expr>;</expr_stmt>

		<if>if <condition>(<expr><call><name>F_ISSET</name><argument_list>(<argument><expr><name>dbp</name></expr></argument>, <argument><expr><name>DB_AM_INMEM</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<comment type="block">/* Build meta-data page. */</comment>
			<expr_stmt><expr><name>lpgno</name> = <name>PGNO_BASE_MD</name></expr>;</expr_stmt>
			<if>if <condition>(<expr>(<name>ret</name> =
				<call><name><name>CMpFget</name>::<name>memp_fget</name></name><argument_list>(<argument><expr><name>mpf</name></expr></argument>, <argument><expr>&amp;<name>lpgno</name></expr></argument>, <argument><expr><name>DB_MPOOL_CREATE</name></expr></argument>, <argument><expr>&amp;<name>meta</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
				<return>return <expr>(<name>ret</name>)</expr>;</return></then></if>
			<expr_stmt><expr><call><name>LSN_NOT_LOGGED</name><argument_list>(<argument><expr><name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>lpgno</name> = <call><name>ham_init_meta</name><argument_list>(<argument><expr><name>dbp</name></expr></argument>, <argument><expr><name>meta</name></expr></argument>, <argument><expr><name>PGNO_BASE_MD</name></expr></argument>, <argument><expr>&amp;<name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>meta</name>-&gt;<name>dbmeta</name>.<name>last_pgno</name> = <name>lpgno</name></expr>;</expr_stmt>
			<if>if <condition>(<expr>(<name>ret</name> = <name>dbp</name>-&gt;<call><name>db_log_page</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr>&amp;<name>lsn</name></expr></argument>, <argument><expr><name>meta</name>-&gt;<name>dbmeta</name>.<name>pgno</name></expr></argument>, <argument><expr>(<name>PAGE</name> *)<name>meta</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
				<goto>goto <name>err</name>;</goto></then></if>
			<expr_stmt><expr><name>ret</name> = <call><name><name>CMpFput</name>::<name>memp_fput</name></name><argument_list>(<argument><expr><name>mpf</name></expr></argument>, <argument><expr><name>meta</name></expr></argument>, <argument><expr><name>DB_MPOOL_DIRTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>meta</name> = <name>NULL</name></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>ret</name> != 0</expr>)</condition><then>
				<goto>goto <name>err</name>;</goto></then></if>

			<comment type="block">/* Allocate the final hash bucket. */</comment>
			<if>if <condition>(<expr>(<name>ret</name> =
				<call><name><name>CMpFget</name>::<name>memp_fget</name></name><argument_list>(<argument><expr><name>mpf</name></expr></argument>, <argument><expr>&amp;<name>lpgno</name></expr></argument>, <argument><expr><name>DB_MPOOL_CREATE</name></expr></argument>, <argument><expr>&amp;<name>page</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
				<goto>goto <name>err</name>;</goto></then></if>
			<expr_stmt><expr><call><name>P_INIT</name><argument_list>(<argument><expr><name>page</name></expr></argument>,
				<argument><expr><name>dbp</name>-&gt;<name>pgsize</name></expr></argument>, <argument><expr><name>lpgno</name></expr></argument>, <argument><expr><name>PGNO_INVALID</name></expr></argument>, <argument><expr><name>PGNO_INVALID</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>P_HASH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>LSN_NOT_LOGGED</name><argument_list>(<argument><expr><name>page</name>-&gt;<name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr>(<name>ret</name> = <name>dbp</name>-&gt;<call><name>db_log_page</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr>&amp;<name>page</name>-&gt;<name>lsn</name></expr></argument>, <argument><expr><name>lpgno</name></expr></argument>, <argument><expr><name>page</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
				<goto>goto <name>err</name>;</goto></then></if>
			<expr_stmt><expr><name>ret</name> = <call><name><name>CMpFput</name>::<name>memp_fput</name></name><argument_list>(<argument><expr><name>mpf</name></expr></argument>, <argument><expr><name>page</name></expr></argument>, <argument><expr><name>DB_MPOOL_DIRTY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>page</name> = <name>NULL</name></expr>;</expr_stmt>
			<if>if <condition>(<expr><name>ret</name> != 0</expr>)</condition><then>
				<goto>goto <name>err</name>;</goto></then></if>
		}</block></then> <else>else <block>{
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>pdbt</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>pdbt</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<comment type="block">/* Build meta-data page. */</comment>
			<expr_stmt><expr><name>pginfo</name>.<name>db_pagesize</name> = <name>dbp</name>-&gt;<name>pgsize</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>pginfo</name>.<name>type</name> = <name>dbp</name>-&gt;<name>type</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>pginfo</name>.<name>flags</name> =
				<call><name>F_ISSET</name><argument_list>(<argument><expr><name>dbp</name></expr></argument>, <argument><expr>(<name>DB_AM_CHKSUM</name> | <name>DB_AM_ENCRYPT</name> | <name>DB_AM_SWAP</name>)</expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>pdbt</name>.<name>data</name> = &amp;<name>pginfo</name></expr>;</expr_stmt>
			<expr_stmt><expr><name>pdbt</name>.<name>size</name> = <call><name>sizeof</name><argument_list>(<argument><expr><name>pginfo</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr>(<name>ret</name> = <call><name><name>COsAlloc</name>::<name>os_calloc</name></name><argument_list>(<argument><expr><name>dbp</name>-&gt;<name>dbenv</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>dbp</name>-&gt;<name>pgsize</name></expr></argument>, <argument><expr>&amp;<name>buf</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
				<return>return <expr>(<name>ret</name>)</expr>;</return></then></if>
			<expr_stmt><expr><name>meta</name> = (<name>HMETA</name> *)<name>buf</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>LSN_NOT_LOGGED</name><argument_list>(<argument><expr><name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>lpgno</name> = <call><name>ham_init_meta</name><argument_list>(<argument><expr><name>dbp</name></expr></argument>, <argument><expr><name>meta</name></expr></argument>, <argument><expr><name>PGNO_BASE_MD</name></expr></argument>, <argument><expr>&amp;<name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>meta</name>-&gt;<name>dbmeta</name>.<name>last_pgno</name> = <name>lpgno</name></expr>;</expr_stmt>
			<if>if <condition>(<expr>(<name>ret</name> = <call><name><name>CDbConv</name>::<name>db_pgout</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>PGNO_BASE_MD</name></expr></argument>, <argument><expr><name>meta</name></expr></argument>, <argument><expr>&amp;<name>pdbt</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
				<goto>goto <name>err</name>;</goto></then></if>
			<if>if <condition>(<expr>(<name>ret</name> = <call><name><name>CFileOpBasic</name>::<name>fop_write</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>DB_APP_DATA</name></expr></argument>, <argument><expr><name>fhp</name></expr></argument>,
				<argument><expr><name>dbp</name>-&gt;<name>pgsize</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list>&lt;<argument><name>u_int8_t</name>*</argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dbp</name>-&gt;<name>pgsize</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><call><name>F_ISSET</name><argument_list>(
				<argument><expr><name>dbp</name></expr></argument>, <argument><expr><name>DB_AM_NOT_DURABLE</name></expr></argument>)</argument_list></call> ? <name>DB_LOG_NOT_DURABLE</name> : 0</expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
				<goto>goto <name>err</name>;</goto></then></if>
			<expr_stmt><expr><name>meta</name> = <name>NULL</name></expr>;</expr_stmt>

			<comment type="block">/* Allocate the final hash bucket. */</comment>
	<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DIAGNOSTIC</name></cpp:ifdef>
			<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>dbp</name>-&gt;<name>pgsize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
			<expr_stmt><expr><name>page</name> = (<name>PAGE</name> *)<name>buf</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>P_INIT</name><argument_list>(<argument><expr><name>page</name></expr></argument>,
				<argument><expr><name>dbp</name>-&gt;<name>pgsize</name></expr></argument>, <argument><expr><name>lpgno</name></expr></argument>, <argument><expr><name>PGNO_INVALID</name></expr></argument>, <argument><expr><name>PGNO_INVALID</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>P_HASH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>LSN_NOT_LOGGED</name><argument_list>(<argument><expr><name>page</name>-&gt;<name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<if>if <condition>(<expr>(<name>ret</name> = <call><name><name>CDbConv</name>::<name>db_pgout</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>lpgno</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr>&amp;<name>pdbt</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
				<goto>goto <name>err</name>;</goto></then></if>
			<if>if <condition>(<expr>(<name>ret</name> = <call><name><name>CFileOpBasic</name>::<name>fop_write</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>, <argument><expr><name>name</name></expr></argument>, <argument><expr><name>DB_APP_DATA</name></expr></argument>, <argument><expr><name>fhp</name></expr></argument>,
				<argument><expr><name>dbp</name>-&gt;<name>pgsize</name></expr></argument>, <argument><expr><name>lpgno</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name><name>static_cast</name><argument_list>&lt;<argument><name>u_int8_t</name>*</argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>dbp</name>-&gt;<name>pgsize</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><call><name>F_ISSET</name><argument_list>(
				<argument><expr><name>dbp</name></expr></argument>, <argument><expr><name>DB_AM_NOT_DURABLE</name></expr></argument>)</argument_list></call> ? <name>DB_LOG_NOT_DURABLE</name> : 0</expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
				<goto>goto <name>err</name>;</goto></then></if>
			<expr_stmt><expr><name>page</name> = <name>NULL</name></expr>;</expr_stmt>
		}</block></else></if>

	<label><name>err</name>:</label>	<if>if <condition>(<expr><name>buf</name> != <name>NULL</name></expr>)</condition><then>
				<expr_stmt><expr><call><name><name>COsAlloc</name>::<name>os_free</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
			<else>else <block>{
				<if>if <condition>(<expr><name>meta</name> != <name>NULL</name></expr>)</condition><then>
					<expr_stmt><expr>(<name>void</name>)<call><name><name>CMpFput</name>::<name>memp_fput</name></name><argument_list>(<argument><expr><name>mpf</name></expr></argument>, <argument><expr><name>meta</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
				<if>if <condition>(<expr><name>page</name> != <name>NULL</name></expr>)</condition><then>
					<expr_stmt><expr>(<name>void</name>)<call><name><name>CMpFput</name>::<name>memp_fput</name></name><argument_list>(<argument><expr><name>mpf</name></expr></argument>, <argument><expr><name>page</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
			}</block></else></if>
			<return>return <expr>(<name>ret</name>)</expr>;</return>
	}</block></function>
	<function><type><name>int</name></type> <name><name>CHashOpen</name>::<name>ham_new_subdb</name></name><parameter_list>(<param><decl><type><name>DB</name> *</type><name>mdbp</name></decl></param>, <param><decl><type><name>DB</name> *</type><name>dbp</name></decl></param>, <param><decl><type><name>DB_TXN</name> *</type><name>txn</name></decl></param>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>DBC</name> *</type><name>dbc</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>DB_ENV</name> *</type><name>dbenv</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>DB_LOCK</name></type> <name>metalock</name>, <name>mmlock</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>DB_LSN</name></type> <name>lsn</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>DB_MPOOLFILE</name> *</type><name>mpf</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>DBMETA</name> *</type><name>mmeta</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HMETA</name> *</type><name>meta</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>PAGE</name> *</type><name>h</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>i</name>, <name>ret</name>, <name>t_ret</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>db_pgno_t</name></type> <name>lpgno</name>, <name>mpgno</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>dbenv</name> = <name>mdbp</name>-&gt;<name>dbenv</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mpf</name> = <name>mdbp</name>-&gt;<name>mpf</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>dbc</name> = <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>meta</name> = <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mmeta</name> = <name>NULL</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>LOCK_INIT</name><argument_list>(<argument><expr><name>metalock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>LOCK_INIT</name><argument_list>(<argument><expr><name>mmlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if>if <condition>(<expr>(<name>ret</name> = <call><name><name>CDbIface</name>::<name>db_cursor</name></name><argument_list>(<argument><expr><name>mdbp</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>,
			<argument><expr>&amp;<name>dbc</name></expr></argument>, <argument><expr><call><name>CDB_LOCKING</name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>)</argument_list></call> ?  <name>DB_WRITECURSOR</name> : 0</expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
			<return>return <expr>(<name>ret</name>)</expr>;</return></then></if>

		<comment type="block">/* Get and lock the new meta data page. */</comment>
		<if>if <condition>(<expr>(<name>ret</name> = <call><name><name>CDbMeta</name>::<name>db_lget</name></name><argument_list>(<argument><expr><name>dbc</name></expr></argument>,
			<argument><expr>0</expr></argument>, <argument><expr><name>dbp</name>-&gt;<name>meta_pgno</name></expr></argument>, <argument><expr><name>DB_LOCK_WRITE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>metalock</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
			<goto>goto <name>err</name>;</goto></then></if>
		<if>if <condition>(<expr>(<name>ret</name> =
			<call><name><name>CMpFget</name>::<name>memp_fget</name></name><argument_list>(<argument><expr><name>mpf</name></expr></argument>, <argument><expr>&amp;<name>dbp</name>-&gt;<name>meta_pgno</name></expr></argument>, <argument><expr><name>DB_MPOOL_CREATE</name></expr></argument>, <argument><expr>&amp;<name>meta</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
			<goto>goto <name>err</name>;</goto></then></if>

		<comment type="block">/* Initialize the new meta-data page. */</comment>
		<expr_stmt><expr><name>lsn</name> = <name>meta</name>-&gt;<name>dbmeta</name>.<name>lsn</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>lpgno</name> = <call><name>ham_init_meta</name><argument_list>(<argument><expr><name>dbp</name></expr></argument>, <argument><expr><name>meta</name></expr></argument>, <argument><expr><name>dbp</name>-&gt;<name>meta_pgno</name></expr></argument>, <argument><expr>&amp;<name>lsn</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="block">/*
		* We are about to allocate a set of contiguous buckets (lpgno
		* worth).  We need to get the master meta-data page to figure
		* out where these pages are and to allocate them.  So, lock and
		* get the master meta data page.
		*/</comment>
		<expr_stmt><expr><name>mpgno</name> = <name>PGNO_BASE_MD</name></expr>;</expr_stmt>
		<if>if <condition>(<expr>(<name>ret</name> = <call><name><name>CDbMeta</name>::<name>db_lget</name></name><argument_list>(<argument><expr><name>dbc</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>mpgno</name></expr></argument>, <argument><expr><name>DB_LOCK_WRITE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>mmlock</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
			<goto>goto <name>err</name>;</goto></then></if>
		<if>if <condition>(<expr>(<name>ret</name> = <call><name><name>CMpFget</name>::<name>memp_fget</name></name><argument_list>(<argument><expr><name>mpf</name></expr></argument>, <argument><expr>&amp;<name>mpgno</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>mmeta</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
			<goto>goto <name>err</name>;</goto></then></if>

		<comment type="block">/*
		* Now update the hash meta-data page to reflect where the first
		* set of buckets are actually located.
		*/</comment>
		<expr_stmt><expr><name>meta</name>-&gt;<name><name>spares</name><index>[<expr>0</expr>]</index></name> = <name>mmeta</name>-&gt;<name>last_pgno</name> + 1</expr>;</expr_stmt>
		<for>for (<init><expr><name>i</name> = 0</expr>;</init> <condition><expr><name>i</name> &lt; <name>NCACHED</name> &amp;&amp; <name>meta</name>-&gt;<name><name>spares</name><index>[<expr><name>i</name></expr>]</index></name> != <name>PGNO_INVALID</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
			<expr_stmt><expr><name>meta</name>-&gt;<name><name>spares</name><index>[<expr><name>i</name></expr>]</index></name> = <name>meta</name>-&gt;<name><name>spares</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt></for>

		<comment type="block">/* The new meta data page is now complete; log it. */</comment>
		<if>if <condition>(<expr>(<name>ret</name> = <name>mdbp</name>-&gt;<call><name>db_log_page</name><argument_list>(<argument><expr><name>txn</name></expr></argument>, <argument><expr>&amp;<name>meta</name>-&gt;<name>dbmeta</name>.<name>lsn</name></expr></argument>, <argument><expr><name>dbp</name>-&gt;<name>meta_pgno</name></expr></argument>, <argument><expr>(<name>PAGE</name> *)<name>meta</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
			<goto>goto <name>err</name>;</goto></then></if>

		<comment type="block">/* Reflect the group allocation. */</comment>
		<if>if <condition>(<expr><call><name>DBENV_LOGGING</name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<if>if <condition>(<expr>(<name>ret</name> = <call><name><name>CHashAuto</name>::<name>ham_groupalloc_log</name></name><argument_list>(<argument><expr><name>mdbp</name></expr></argument>, <argument><expr><name>txn</name></expr></argument>,
				<argument><expr>&amp;<call><name>LSN</name><argument_list>(<argument><expr><name>mmeta</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<call><name>LSN</name><argument_list>(<argument><expr><name>mmeta</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>meta</name>-&gt;<name><name>spares</name><index>[<expr>0</expr>]</index></name></expr></argument>,
				<argument><expr><name>meta</name>-&gt;<name>max_bucket</name> + 1</expr></argument>, <argument><expr><name>mmeta</name>-&gt;<name>free</name></expr></argument>, <argument><expr><name>mmeta</name>-&gt;<name>last_pgno</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
				<goto>goto <name>err</name>;</goto></then></if></then></if>

		<comment type="block">/* Release the new meta-data page. */</comment>
		<if>if <condition>(<expr>(<name>ret</name> = <call><name><name>CMpFput</name>::<name>memp_fput</name></name><argument_list>(<argument><expr><name>mpf</name></expr></argument>, <argument><expr><name>meta</name></expr></argument>, <argument><expr><name>DB_MPOOL_DIRTY</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
			<goto>goto <name>err</name>;</goto></then></if>
		<expr_stmt><expr><name>meta</name> = <name>NULL</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>lpgno</name> += <name>mmeta</name>-&gt;<name>last_pgno</name></expr>;</expr_stmt>

		<comment type="block">/* Now allocate the final hash bucket. */</comment>
		<if>if <condition>(<expr>(<name>ret</name> = <call><name><name>CMpFget</name>::<name>memp_fget</name></name><argument_list>(<argument><expr><name>mpf</name></expr></argument>, <argument><expr>&amp;<name>lpgno</name></expr></argument>, <argument><expr><name>DB_MPOOL_CREATE</name></expr></argument>, <argument><expr>&amp;<name>h</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
			<goto>goto <name>err</name>;</goto></then></if>

		<expr_stmt><expr><name>mmeta</name>-&gt;<name>last_pgno</name> = <name>lpgno</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>P_INIT</name><argument_list>(<argument><expr><name>h</name></expr></argument>, <argument><expr><name>dbp</name>-&gt;<name>pgsize</name></expr></argument>, <argument><expr><name>lpgno</name></expr></argument>, <argument><expr><name>PGNO_INVALID</name></expr></argument>, <argument><expr><name>PGNO_INVALID</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>P_HASH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>LSN</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call> = <call><name>LSN</name><argument_list>(<argument><expr><name>mmeta</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr>(<name>ret</name> = <call><name><name>CMpFput</name>::<name>memp_fput</name></name><argument_list>(<argument><expr><name>mpf</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>DB_MPOOL_DIRTY</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
			<goto>goto <name>err</name>;</goto></then></if>

		<comment type="block">/* Now put the master-metadata page back. */</comment>
		<if>if <condition>(<expr>(<name>ret</name> = <call><name><name>CMpFput</name>::<name>memp_fput</name></name><argument_list>(<argument><expr><name>mpf</name></expr></argument>, <argument><expr><name>mmeta</name></expr></argument>, <argument><expr><name>DB_MPOOL_DIRTY</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
			<goto>goto <name>err</name>;</goto></then></if>
		<expr_stmt><expr><name>mmeta</name> = <name>NULL</name></expr>;</expr_stmt>

	<label><name>err</name>:</label>
		<if>if <condition>(<expr><name>mmeta</name> != <name>NULL</name></expr>)</condition><then>
			<if>if <condition>(<expr>(<name>t_ret</name> = <call><name><name>CMpFput</name>::<name>memp_fput</name></name><argument_list>(<argument><expr><name>mpf</name></expr></argument>, <argument><expr><name>mmeta</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>) != 0 &amp;&amp; <name>ret</name> == 0</expr>)</condition><then>
				<expr_stmt><expr><name>ret</name> = <name>t_ret</name></expr>;</expr_stmt></then></if></then></if>
		<if>if <condition>(<expr>(<name>t_ret</name> = <call><name>__LPUT</name><argument_list>(<argument><expr><name>dbc</name></expr></argument>, <argument><expr><name>mmlock</name></expr></argument>)</argument_list></call>) != 0 &amp;&amp; <name>ret</name> == 0</expr>)</condition><then>
			<expr_stmt><expr><name>ret</name> = <name>t_ret</name></expr>;</expr_stmt></then></if>
		<if>if <condition>(<expr><name>meta</name> != <name>NULL</name></expr>)</condition><then>
			<if>if <condition>(<expr>(<name>t_ret</name> = <call><name><name>CMpFput</name>::<name>memp_fput</name></name><argument_list>(<argument><expr><name>mpf</name></expr></argument>, <argument><expr><name>meta</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>) != 0 &amp;&amp; <name>ret</name> == 0</expr>)</condition><then>
				<expr_stmt><expr><name>ret</name> = <name>t_ret</name></expr>;</expr_stmt></then></if></then></if>
		<if>if <condition>(<expr>(<name>t_ret</name> = <call><name>__LPUT</name><argument_list>(<argument><expr><name>dbc</name></expr></argument>, <argument><expr><name>metalock</name></expr></argument>)</argument_list></call>) != 0 &amp;&amp; <name>ret</name> == 0</expr>)</condition><then>
			<expr_stmt><expr><name>ret</name> = <name>t_ret</name></expr>;</expr_stmt></then></if>
		<if>if <condition>(<expr><name>dbc</name> != <name>NULL</name></expr>)</condition><then>
			<if>if <condition>(<expr>(<name>t_ret</name> = <call><name><name>CDbCam</name>::<name>db_c_close</name></name><argument_list>(<argument><expr><name>dbc</name></expr></argument>)</argument_list></call>) != 0 &amp;&amp; <name>ret</name> == 0</expr>)</condition><then>
				<expr_stmt><expr><name>ret</name> = <name>t_ret</name></expr>;</expr_stmt></then></if></then></if>
		<return>return <expr>(<name>ret</name>)</expr>;</return>
	}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

</public><private>private:

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_HASH</name></cpp:ifdef>
	<function><type><name>static</name> <name>db_pgno_t</name></type> <name>ham_init_meta</name><parameter_list>(<param><decl><type><name>DB</name> *</type><name>dbp</name></decl></param>, <param><decl><type><name>HMETA</name> *</type><name>meta</name></decl></param>, <param><decl><type><name>db_pgno_t</name></type> <name>pgno</name></decl></param>, <param><decl><type><name>DB_LSN</name> *</type><name>lsnp</name></decl></param>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>HASH</name> *</type><name>hashp</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>db_pgno_t</name></type> <name>nbuckets</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>u_int</name></type> <name>i</name>, <name>l2</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>hashp</name> = <call><name><name>static_cast</name><argument_list>&lt;<argument><name>HASH</name>*</argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>dbp</name>-&gt;<name>h_internal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>hashp</name>-&gt;<name>h_hash</name> == <name>NULL</name></expr>)</condition><then>
			<expr_stmt><expr><name>hashp</name>-&gt;<name>h_hash</name> = <name>DB_HASHVERSION</name> &lt; 5 ? <name><name>CHashFunc</name>::<name>ham_func4</name></name> : <name><name>CHashFunc</name>::<name>ham_func5</name></name></expr>;</expr_stmt></then></if>

		<if>if <condition>(<expr><name>hashp</name>-&gt;<name>h_nelem</name> != 0 &amp;&amp; <name>hashp</name>-&gt;<name>h_ffactor</name> != 0</expr>)</condition><then> <block>{
			<expr_stmt><expr><name>hashp</name>-&gt;<name>h_nelem</name> = (<name>hashp</name>-&gt;<name>h_nelem</name> - 1) / <name>hashp</name>-&gt;<name>h_ffactor</name> + 1</expr>;</expr_stmt>
			<expr_stmt><expr><name>l2</name> = <call><name><name>CDbLog2</name>::<name>db_log2</name></name><argument_list>(<argument><expr><name>hashp</name>-&gt;<name>h_nelem</name> &gt; 2 ? <name>hashp</name>-&gt;<name>h_nelem</name> : 2</expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></then> <else>else
			<expr_stmt><expr><name>l2</name> = 1</expr>;</expr_stmt></else></if>
		<expr_stmt><expr><name>nbuckets</name> = <call>(<name>db_pgno_t</name>)<argument_list>(<argument><expr>1 &lt;&lt; <name>l2</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>meta</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>HMETA</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>meta</name>-&gt;<name>dbmeta</name>.<name>lsn</name> = *<name>lsnp</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>meta</name>-&gt;<name>dbmeta</name>.<name>pgno</name> = <name>pgno</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>meta</name>-&gt;<name>dbmeta</name>.<name>magic</name> = <name>DB_HASHMAGIC</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>meta</name>-&gt;<name>dbmeta</name>.<name>version</name> = <name>DB_HASHVERSION</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>meta</name>-&gt;<name>dbmeta</name>.<name>pagesize</name> = <name>dbp</name>-&gt;<name>pgsize</name></expr>;</expr_stmt>
		<if>if <condition>(<expr><call><name>F_ISSET</name><argument_list>(<argument><expr><name>dbp</name></expr></argument>, <argument><expr><name>DB_AM_CHKSUM</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<expr_stmt><expr><call><name>FLD_SET</name><argument_list>(<argument><expr><name>meta</name>-&gt;<name>dbmeta</name>.<name>metaflags</name></expr></argument>, <argument><expr><name>DBMETA_CHKSUM</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<if>if <condition>(<expr><call><name>F_ISSET</name><argument_list>(<argument><expr><name>dbp</name></expr></argument>, <argument><expr><name>DB_AM_ENCRYPT</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<expr_stmt><expr><name>meta</name>-&gt;<name>dbmeta</name>.<name>encrypt_alg</name> =
			   ((<name>DB_CIPHER</name> *)<name>dbp</name>-&gt;<name>dbenv</name>-&gt;<name>crypto_handle</name>)-&gt;<name>alg</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>DB_ASSERT</name><argument_list>(<argument><expr><name>meta</name>-&gt;<name>dbmeta</name>.<name>encrypt_alg</name> != 0</expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>meta</name>-&gt;<name>crypto_magic</name> = <name>meta</name>-&gt;<name>dbmeta</name>.<name>magic</name></expr>;</expr_stmt>
		}</block></then></if>
		<expr_stmt><expr><name>meta</name>-&gt;<name>dbmeta</name>.<name>type</name> = <name>P_HASHMETA</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>meta</name>-&gt;<name>dbmeta</name>.<name>free</name> = <name>PGNO_INVALID</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>meta</name>-&gt;<name>dbmeta</name>.<name>last_pgno</name> = <name>pgno</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>meta</name>-&gt;<name>max_bucket</name> = <name>nbuckets</name> - 1</expr>;</expr_stmt>
		<expr_stmt><expr><name>meta</name>-&gt;<name>high_mask</name> = <name>nbuckets</name> - 1</expr>;</expr_stmt>
		<expr_stmt><expr><name>meta</name>-&gt;<name>low_mask</name> = (<name>nbuckets</name> &gt;&gt; 1) - 1</expr>;</expr_stmt>
		<expr_stmt><expr><name>meta</name>-&gt;<name>ffactor</name> = <name>hashp</name>-&gt;<name>h_ffactor</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>meta</name>-&gt;<name>nelem</name> = <name>hashp</name>-&gt;<name>h_nelem</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>meta</name>-&gt;<name>h_charkey</name> = <name>hashp</name>-&gt;<call><name>h_hash</name><argument_list>(<argument><expr><name>dbp</name></expr></argument>, <argument><expr><name>CHARKEY</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>CHARKEY</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>meta</name>-&gt;<name>dbmeta</name>.<name>uid</name></expr></argument>, <argument><expr><name>dbp</name>-&gt;<name>fileid</name></expr></argument>, <argument><expr><name>DB_FILE_ID_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if>if <condition>(<expr><call><name>F_ISSET</name><argument_list>(<argument><expr><name>dbp</name></expr></argument>, <argument><expr><name>DB_AM_DUP</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<expr_stmt><expr><call><name>F_SET</name><argument_list>(<argument><expr>&amp;<name>meta</name>-&gt;<name>dbmeta</name></expr></argument>, <argument><expr><name>DB_HASH_DUP</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<if>if <condition>(<expr><call><name>F_ISSET</name><argument_list>(<argument><expr><name>dbp</name></expr></argument>, <argument><expr><name>DB_AM_SUBDB</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<expr_stmt><expr><call><name>F_SET</name><argument_list>(<argument><expr>&amp;<name>meta</name>-&gt;<name>dbmeta</name></expr></argument>, <argument><expr><name>DB_HASH_SUBDB</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<if>if <condition>(<expr><name>dbp</name>-&gt;<name>dup_compare</name> != <name>NULL</name></expr>)</condition><then>
			<expr_stmt><expr><call><name>F_SET</name><argument_list>(<argument><expr>&amp;<name>meta</name>-&gt;<name>dbmeta</name></expr></argument>, <argument><expr><name>DB_HASH_DUPSORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

		<comment type="block">/*
		 * Create the first and second buckets pages so that we have the
		 * page numbers for them and we can store that page number in the
		 * meta-data header (spares[0]).
		 */</comment>
		<expr_stmt><expr><name>meta</name>-&gt;<name><name>spares</name><index>[<expr>0</expr>]</index></name> = <name>pgno</name> + 1</expr>;</expr_stmt>

		<comment type="block">/* Fill in the last fields of the meta data page. */</comment>
		<for>for (<init><expr><name>i</name> = 1</expr>;</init> <condition><expr><name>i</name> &lt;= <name>l2</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
			<expr_stmt><expr><name>meta</name>-&gt;<name><name>spares</name><index>[<expr><name>i</name></expr>]</index></name> = <name>meta</name>-&gt;<name><name>spares</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt></for>
		<for>for (<init>;</init> <condition><expr><name>i</name> &lt; <name>NCACHED</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
			<expr_stmt><expr><name>meta</name>-&gt;<name><name>spares</name><index>[<expr><name>i</name></expr>]</index></name> = <name>PGNO_INVALID</name></expr>;</expr_stmt></for>

		<return>return <expr>(<name>nbuckets</name>)</expr>;</return>
	}</block></function>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</private>}</block>;</class>

</unit>
