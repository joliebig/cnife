<?xml version="1.0" encoding="UTF-8"?><unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" dir="" filename="vorlage.h" language="C++">
<comment>//---refactored defines</comment>
<class>refines class <name>CHashUpgrade</name>
<block>{
<comment>//---refactored functions</comment><public>
public:
<comment type="">//#ifndef HAVE_HASH</comment>

	<comment type="">/*
	* __ham_30_hashmeta --
	*	Upgrade the database from version 4/5 to version 6.
	*
	* PUBLIC: int __ham_30_hashmeta __P((DB *, char *, u_int8_t *));
	*/</comment>
	<function><type><name>static</name> <name>int</name></type> <name>ham_30_hashmeta</name><parameter_list>(<param><decl><type><name>DB</name> *</type><name>dbp</name></decl></param>, <param><decl><type><name>char</name> *</type><name>real_name</name></decl></param>, <param><decl><type><name>u_int8_t</name> *</type><name>obuf</name></decl></param>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>DB_ENV</name> *</type><name>dbenv</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HASHHDR</name> *</type><name>oldmeta</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HMETA30</name></type> <name>newmeta</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>u_int32_t</name> *</type><name>o_spares</name>, *<name>n_spares</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>u_int32_t</name></type> <name>fillf</name>, <name>i</name>, <name>maxb</name>, <name>max_entry</name>, <name>nelem</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>dbenv</name> = <name>dbp</name>-&gt;<name>dbenv</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr>&amp;<name>newmeta</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>newmeta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>oldmeta</name> = (<name>HASHHDR</name> *)<name>obuf</name></expr>;</expr_stmt>

		<comment type="">/*
		* The first 32 bytes are similar.  The only change is the version
		* and that we removed the ovfl_point and have the page type now.
		*/</comment>

		<expr_stmt><expr><name>newmeta</name>.<name>dbmeta</name>.<name>lsn</name> = <name>oldmeta</name>-&gt;<name>lsn</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>newmeta</name>.<name>dbmeta</name>.<name>pgno</name> = <name>oldmeta</name>-&gt;<name>pgno</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>newmeta</name>.<name>dbmeta</name>.<name>magic</name> = <name>oldmeta</name>-&gt;<name>magic</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>newmeta</name>.<name>dbmeta</name>.<name>version</name> = 6</expr>;</expr_stmt>
		<expr_stmt><expr><name>newmeta</name>.<name>dbmeta</name>.<name>pagesize</name> = <name>oldmeta</name>-&gt;<name>pagesize</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>newmeta</name>.<name>dbmeta</name>.<name>type</name> = <name>P_HASHMETA</name></expr>;</expr_stmt>

		<comment type="">/* Move flags */</comment>
		<expr_stmt><expr><name>newmeta</name>.<name>dbmeta</name>.<name>flags</name> = <name>oldmeta</name>-&gt;<name>flags</name></expr>;</expr_stmt>

		<comment type="">/* Copy the free list, which has changed its name but works the same. */</comment>
		<expr_stmt><expr><name>newmeta</name>.<name>dbmeta</name>.<name>free</name> = <name>oldmeta</name>-&gt;<name>last_freed</name></expr>;</expr_stmt>

		<comment type="">/* Copy: max_bucket, high_mask, low-mask, ffactor, nelem, h_charkey */</comment>
		<expr_stmt><expr><name>newmeta</name>.<name>max_bucket</name> = <name>oldmeta</name>-&gt;<name>max_bucket</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>newmeta</name>.<name>high_mask</name> = <name>oldmeta</name>-&gt;<name>high_mask</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>newmeta</name>.<name>low_mask</name> = <name>oldmeta</name>-&gt;<name>low_mask</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>newmeta</name>.<name>ffactor</name> = <name>oldmeta</name>-&gt;<name>ffactor</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>newmeta</name>.<name>nelem</name> = <name>oldmeta</name>-&gt;<name>nelem</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>newmeta</name>.<name>h_charkey</name> = <name>oldmeta</name>-&gt;<name>h_charkey</name></expr>;</expr_stmt>

		<comment type="">/*
		* There was a bug in 2.X versions where the nelem could go negative.
		* In general, this is considered "bad."  If it does go negative
		* (that is, very large and positive), we'll die trying to dump and
		* load this database.  So, let's see if we can fix it here.
		*/</comment>
		<expr_stmt><expr><name>nelem</name> = <name>newmeta</name>.<name>nelem</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>fillf</name> = <name>newmeta</name>.<name>ffactor</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>maxb</name> = <name>newmeta</name>.<name>max_bucket</name></expr>;</expr_stmt>

		<if>if <condition>(<expr>(<name>fillf</name> != 0 &amp;&amp; <name>fillf</name> * <name>maxb</name> &lt; 2 * <name>nelem</name>) ||
			(<name>fillf</name> == 0 &amp;&amp; <name>nelem</name> &gt; 0x8000000)</expr>)</condition><then>
			<expr_stmt><expr><name>newmeta</name>.<name>nelem</name> = 0</expr>;</expr_stmt></then></if>

		<comment type="">/*
		* We now have to convert the spares array.  The old spares array
		* contained the total number of extra pages allocated prior to
		* the bucket that begins the next doubling.  The new spares array
		* contains the page number of the first bucket in the next doubling
		* MINUS the bucket number of that bucket.
		*/</comment>
		<expr_stmt><expr><name>o_spares</name> = <name>oldmeta</name>-&gt;<name>spares</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>n_spares</name> = <name>newmeta</name>.<name>spares</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>max_entry</name> = <call><name><name>CDbLog2</name>::<name>db_log2</name></name><argument_list>(<argument><expr><name>maxb</name> + 1</expr></argument>)</argument_list></call></expr>;</expr_stmt>   <comment type="">/* highest spares entry in use */</comment>
		<expr_stmt><expr><name><name>n_spares</name><index>[<expr>0</expr>]</index></name> = 1</expr>;</expr_stmt>
		<for>for (<init><expr><name>i</name> = 1</expr>;</init> <condition><expr><name>i</name> &lt; <name>NCACHED</name> &amp;&amp; <name>i</name> &lt;= <name>max_entry</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
			<expr_stmt><expr><name><name>n_spares</name><index>[<expr><name>i</name></expr>]</index></name> = 1 + <name><name>o_spares</name><index>[<expr><name>i</name> - 1</expr>]</index></name></expr>;</expr_stmt></for>

		<comment type="">/* Replace the unique ID. */</comment>
		<if>if <condition>(<expr>(<name>ret</name> = <call><name><name>COsFid</name>::<name>os_fileid</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>real_name</name></expr></argument>, <argument><expr>1</expr></argument>, <argument><expr><name>newmeta</name>.<name>dbmeta</name>.<name>uid</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
			<return>return <expr>(<name>ret</name>)</expr>;</return></then></if>

		<comment type="">/* Overwrite the original. */</comment>
		<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>oldmeta</name></expr></argument>, <argument><expr>&amp;<name>newmeta</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>newmeta</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<return>return <expr>(0)</expr>;</return>
	}</block></function>

	<comment type="">/*
	* __ham_30_sizefix --
	*	Make sure that all hash pages belonging to the current
	*	hash doubling are within the bounds of the file.
	*
	* PUBLIC: int __ham_30_sizefix __P((DB *, DB_FH *, char *, u_int8_t *));
	*/</comment>

	<function><type><name>static</name> <name>int</name></type> <name>ham_30_sizefix</name><parameter_list>(<param><decl><type><name>DB</name> *</type><name>dbp</name></decl></param>, <param><decl><type><name>DB_FH</name> *</type><name>fhp</name></decl></param>, <param><decl><type><name>char</name> *</type><name>realname</name></decl></param>, <param><decl><type><name>u_int8_t</name> *</type><name>metabuf</name></decl></param>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>u_int8_t</name></type> <name><name>buf</name><index>[<expr><name>DB_MAX_PGSIZE</name></expr>]</index></name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>DB_ENV</name> *</type><name>dbenv</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HMETA30</name> *</type><name>meta</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>db_pgno_t</name></type> <name>last_actual</name>, <name>last_desired</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>size_t</name></type> <name>nw</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>u_int32_t</name></type> <name>pagesize</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>dbenv</name> = <name>dbp</name>-&gt;<name>dbenv</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>DB_MAX_PGSIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>meta</name> = (<name>HMETA30</name> *)<name>metabuf</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>pagesize</name> = <name>meta</name>-&gt;<name>dbmeta</name>.<name>pagesize</name></expr>;</expr_stmt>

		<comment type="">/*
		* Get the last page number.  To do this, we'll need dbp-&gt;pgsize
		* to be set right, so slam it into place.
		*/</comment>
		<expr_stmt><expr><name>dbp</name>-&gt;<name>pgsize</name> = <name>pagesize</name></expr>;</expr_stmt>
		<if>if <condition>(<expr>(<name>ret</name> = <call><name><name>CDbUpg</name>::<name>db_lastpgno</name></name><argument_list>(<argument><expr><name>dbp</name></expr></argument>, <argument><expr><name>realname</name></expr></argument>, <argument><expr><name>fhp</name></expr></argument>, <argument><expr>&amp;<name>last_actual</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
			<return>return <expr>(<name>ret</name>)</expr>;</return></then></if>

		<comment type="">/*
		* The last bucket in the doubling is equal to high_mask;  calculate
		* the page number that implies.
		*/</comment>
		<expr_stmt><expr><name>last_desired</name> = <call><name>BS_TO_PAGE</name><argument_list>(<argument><expr><name>meta</name>-&gt;<name>high_mask</name></expr></argument>, <argument><expr><name>meta</name>-&gt;<name>spares</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="">/*
		* If last_desired &gt; last_actual, we need to grow the file.  Write
		* a zeroed page where last_desired would go.
		*/</comment>
		<if>if <condition>(<expr><name>last_desired</name> &gt; <name>last_actual</name></expr>)</condition><then> <block>{
			<if>if <condition>(<expr>(<name>ret</name> = <call><name><name>COsSeek</name>::<name>os_seek</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>,
				<argument><expr><name>fhp</name></expr></argument>, <argument><expr><name>pagesize</name></expr></argument>, <argument><expr><name>last_desired</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>DB_OS_SEEK_SET</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
				<return>return <expr>(<name>ret</name>)</expr>;</return></then></if>
			<if>if <condition>(<expr>(<name>ret</name> = <call><name><name>COsRw</name>::<name>os_write</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>fhp</name></expr></argument>, <argument><expr><name>buf</name></expr></argument>, <argument><expr><name>pagesize</name></expr></argument>, <argument><expr>&amp;<name>nw</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
				<return>return <expr>(<name>ret</name>)</expr>;</return></then></if>
		}</block></then></if>

		<return>return <expr>(0)</expr>;</return>
	}</block></function>
	<comment type="">/*
	* __ham_31_hashmeta --
	*	Upgrade the database from version 6 to version 7.
	*
	* PUBLIC: int __ham_31_hashmeta
	* PUBLIC:      __P((DB *, char *, u_int32_t, DB_FH *, PAGE *, int *));
	*/</comment>

	<function><type><name>static</name> <name>int</name></type> <name>ham_31_hashmeta</name><parameter_list>(<param><decl><type><name>DB</name> *</type><name>dbp</name></decl></param>, <param><decl><type><name>char</name> *</type><name>real_name</name></decl></param>, <param><decl><type><name>u_int32_t</name></type> <name>flags</name></decl></param>, <param><decl><type><name>DB_FH</name> *</type><name>fhp</name></decl></param>, <param><decl><type><name>PAGE</name> *</type><name>h</name></decl></param>, <param><decl><type><name>int</name> *</type><name>dirtyp</name></decl></param>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>HMETA31</name> *</type><name>newmeta</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HMETA30</name> *</type><name>oldmeta</name></decl>;</decl_stmt>

		<constructor_decl><name>COMPQUIET</name><parameter_list>(<param><decl><type><name>dbp</name></type></decl></param>, <param><decl><type><name>NULL</name></type></decl></param>)</parameter_list>;</constructor_decl>
		<constructor_decl><name>COMPQUIET</name><parameter_list>(<param><decl><type><name>real_name</name></type></decl></param>, <param><decl><type><name>NULL</name></type></decl></param>)</parameter_list>;</constructor_decl>
		<constructor_decl><name>COMPQUIET</name><parameter_list>(<param><decl><type><name>fhp</name></type></decl></param>, <param><decl><type><name>NULL</name></type></decl></param>)</parameter_list>;</constructor_decl>

		<expr_stmt><expr><name>newmeta</name> = (<name>HMETA31</name> *)<name>h</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>oldmeta</name> = (<name>HMETA30</name> *)<name>h</name></expr>;</expr_stmt>

		<comment type="">/*
		* Copy the fields down the page.
		* The fields may overlap so start at the bottom and use memmove().
		*/</comment>
		<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>newmeta</name>-&gt;<name>spares</name></expr></argument>, <argument><expr><name>oldmeta</name>-&gt;<name>spares</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>oldmeta</name>-&gt;<name>spares</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>newmeta</name>-&gt;<name>h_charkey</name> = <name>oldmeta</name>-&gt;<name>h_charkey</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>newmeta</name>-&gt;<name>nelem</name> = <name>oldmeta</name>-&gt;<name>nelem</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>newmeta</name>-&gt;<name>ffactor</name> = <name>oldmeta</name>-&gt;<name>ffactor</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>newmeta</name>-&gt;<name>low_mask</name> = <name>oldmeta</name>-&gt;<name>low_mask</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>newmeta</name>-&gt;<name>high_mask</name> = <name>oldmeta</name>-&gt;<name>high_mask</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>newmeta</name>-&gt;<name>max_bucket</name> = <name>oldmeta</name>-&gt;<name>max_bucket</name></expr>;</expr_stmt>
		<expr_stmt><expr><call><name>memmove</name><argument_list>(<argument><expr><name>newmeta</name>-&gt;<name>dbmeta</name>.<name>uid</name></expr></argument>,
			<argument><expr><name>oldmeta</name>-&gt;<name>dbmeta</name>.<name>uid</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>oldmeta</name>-&gt;<name>dbmeta</name>.<name>uid</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>newmeta</name>-&gt;<name>dbmeta</name>.<name>flags</name> = <name>oldmeta</name>-&gt;<name>dbmeta</name>.<name>flags</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>newmeta</name>-&gt;<name>dbmeta</name>.<name>record_count</name> = 0</expr>;</expr_stmt>
		<expr_stmt><expr><name>newmeta</name>-&gt;<name>dbmeta</name>.<name>key_count</name> = 0</expr>;</expr_stmt>
		<expr_stmt><expr><call><name>ZERO_LSN</name><argument_list>(<argument><expr><name>newmeta</name>-&gt;<name>dbmeta</name>.<name>unused3</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<comment type="">/* Update the version. */</comment>
		<expr_stmt><expr><name>newmeta</name>-&gt;<name>dbmeta</name>.<name>version</name> = 7</expr>;</expr_stmt>

		<comment type="">/* Upgrade the flags. */</comment>
		<if>if <condition>(<expr><call><name>LF_ISSET</name><argument_list>(<argument><expr><name>DB_DUPSORT</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<expr_stmt><expr><call><name>F_SET</name><argument_list>(<argument><expr>&amp;<name>newmeta</name>-&gt;<name>dbmeta</name></expr></argument>, <argument><expr><name>DB_HASH_DUPSORT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

		<expr_stmt><expr>*<name>dirtyp</name> = 1</expr>;</expr_stmt>
		<return>return <expr>(0)</expr>;</return>
	}</block></function>

	<comment type="">/*
	* ham_31_hash( --
	*	Upgrade the database hash leaf pages.
	*
	* PUBLIC: int ham_31_hash(
	* PUBLIC:      __P((DB *, char *, u_int32_t, DB_FH *, PAGE *, int *));
	*/</comment>

	<function>	<type><name>void</name></type> <name>/home/joliebig/workspace/cnife/test/BerkleyDB_HASH/HAVE_HASH/HashUpgradeHookFunction1</name><parameterlist>(<param><decl><type><name>HKEYDATA</name> *&amp;</type> <name>hk</name></decl></param>, <param><decl><type><name>db_pgno_t</name>&amp;</type> <name>pgno</name></decl></param>, <param><decl><type><name>db_pgno_t</name>&amp;</type> <name>tpgno</name></decl></param>, <param><decl><type><name>int</name>&amp;</type> <name>ret</name></decl></param>, <param><decl><type><name>DB</name> *&amp;</type> <name>dbp</name></decl></param>, <param><decl><type><name>char</name> *&amp;</type> <name>real_name</name></decl></param>, <param><decl><type><name>DB_FH</name> *&amp;</type> <name>fhp</name></decl></param>, <param><decl><type><name>int</name> *&amp;</type> <name>dirtyp</name></decl></param>)</parameterlist>
	<block>{
	<comment>//--functionbody</comment>
	}</block></function><function><type><name>static</name> <name>int</name></type> <name>ham_31_hash</name><parameter_list>(<param><decl><type><name>DB</name> *</type><name>dbp</name></decl></param>, <param><decl><type><name>char</name> *</type><name>real_name</name></decl></param>, <param><decl><type><name>u_int32_t</name></type> <name>flags</name></decl></param>, <param><decl><type><name>DB_FH</name> *</type><name>fhp</name></decl></param>, <param><decl><type><name>PAGE</name> *</type><name>h</name></decl></param>, <param><decl><type><name>int</name> *</type><name>dirtyp</name></decl></param>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>HKEYDATA</name> *</type><name>hk</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>db_pgno_t</name></type> <name>pgno</name>, <name>tpgno</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>db_indx_t</name></type> <name>indx</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

		<expr_stmt><expr><call><name>COMPQUIET</name><argument_list>(<argument><expr><name>flags</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<expr_stmt><expr><name>ret</name> = 0</expr>;</expr_stmt>
		<for>for (<init><expr><name>indx</name> = 0</expr>;</init> <condition><expr><name>indx</name> &lt; <call><name>NUM_ENT</name><argument_list>(<argument><expr><name>h</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>indx</name> += 2</expr></incr>) <block>{
			<expr_stmt><expr><name>hk</name> = (<name>HKEYDATA</name> *)<call><name>H_PAIRDATA</name><argument_list>(<argument><expr><name>dbp</name></expr></argument>, <argument><expr><name>h</name></expr></argument>, <argument><expr><name>indx</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<expr_stmt><expr><call><name>/home/joliebig/workspace/cnife/test/BerkleyDB_HASH/HAVE_HASH/HashUpgradeHookFunction1</name><argument_list>(<argument><expr><name>hk</name></expr></argument>, <argument><expr><name>pgno</name></expr></argument>, <argument><expr><name>tpgno</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>, <argument><expr><name>dbp</name></expr></argument>, <argument><expr><name>real_name</name></expr></argument>, <argument><expr><name>fhp</name></expr></argument>, <argument><expr><name>dirtyp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		}</block></for>

		<return>return <expr>(<name>ret</name>)</expr>;</return>
	}</block></function>

</public>
}</block></class>;</unit>