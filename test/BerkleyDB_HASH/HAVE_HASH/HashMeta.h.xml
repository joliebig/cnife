<?xml version="1.0" encoding="UTF-8"?><unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" dir="" filename="vorlage.h" language="C++">
<comment>//---refactored defines</comment>
<class>refines class <name>CHashMeta</name>
<block>{
<comment>//---refactored functions</comment><public>
public:
public:
	<function><type><name>static</name> <name>int</name></type> <name>ham_get_meta</name><parameter_list>(<param><decl><type><name>DBC</name> *</type><name>dbc</name></decl></param>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>DB</name> *</type><name>dbp</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>DB_MPOOLFILE</name> *</type><name>mpf</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HASH</name> *</type><name>hashp</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HASH_CURSOR</name> *</type><name>hcp</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>dbp</name> = <name>dbc</name>-&gt;<name>dbp</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>mpf</name> = <name>dbp</name>-&gt;<name>mpf</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>hashp</name> = <call><name>static_cast<argument_list>&lt;<argument><name>HASH</name>*</argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>dbp</name>-&gt;<name>h_internal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>hcp</name> = (<name>HASH_CURSOR</name> *)<name>dbc</name>-&gt;<name>internal</name></expr>;</expr_stmt>

		<if>if <condition>(<expr>(<name>ret</name> = <call><name><name>CDbMeta</name>::<name>db_lget</name></name><argument_list>(<argument><expr><name>dbc</name></expr></argument>, <argument><expr>0</expr></argument>,
			<argument><expr><name>hashp</name>-&gt;<name>meta_pgno</name></expr></argument>, <argument><expr><name>DB_LOCK_READ</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>hcp</name>-&gt;<name>hlock</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
			<return>return <expr>(<name>ret</name>)</expr>;</return></then></if>

		<if>if <condition>(<expr>(<name>ret</name> = <call><name><name>CMpFget</name>::<name>memp_fget</name></name><argument_list>(<argument><expr><name>mpf</name></expr></argument>,
			<argument><expr>&amp;<name>hashp</name>-&gt;<name>meta_pgno</name></expr></argument>, <argument><expr><name>DB_MPOOL_CREATE</name></expr></argument>, <argument><expr>&amp;(<name>hcp</name>-&gt;<name>hdr</name>)</expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
			<expr_stmt><expr>(<name>void</name>)<call><name>__LPUT</name><argument_list>(<argument><expr><name>dbc</name></expr></argument>, <argument><expr><name>hcp</name>-&gt;<name>hlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>

		<return>return <expr>(<name>ret</name>)</expr>;</return>
	}</block></function>

	<comment type="block">/*
	* Release the meta-data page.
	*
	* PUBLIC: int __ham_release_meta __P((DBC *));
	*/</comment>

	<function><type><name>static</name> <name>int</name></type> <name>ham_release_meta</name><parameter_list>(<param><decl><type><name>DBC</name> *</type><name>dbc</name></decl></param>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>DB_MPOOLFILE</name> *</type><name>mpf</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HASH_CURSOR</name> *</type><name>hcp</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>mpf</name> = <name>dbc</name>-&gt;<name>dbp</name>-&gt;<name>mpf</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>hcp</name> = (<name>HASH_CURSOR</name> *)<name>dbc</name>-&gt;<name>internal</name></expr>;</expr_stmt>

		<if>if <condition>(<expr><name>hcp</name>-&gt;<name>hdr</name></expr>)</condition><then>
			<expr_stmt><expr>(<name>void</name>)<call><name><name>CMpFput</name>::<name>memp_fput</name></name><argument_list>(<argument><expr><name>mpf</name></expr></argument>, <argument><expr><name>hcp</name>-&gt;<name>hdr</name></expr></argument>,
			<argument><expr><call><name>F_ISSET</name><argument_list>(<argument><expr><name>hcp</name></expr></argument>, <argument><expr><name>H_DIRTY</name></expr></argument>)</argument_list></call> ? <name>DB_MPOOL_DIRTY</name> : 0</expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<expr_stmt><expr><name>hcp</name>-&gt;<name>hdr</name> = <name>NULL</name></expr>;</expr_stmt>
		<constructor_decl><name>F_CLR</name><parameter_list>(<param><decl><type><name>hcp</name></type></decl></param>, <param><decl><type><name>H_DIRTY</name></type></decl></param>)</parameter_list>;</constructor_decl>

		<return>return <expr>(<call><name>__TLPUT</name><argument_list>(<argument><expr><name>dbc</name></expr></argument>, <argument><expr><name>hcp</name>-&gt;<name>hlock</name></expr></argument>)</argument_list></call>)</expr>;</return>
	}</block></function>

	<comment type="block">/*
	* Mark the meta-data page dirty.
	*
	* PUBLIC: int __ham_dirty_meta __P((DBC *));
	*/</comment>

	<function><type><name>static</name> <name>int</name></type> <name>ham_dirty_meta</name><parameter_list>(<param><decl><type><name>DBC</name> *</type><name>dbc</name></decl></param>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>DB</name> *</type><name>dbp</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HASH</name> *</type><name>hashp</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HASH_CURSOR</name> *</type><name>hcp</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>dbp</name> = <name>dbc</name>-&gt;<name>dbp</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>hashp</name> = <call><name>static_cast<argument_list>&lt;<argument><name>HASH</name>*</argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>dbp</name>-&gt;<name>h_internal</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr><name>hcp</name> = (<name>HASH_CURSOR</name> *)<name>dbc</name>-&gt;<name>internal</name></expr>;</expr_stmt>

		<expr_stmt><expr><name>ret</name> = 0</expr>;</expr_stmt>

		<expr_stmt><expr><name>ret</name> = <call><name><name>CDbMeta</name>::<name>db_lget</name></name><argument_list>(<argument><expr><name>dbc</name></expr></argument>, <argument><expr><name>LCK_COUPLE</name></expr></argument>,
			<argument><expr><name>hashp</name>-&gt;<name>meta_pgno</name></expr></argument>, <argument><expr><name>DB_LOCK_WRITE</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr>&amp;<name>hcp</name>-&gt;<name>hlock</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

		<if>if <condition>(<expr><name>ret</name> == 0</expr>)</condition><then>
			<constructor_decl><name>F_SET</name><parameter_list>(<param><decl><type><name>hcp</name></type></decl></param>, <param><decl><type><name>H_DIRTY</name></type></decl></param>)</parameter_list>;</constructor_decl></then></if>
		<return>return <expr>(<name>ret</name>)</expr>;</return>
	}</block></function>

</public><private type="default">
private:


</private>
}</block></class>;</unit>