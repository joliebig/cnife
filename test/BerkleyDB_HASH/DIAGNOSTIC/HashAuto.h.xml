<?xml version="1.0" encoding="UTF-8"?><unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" dir="" filename="vorlage.h" language="C++">
<comment>//---refactored defines</comment>
<class>refines class <name>CHashAuto</name>
<block>{
<comment>//---refactored functions</comment>
<function>	<type><name>void</name></type> <name>/home/joliebig/workspace/cnife/test/BerkleyDB_HASH/HAVE_HASH/HashAutoHookFunction3</name><parameterlist>()</parameterlist>
	<block>{
	
		<expr_stmt><expr><call><name><name>COsAlloc</name>::<name>os_free</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>logrec</name>.<name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment>//--functionbody</comment>
	}</block></function>

<function>	<type><name>void</name></type> <name>/home/joliebig/workspace/cnife/test/BerkleyDB_HASH/HAVE_HASH/HashAutoHookFunction2</name><parameterlist>()</parameterlist>
	<block>{
	
			<comment type="block">/*
			* Set the debug bit if we are going to log non-durable
			* transactions so they will be ignored by recovery.
			*/</comment>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>lr</name>-&gt;<name>data</name></expr></argument>, <argument><expr><name>logrec</name>.<name>data</name></expr></argument>, <argument><expr><name>logrec</name>.<name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>rectype</name> |= <name>DB_debug_FLAG</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>logrec</name>.<name>data</name></expr></argument>, <argument><expr>&amp;<name>rectype</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>rectype</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>ret</name> = <call><name><name>CLogPut</name>::<name>log_put</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>,
				<argument><expr><name>rlsnp</name></expr></argument>, <argument><expr>(<name>DBT</name> *)&amp;<name>logrec</name></expr></argument>, <argument><expr><name>flags</name> | <name>DB_LOG_NOCOPY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment>//--functionbody</comment>
	}</block></function>

<function>	<type><name>void</name></type> <name>/home/joliebig/workspace/cnife/test/BerkleyDB_HASH/HAVE_HASH/HashAutoHookFunction1</name><parameterlist>()</parameterlist>
	<block>{
	
			<if>if <condition>(<expr>(<name>ret</name> =
				<call><name><name>COsAlloc</name>::<name>os_malloc</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>logrec</name>.<name>size</name></expr></argument>, <argument><expr>&amp;<name>logrec</name>.<name>data</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then> <block>{
					<constructor_decl><name>COsAlloc::os_free</name><parameter_list>(<param><decl><type><name>dbenv</name></type></decl></param>, <param><decl><type><name>lr</name></type></decl></param>)</parameter_list>;</constructor_decl>
					<return>return <expr>(<name>ret</name>)</expr>;</return>
			}</block></then></if>
<comment>//--functionbody</comment>
	}</block></function>

<function>	<type><name>void</name></type> <name>/home/joliebig/workspace/cnife/test/BerkleyDB_HASH/HAVE_HASH/HashAutoHookFunction3</name><parameterlist>(<param><decl><type><name>DB_ENV</name> *&amp;</type> <name>dbenv</name></decl></param>, <param><decl><type><name>DBT</name>&amp;</type> <name>logrec</name></decl></param>, <param><decl><type><name>int</name>&amp;</type> <name>is_durable</name></decl></param>, <param><decl><type><name>const</name> <name>DBT</name> *&amp;</type> <name>data</name></decl></param>, <param><decl><type><name>DB_TXN</name> *&amp;</type> <name>txnid</name></decl></param>)</parameterlist>
	<block>{
	
		<expr_stmt><expr><call><name><name>COsAlloc</name>::<name>os_free</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>logrec</name>.<name>data</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment>//--functionbody</comment>
	}</block></function>

<function>	<type><name>void</name></type> <name>/home/joliebig/workspace/cnife/test/BerkleyDB_HASH/HAVE_HASH/HashAutoHookFunction2</name><parameterlist>(<param><decl><type><name>DB_TXNLOGREC</name> *&amp;</type> <name>lr</name></decl></param>, <param><decl><type><name>DBT</name>&amp;</type> <name>logrec</name></decl></param>, <param><decl><type><name>u_int32_t</name>&amp;</type> <name>rectype</name></decl></param>, <param><decl><type><name>int</name>&amp;</type> <name>ret</name></decl></param>, <param><decl><type><name>DB_ENV</name> *&amp;</type> <name>dbenv</name></decl></param>, <param><decl><type><name>DB_LSN</name> *&amp;</type> <name>rlsnp</name></decl></param>, <param><decl><type><name>const</name> <name>DBT</name> *&amp;</type> <name>data</name></decl></param>, <param><decl><type><name>u_int32_t</name>&amp;</type> <name>flags</name></decl></param>)</parameterlist>
	<block>{
	
			<comment type="block">/*
			* Set the debug bit if we are going to log non-durable
			* transactions so they will be ignored by recovery.
			*/</comment>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>lr</name>-&gt;<name>data</name></expr></argument>, <argument><expr><name>logrec</name>.<name>data</name></expr></argument>, <argument><expr><name>logrec</name>.<name>size</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<expr_stmt><expr><name>rectype</name> |= <name>DB_debug_FLAG</name></expr>;</expr_stmt>
			<expr_stmt><expr><call><name>memcpy</name><argument_list>(<argument><expr><name>logrec</name>.<name>data</name></expr></argument>, <argument><expr>&amp;<name>rectype</name></expr></argument>, <argument><expr><call><name>sizeof</name><argument_list>(<argument><expr><name>rectype</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>

			<expr_stmt><expr><name>ret</name> = <call><name><name>CLogPut</name>::<name>log_put</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>,
				<argument><expr><name>rlsnp</name></expr></argument>, <argument><expr>(<name>DBT</name> *)&amp;<name>logrec</name></expr></argument>, <argument><expr><name>flags</name> | <name>DB_LOG_NOCOPY</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment>//--functionbody</comment>
	}</block></function>

<function>	<type><name>void</name></type> <name>/home/joliebig/workspace/cnife/test/BerkleyDB_HASH/HAVE_HASH/HashAutoHookFunction1</name><parameterlist>(<param><decl><type><name>int</name>&amp;</type> <name>ret</name></decl></param>, <param><decl><type><name>DB_ENV</name> *&amp;</type> <name>dbenv</name></decl></param>, <param><decl><type><name>DBT</name>&amp;</type> <name>logrec</name></decl></param>, <param><decl><type><name>const</name> <name>DBT</name> *&amp;</type> <name>data</name></decl></param>)</parameterlist>
	<block>{
	
			<if>if <condition>(<expr>(<name>ret</name> =
				<call><name><name>COsAlloc</name>::<name>os_malloc</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>logrec</name>.<name>size</name></expr></argument>, <argument><expr>&amp;<name>logrec</name>.<name>data</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then> <block>{
					<constructor_decl><name>COsAlloc::os_free</name><parameter_list>(<param><decl><type><name>dbenv</name></type></decl></param>, <param><decl><type><name>lr</name></type></decl></param>)</parameter_list>;</constructor_decl>
					<return>return <expr>(<name>ret</name>)</expr>;</return>
			}</block></then></if>
<comment>//--functionbody</comment>
	}</block></function>

}</block></class>;</unit>