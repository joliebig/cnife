<?xml version="1.0" encoding="UTF-8"?><unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" dir="" filename="vorlage.h" language="C++">
<comment>//---refactored defines</comment>
<class>refines class <name>CHashDup</name>
<block>{
<comment>//---refactored functions</comment>
<function>	<type><name>void</name></type> <name>/home/joliebig/workspace/cnife/test/BerkleyDB_HASH/HAVE_HASH/HashDupHookFunction1</name><parameterlist>(<param><decl><type><name>u_int8_t</name> *&amp;</type> <name>hk</name></decl></param>, <param><decl><type><name>HASH_CURSOR</name> *&amp;</type> <name>hcp</name></decl></param>, <param><decl><type><name>u_int32_t</name>&amp;</type> <name>new_size</name></decl></param>, <param><decl><type><name>DB</name> *&amp;</type> <name>dbp</name></decl></param>, <param><decl><type><name>int</name>&amp;</type> <name>ret</name></decl></param>, <param><decl><type><name>DBC</name> *&amp;</type> <name>dbc</name></decl></param>, <param><decl><type><name>DBT</name> *&amp;</type> <name>nval</name></decl></param>, <param><decl><type><name>u_int32_t</name>&amp;</type> <name>flags</name></decl></param>)</parameterlist>
	<block>{
	
		<if>if <condition>(<expr><call><name>HPAGE_PTYPE</name><argument_list>(<argument><expr><name>hk</name></expr></argument>)</argument_list></call> != <name>H_OFFDUP</name> &amp;&amp;
			(<call><name>HPAGE_PTYPE</name><argument_list>(<argument><expr><name>hk</name></expr></argument>)</argument_list></call> == <name>H_OFFPAGE</name> || <call><name>ISBIG</name><argument_list>(<argument><expr><name>hcp</name></expr></argument>, <argument><expr><name>new_size</name></expr></argument>)</argument_list></call> ||
			<name>add_bytes</name> &gt; <call><name>P_FREESPACE</name><argument_list>(<argument><expr><name>dbp</name></expr></argument>, <argument><expr><name>hcp</name>-&gt;<name>page</name></expr></argument>)</argument_list></call>)</expr>)</condition><then> <block>{

				<if>if <condition>(<expr>(<name>ret</name> = <call><name>ham_dup_convert</name><argument_list>(<argument><expr><name>dbc</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
					<return>return <expr>(<name>ret</name>)</expr>;</return></then></if>
				<return>return <expr>(<name>hcp</name>-&gt;<name>opd</name>-&gt;<call><name>c_am_put</name><argument_list>(<argument><expr><name>hcp</name>-&gt;<name>opd</name></expr></argument>,
					<argument><expr><name>NULL</name></expr></argument>, <argument><expr><name>nval</name></expr></argument>, <argument><expr><name>flags</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>)</expr>;</return>
		}</block></then></if>
<comment>//--functionbody</comment>
	}</block></function>
<public>
public:

	<comment type="block">/*
	* __ham_dcursor --
	*
	*	Create an off page duplicate cursor for this cursor.
	*/</comment>

	<function><type><name>static</name> <name>int</name></type> <name>ham_dcursor</name><parameter_list>(<param><decl><type><name>DBC</name> *</type><name>dbc</name></decl></param>, <param><decl><type><name>db_pgno_t</name></type> <name>pgno</name></decl></param>, <param><decl><type><name>u_int32_t</name></type> <name>indx</name></decl></param>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>DB</name> *</type><name>dbp</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>HASH_CURSOR</name> *</type><name>hcp</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>CBTreeCursor</name> *</type><name>dcp</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>

		<expr_stmt><expr><name>dbp</name> = <name>dbc</name>-&gt;<name>dbp</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>hcp</name> = (<name>HASH_CURSOR</name> *)<name>dbc</name>-&gt;<name>internal</name></expr>;</expr_stmt>

		<if>if <condition>(<expr>(<name>ret</name> = <call><name><name>CDbCam</name>::<name>db_c_newopd</name></name><argument_list>(<argument><expr><name>dbc</name></expr></argument>, <argument><expr><name>pgno</name></expr></argument>, <argument><expr><name>hcp</name>-&gt;<name>opd</name></expr></argument>, <argument><expr>&amp;<name>hcp</name>-&gt;<name>opd</name></expr></argument>)</argument_list></call>) != 0</expr>)</condition><then>
			<return>return <expr>(<name>ret</name>)</expr>;</return></then></if>

		<expr_stmt><expr><name>dcp</name> = (<name>CBTreeCursor</name> *)<name>hcp</name>-&gt;<name>opd</name>-&gt;<name>internal</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>dcp</name>-&gt;<name>pgno</name> = <name>pgno</name></expr>;</expr_stmt>
		<expr_stmt><expr><name>dcp</name>-&gt;<name>indx</name> = <name>indx</name></expr>;</expr_stmt>

		<if>if <condition>(<expr><name>dbp</name>-&gt;<name>dup_compare</name> == <name>NULL</name></expr>)</condition><then> <block>{
			<comment type="block">/*
			* Converting to off-page Recno trees is tricky.  The
			* record number for the cursor is the index + 1 (to
			* convert to 1-based record numbers).
			*/</comment>
			<expr_stmt><expr><name>dcp</name>-&gt;<name>recno</name> = <name>indx</name> + 1</expr>;</expr_stmt>
		}</block></then></if>

		<comment type="block">/*
		* Transfer the deleted flag from the top-level cursor to the
		* created one.
		*/</comment>
		<if>if <condition>(<expr><call><name>F_ISSET</name><argument_list>(<argument><expr><name>hcp</name></expr></argument>, <argument><expr><name>H_DELETED</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
			<constructor_decl><name>F_SET</name><parameter_list>(<param><decl><type><name>dcp</name></type></decl></param>, <param><decl><type><name>C_DELETED</name></type></decl></param>)</parameter_list>;</constructor_decl>
			<constructor_decl><name>F_CLR</name><parameter_list>(<param><decl><type><name>hcp</name></type></decl></param>, <param><decl><type><name>H_DELETED</name></type></decl></param>)</parameter_list>;</constructor_decl>
		}</block></then></if>

		<return>return <expr>(0)</expr>;</return>
	}</block></function>
</public>
}</block></class>;</unit>