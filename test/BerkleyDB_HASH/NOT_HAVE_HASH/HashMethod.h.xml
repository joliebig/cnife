<?xml version="1.0" encoding="UTF-8"?><unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" dir="" filename="vorlage.h" language="C++">
<comment>//---refactored defines</comment>
<class>refines class <name>CHashMethod</name>
<block>{
<comment>//---refactored functions</comment><public>
public:

	<function><type><name>static</name> <name>int</name></type> <name>ham_db_create</name><parameter_list>(<param><decl><type><name>DB</name> *</type><name>dbp</name></decl></param>)</parameter_list>
	<block>{
		<constructor_decl><name>COMPQUIET</name><parameter_list>(<param><decl><type><name>dbp</name></type></decl></param>, <param><decl><type><name>NULL</name></type></decl></param>)</parameter_list>;</constructor_decl>
		<return>return <expr>(0)</expr>;</return>
	}</block></function>


	<function><type><name>static</name> <name>int</name></type> <name>ham_db_close</name><parameter_list>(<param><decl><type><name>DB</name> *</type><name>dbp</name></decl></param>)</parameter_list>
	<block>{
		<constructor_decl><name>COMPQUIET</name><parameter_list>(<param><decl><type><name>dbp</name></type></decl></param>, <param><decl><type><name>NULL</name></type></decl></param>)</parameter_list>;</constructor_decl>
		<return>return <expr>(0)</expr>;</return>
	}</block></function>

	<function_decl><type><name>static</name> <name>int</name></type> <name>ham_get_h_ffactor</name><parameter_list>(<param><decl><type><name>DB</name> *</type><name>dbp</name></decl></param>, <param><decl><type><name>u_int32_t</name> *</type><name>h_ffactorp</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name>static</name> <name>int</name></type> <name>ham_set_h_ffactor</name><parameter_list>(<param><decl><type><name>DB</name> *</type><name>dbp</name></decl></param>, <param><decl><type><name>u_int32_t</name></type> <name>h_ffactor</name></decl></param>)</parameter_list>;</function_decl>
	<decl_stmt><decl><type><name>static</name> <name>int</name></type> <name>ham_set_h_hash</name><argument_list>(<argument><expr><name>DB</name> *<name>dbp</name></expr></argument>, <argument><expr><call><name>u_int32_t</name> <argument_list>(<argument><expr>*<name>func</name></expr></argument>)</argument_list></call> <call><name>__P</name><argument_list>(<argument><expr>(<name>DB</name> *, <name>const</name> <name>void</name> *, <name>u_int32_t</name>)</expr></argument>)</argument_list></call></expr></argument>)</argument_list></decl>;</decl_stmt>
	<function_decl><type><name>static</name> <name>int</name></type> <name>ham_get_h_nelem</name><parameter_list>(<param><decl><type><name>DB</name> *</type><name>dbp</name></decl></param>, <param><decl><type><name>u_int32_t</name> *</type><name>h_nelemp</name></decl></param>)</parameter_list>;</function_decl>
	<function_decl><type><name>static</name> <name>int</name></type> <name>ham_set_h_nelem</name><parameter_list>(<param><decl><type><name>DB</name> *</type><name>dbp</name></decl></param>, <param><decl><type><name>u_int32_t</name></type> <name>h_nelem</name></decl></param>)</parameter_list>;</function_decl>

</public>
}</block></class>;</unit>