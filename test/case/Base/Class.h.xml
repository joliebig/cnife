<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="Class.h"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;iostream&gt;</cpp:file></cpp:include>
<using>using namespace <name>std</name>;</using>

<class>class <name>Class</name> <block>{<private type="default">
</private><public>public:
	<constructor_decl><name>Class</name><parameter_list>()</parameter_list>;</constructor_decl>
	<destructor_decl><name>~<name>Class</name></name><parameter_list>()</parameter_list>;</destructor_decl>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>A</name></expr></cpp:if>
	<decl_stmt><decl><type><name>int</name></type> <name>k</name></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

	<function_decl><type><name>void</name></type> <name>print1</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>print2</name><parameter_list>()</parameter_list>;</function_decl>
	<function_decl><type><name>void</name></type> <name>print3</name><parameter_list>()</parameter_list>;</function_decl>
</public>}</block>;</class>

<function><type><name>void</name></type> <name><name>Class</name>::<name>print1</name></name><parameter_list>()</parameter_list> <block>{
	<decl_stmt><decl><type><name>int</name></type> <name>k</name> =<init> <expr>10</expr></init></decl>;</decl_stmt>
	<switch>switch<condition>(<expr><name>k</name></expr>)</condition> <block>{
	<case>case <expr>1</expr>:
		<expr_stmt><expr><call><name>print1</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>A</name></expr></cpp:if>
	</case><case>case <expr>2</expr>:
		<expr_stmt><expr><call><name>print2</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	</case><default>default:
		<expr_stmt><expr><call><name>print3</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
		<break>break;</break>
	</default>}</block></switch>
}</block></function>
</unit>
