<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="OsFsync.h"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> once</cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db_config.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NO_SYSTEM_INCLUDES</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;fcntl.h&gt;</cpp:file></cpp:include>			<comment type="block">/* Required on some platforms. */</comment>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db_int.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"OsFsync.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"OsErrno.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>HAVE_VXWORKS</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ioLib.h"</cpp:file></cpp:include>

<cpp:define>#<cpp:directive>define</cpp:directive>	<name>fsync</name>(fd)	__vx_fsync(fd)</cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<class>class <name>COsFsync</name>
<block>{<private type="default">
</private><public>public:
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive>	<name>HAVE_VXWORKS</name></cpp:ifdef>
	
	<function><type><name>static</name> <name>int</name></type> <name>vx_fsync</name><parameter_list>(<param><decl><type><name>int</name></type> <name>fd</name></decl></param>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
	
		<comment type="block">/*
		 * The results of ioctl are driver dependent.  Some will return the
		 * number of bytes sync'ed.  Only if it returns 'ERROR' should we
		 * flag it.
		 */</comment>
		<if>if <condition>(<expr>(<name>ret</name> = <call><name>ioctl</name><argument_list>(<argument><expr><name>fd</name></expr></argument>, <argument><expr><name>FIOSYNC</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>) != <name>ERROR</name></expr>)</condition><then>
			<return>return <expr>(0)</expr>;</return></then></if>
		<return>return <expr>(<name>ret</name>)</expr>;</return>
	}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>__hp3000s900</name></cpp:ifdef>
<cpp:define>#<cpp:directive>define</cpp:directive>	<name>fsync</name>(fd)	__mpe_fsync(fd)</cpp:define>
	<function><type><name>static</name> <name>int</name></type> <name>mpe_fsync</name><parameter_list>(<param><decl><type><name>int</name></type> <name>fd</name></decl></param>)</parameter_list>
	<block>{
		<extern>extern FCONTROL(short, short, void *</extern>)</block>;</function>
	
		<expr_stmt><expr><call><name>FCONTROL</name><argument_list>(<argument><expr><call><name>_MPE_FILENO</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>2</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* Flush the buffers */</comment>
		<expr_stmt><expr><call><name>FCONTROL</name><argument_list>(<argument><expr><call><name>_MPE_FILENO</name><argument_list>(<argument><expr><name>fd</name></expr></argument>)</argument_list></call></expr></argument>, <argument><expr>6</expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>	<comment type="block">/* Write the EOF */</comment>
		<return>return <expr>(0)</expr>;</return>
	</public>}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	<decl><name>static</name> <name>int</name> <name>os_fsync</name><argument_list>(<argument><expr><name>DB_ENV</name> *<name>dbenv</name></expr></argument>, <argument><expr><name>DB_FH</name> *<name>fhp</name></expr></argument>)</argument_list>
	<block>{
		<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
	
		<comment type="block">/* Check for illegal usage. */</comment>
		<expr_stmt><expr><call><name>DB_ASSERT</name><argument_list>(<argument><expr><call><name>F_ISSET</name><argument_list>(<argument><expr><name>fhp</name></expr></argument>, <argument><expr><name>DB_FH_OPENED</name></expr></argument>)</argument_list></call> &amp;&amp; <name>fhp</name>-&gt;<name>fd</name> != -1</expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
		<comment type="block">/*
		 * Do nothing if the file descriptor has been marked as not requiring
		 * any sync to disk.
		 */</comment>
		<if>if <condition>(<expr><call><name>F_ISSET</name><argument_list>(<argument><expr><name>fhp</name></expr></argument>, <argument><expr><name>DB_FH_NOSYNC</name></expr></argument>)</argument_list></call></expr>)</condition><then>
			<return>return <expr>(0)</expr>;</return></then></if>
	
		<if>if <condition>(<expr><call><name>DB_GLOBAL</name><argument_list>(<argument><expr><name>j_fsync</name></expr></argument>)</argument_list></call> != <name>NULL</name></expr>)</condition><then>
			<expr_stmt><expr><name>ret</name> = <call><name>DB_GLOBAL</name><argument_list>(<argument><expr><name>j_fsync</name></expr></argument>)</argument_list></call>(<name>fhp</name>-&gt;<name>fd</name>)</expr>;</expr_stmt></then>
		<else>else
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>F_FULLFSYNC</name></expr></argument>)</argument_list></call></expr></cpp:if>
			<expr_stmt><expr><call><name>RETRY_CHK</name><argument_list>(<argument><expr>(<call><name>fcntl</name><argument_list>(<argument><expr><name>fhp</name>-&gt;<name>fd</name></expr></argument>, <argument><expr><name>F_FULLFSYNC</name></expr></argument>, <argument><expr>0</expr></argument>)</argument_list></call>)</expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>not</name> <call><name>defined</name><argument_list>(<argument><expr><name>F_FULLFSYNC</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_FDATASYNC</name></expr></argument>)</argument_list></call></expr></cpp:if>
			<expr_stmt><expr><call><name>RETRY_CHK</name><argument_list>(<argument><expr>(<call><name>fdatasync</name><argument_list>(<argument><expr><name>fhp</name>-&gt;<name>fd</name></expr></argument>)</argument_list></call>)</expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<expr_stmt><expr><call><name>RETRY_CHK</name><argument_list>(<argument><expr>(<call><name>fsync</name><argument_list>(<argument><expr><name>fhp</name>-&gt;<name>fd</name></expr></argument>)</argument_list></call>)</expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
	
		<if>if <condition>(<expr><name>ret</name> != 0</expr>)</condition><then>
			<expr_stmt><expr><call><name><name>CDbErr</name>::<name>db_err</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr>"fsync %s"</expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<return>return <expr>(<name>ret</name>)</expr>;</return>
	}</block></decl>
<decl/></class>};


</unit>
