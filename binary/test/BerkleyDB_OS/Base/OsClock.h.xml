<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="OsClock.h"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> once</cpp:pragma>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db_config.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NO_SYSTEM_INCLUDES</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>

<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>TIME_WITH_SYS_TIME</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>HAVE_SYS_TIME_H</name></expr></cpp:if>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/time.h&gt;</cpp:file></cpp:include>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;time.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* HAVE_SYS_TIME_H */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif> <comment type="block">/* TIME_WITH SYS_TIME */</comment>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db_int.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"OsClock.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"OsErrno.h"</cpp:file></cpp:include>


<comment type="line">// extracted from os_clock.c</comment>


<class>class <name>COsClock</name>
<block>{<private type="default">
</private><public>public:
	<function><type><name>static</name> <name>void</name></type> <name>os_clock</name><parameter_list>(<param><decl><type><name>DB_ENV</name> *</type><name>dbenv</name></decl></param>, <param><decl><type><name>u_int32_t</name> *</type><name>secsp</name></decl></param>, <param><decl><type><name>u_int32_t</name> *</type><name>usecsp</name></decl></param>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>const</name> <name>char</name> *</type><name>sc</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
	
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETTIMEOFDAY</name></expr></argument>)</argument_list></call></expr></cpp:if>
		<decl_stmt><decl><type>struct <name>timeval</name></type> <name>tp</name></decl>;</decl_stmt>
	
		<expr_stmt><expr><call><name>RETRY_CHK</name><argument_list>(<argument><expr>(<call><name>gettimeofday</name><argument_list>(<argument><expr>&amp;<name>tp</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call>)</expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>ret</name> != 0</expr>)</condition><then> <block>{
			<expr_stmt><expr><name>sc</name> = "gettimeofday"</expr>;</expr_stmt>
			<goto>goto <name>err</name>;</goto>
		}</block></then></if>
	
		<if>if <condition>(<expr><name>secsp</name> != <name>NULL</name></expr>)</condition><then>
			<expr_stmt><expr>*<name>secsp</name> = (<name>u_int32_t</name>)<name>tp</name>.<name>tv_sec</name></expr>;</expr_stmt></then></if>
		<if>if <condition>(<expr><name>usecsp</name> != <name>NULL</name></expr>)</condition><then>
			<expr_stmt><expr>*<name>usecsp</name> = (<name>u_int32_t</name>)<name>tp</name>.<name>tv_usec</name></expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETTIMEOFDAY</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CLOCK_GETTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
		<decl_stmt><decl><type>struct <name>timespec</name></type> <name>tp</name></decl>;</decl_stmt>
	
		<expr_stmt><expr><call><name>RETRY_CHK</name><argument_list>(<argument><expr>(<call><name>clock_gettime</name><argument_list>(<argument><expr><name>CLOCK_REALTIME</name></expr></argument>, <argument><expr>&amp;<name>tp</name></expr></argument>)</argument_list></call>)</expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>ret</name> != 0</expr>)</condition><then> <block>{
			<expr_stmt><expr><name>sc</name> = "clock_gettime"</expr>;</expr_stmt>
			<goto>goto <name>err</name>;</goto>
		}</block></then></if>
	
		<if>if <condition>(<expr><name>secsp</name> != <name>NULL</name></expr>)</condition><then>
			<expr_stmt><expr>*<name>secsp</name> = <name>tp</name>.<name>tv_sec</name></expr>;</expr_stmt></then></if>
		<if>if <condition>(<expr><name>usecsp</name> != <name>NULL</name></expr>)</condition><then>
			<expr_stmt><expr>*<name>usecsp</name> = <name>tp</name>.<name>tv_nsec</name> / 1000</expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr>!<call><name>defined</name><argument_list>(<argument><expr><name>HAVE_GETTIMEOFDAY</name></expr></argument>)</argument_list></call> &amp;&amp; !<call><name>defined</name><argument_list>(<argument><expr><name>HAVE_CLOCK_GETTIME</name></expr></argument>)</argument_list></call></expr></cpp:if>
		<decl_stmt><decl><type><name>time_t</name></type> <name>now</name></decl>;</decl_stmt>
	
		<expr_stmt><expr><call><name>RETRY_CHK</name><argument_list>(<argument><expr>(<call><name>time</name><argument_list>(<argument><expr>&amp;<name>now</name></expr></argument>)</argument_list></call> == (<name>time_t</name>)-1 ? 1 : 0)</expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<if>if <condition>(<expr><name>ret</name> != 0</expr>)</condition><then> <block>{
			<expr_stmt><expr><name>sc</name> = "time"</expr>;</expr_stmt>
			<goto>goto <name>err</name>;</goto>
		}</block></then></if>
	
		<if>if <condition>(<expr><name>secsp</name> != <name>NULL</name></expr>)</condition><then>
			<expr_stmt><expr>*<name>secsp</name> = <call><name><name>static_cast</name><argument_list>&lt;<argument><name>u_int32_t</name></argument>&gt;</argument_list></name><argument_list>(<argument><expr><name>now</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then></if>
		<if>if <condition>(<expr><name>usecsp</name> != <name>NULL</name></expr>)</condition><then>
			<expr_stmt><expr>*<name>usecsp</name> = 0</expr>;</expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<return>return;</return>
	
	<label><name>err</name>:</label>	<expr_stmt><expr><call><name><name>CDbErr</name>::<name>db_err</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr>"%s: %s"</expr></argument>, <argument><expr><name>sc</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<expr_stmt><expr>(<name>void</name>)<call><name><name>CDbErr</name>::<name>db_panic</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	}</block></function>
</public>}</block>;</class>


</unit>
