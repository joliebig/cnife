<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="OsFid.h"><cpp:pragma>#<cpp:directive>pragma</cpp:directive> once</cpp:pragma>
<cpp:define>#<cpp:directive>define</cpp:directive> <name>_LARGEFILE_SOURCE</name> 1</cpp:define>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db_config.h"</cpp:file></cpp:include>

<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>NO_SYSTEM_INCLUDES</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/types.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;sys/stat.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;unistd.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"db_int.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"OsFid.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"OsErrno.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"OsId.h"</cpp:file></cpp:include>
<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;common/DbErr.h&gt;</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>


<class>class <name>COsFid</name>
<block>{<private type="default">
</private><public>public:
	<function><type><name>static</name> <name>int</name></type> <name>os_fileid</name><parameter_list>(<param><decl><type><name>DB_ENV</name> *</type><name>dbenv</name></decl></param>, <param><decl><type><name>const</name> <name>char</name> *</type><name>fname</name></decl></param>, <param><decl><type><name>int</name></type> <name>unique_okay</name></decl></param>, <param><decl><type><name>u_int8_t</name> *</type><name>fidp</name></decl></param>)</parameter_list>
	<block>{
		<decl_stmt><decl><type><name>pid_t</name></type> <name>pid</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>db_threadid_t</name></type> <name>tid</name></decl>;</decl_stmt>
		<decl_stmt><decl><type>struct <name>stat</name></type> <name>sb</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>size_t</name></type> <name>i</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>int</name></type> <name>ret</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>u_int32_t</name></type> <name>tmp</name></decl>;</decl_stmt>
		<decl_stmt><decl><type><name>u_int8_t</name> *</type><name>p</name></decl>;</decl_stmt>
	
		<comment type="block">/* Clear the buffer. */</comment>
		<expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>fidp</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><name>DB_FILE_ID_LEN</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
	
		<comment type="block">/* On POSIX/UNIX, use a dev/inode pair. */</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>HAVE_VXWORKS</name></cpp:ifdef>
		<expr_stmt><expr><call><name>RETRY_CHK</name><argument_list>(<argument><expr>(<call><name>stat</name><argument_list>(<argument><expr>(<name>char</name> *)<name>fname</name></expr></argument>, <argument><expr>&amp;<name>sb</name></expr></argument>)</argument_list></call>)</expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
		<cpp:ifndef>#<cpp:directive>ifndef</cpp:directive> <name>WIN32</name></cpp:ifndef>
			<cpp:if>#<cpp:directive>if</cpp:directive> <expr>(<name>__GNUC__</name> &gt; 4 || (<name>__GNUC__</name> == 4 &amp;&amp; <name>__GNUC_MINOR__</name> &gt;= 1))</expr></cpp:if>
				<expr_stmt><expr><call><name>RETRY_CHK</name><argument_list>(<argument><expr>(<call><name>lstat</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr>&amp;<name>sb</name></expr></argument>)</argument_list></call>)</expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
				<expr_stmt><expr><call><name>RETRY_CHK</name><argument_list>(<argument><expr>(<call><name>stat</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr>&amp;<name>sb</name></expr></argument>)</argument_list></call>)</expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
			<expr_stmt><expr><call><name>RETRY_CHK</name><argument_list>(<argument><expr>(<call><name>stat</name><argument_list>(<argument><expr><name>fname</name></expr></argument>, <argument><expr>&amp;<name>sb</name></expr></argument>)</argument_list></call>)</expr></argument>, <argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
		<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
		<if>if <condition>(<expr><name>ret</name> != 0</expr>)</condition><then> <block>{
			<expr_stmt><expr><call><name><name>CDbErr</name>::<name>db_err</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr>"%s: %s"</expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><call><name>strerror</name><argument_list>(<argument><expr><name>ret</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<return>return <expr>(<name>ret</name>)</expr>;</return>
		}</block></then></if>
	
		<comment type="block">/*
		 * !!!
		 * Nothing is ever big enough -- on Sparc V9, st_ino, st_dev and the
		 * time_t types are all 8 bytes.  As DB_FILE_ID_LEN is only 20 bytes,
		 * we convert to a (potentially) smaller fixed-size type and use it.
		 *
		 * We don't worry about byte sexing or the actual variable sizes.
		 *
		 * When this routine is called from the DB access methods, it's only
		 * called once -- whatever ID is generated when a database is created
		 * is stored in the database file's metadata, and that is what is
		 * saved in the mpool region's information to uniquely identify the
		 * file.
		 *
		 * When called from the mpool layer this routine will be called each
		 * time a new thread of control wants to share the file, which makes
		 * things tougher.  As far as byte sexing goes, since the mpool region
		 * lives on a single host, there's no issue of that -- the entire
		 * region is byte sex dependent.  As far as variable sizes go, we make
		 * the simplifying assumption that 32-bit and 64-bit processes will
		 * get the same 32-bit values if we truncate any returned 64-bit value
		 * to a 32-bit value.  When we're called from the mpool layer, though,
		 * we need to be careful not to include anything that isn't
		 * reproducible for a given file, such as the timestamp or serial
		 * number.
		 */</comment>
		<expr_stmt><expr><name>tmp</name> = (<name>u_int32_t</name>)<name>sb</name>.<name>st_ino</name></expr>;</expr_stmt>
		<for>for (<init><expr><name>p</name> = (<name>u_int8_t</name> *)&amp;<name>tmp</name></expr>, <expr><name>i</name> = <call><name>sizeof</name><argument_list>(<argument><expr><name>u_int32_t</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>i</name> &gt; 0</expr>;</condition> <incr><expr>--<name>i</name></expr></incr>)
			<expr_stmt><expr>*<name>fidp</name>++ = *<name>p</name>++</expr>;</expr_stmt></for>
	
		<expr_stmt><expr><name>tmp</name> = (<name>u_int32_t</name>)<name>sb</name>.<name>st_dev</name></expr>;</expr_stmt>
		<for>for (<init><expr><name>p</name> = (<name>u_int8_t</name> *)&amp;<name>tmp</name></expr>, <expr><name>i</name> = <call><name>sizeof</name><argument_list>(<argument><expr><name>u_int32_t</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>i</name> &gt; 0</expr>;</condition> <incr><expr>--<name>i</name></expr></incr>)
			<expr_stmt><expr>*<name>fidp</name>++ = *<name>p</name>++</expr>;</expr_stmt></for>
	
		<if>if <condition>(<expr><name>unique_okay</name></expr>)</condition><then> <block>{
			<decl_stmt><decl><type><name>static</name> <name>u_int32_t</name></type> <name>fid_serial</name> =<init> <expr>0</expr></init></decl>;</decl_stmt>
	
			<comment type="block">/* Add in 32-bits of (hopefully) unique number. */</comment>
			<expr_stmt><expr><call><name><name>COsId</name>::<name>os_unique_id</name></name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr>&amp;<name>tmp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
			<for>for (<init><expr><name>p</name> = (<name>u_int8_t</name> *)&amp;<name>tmp</name></expr>, <expr><name>i</name> = <call><name>sizeof</name><argument_list>(<argument><expr><name>u_int32_t</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>i</name> &gt; 0</expr>;</condition> <incr><expr>--<name>i</name></expr></incr>)
				<expr_stmt><expr>*<name>fidp</name>++ = *<name>p</name>++</expr>;</expr_stmt></for>
	
			<comment type="block">/*
			 * Initialize/increment the serial number we use to help
			 * avoid fileid collisions.  Note we don't bother with
			 * locking; it's unpleasant to do from down in here, and
			 * if we race on this no real harm will be done, since the
			 * finished fileid has so many other components.
			 *
			 * We use the bottom 32-bits of the process ID, hoping they
			 * are more random than the top 32-bits (should we be on a
			 * machine with 64-bit process IDs).
			 *
			 * We increment by 100000 on each call as a simple way of
			 * randomizing; simply incrementing seems potentially less
			 * useful if pids are also simply incremented, since this
			 * is process-local and we may be one of a set of processes
			 * starting up.  100000 pushes us out of pid space on most
			 * 32-bit platforms, and has few interesting properties in
			 * base 2.
			 */</comment>
			<if>if <condition>(<expr><name>fid_serial</name> == 0</expr>)</condition><then> <block>{
				<expr_stmt><expr><name>dbenv</name>-&gt;<call><name>thread_id</name><argument_list>(<argument><expr><name>dbenv</name></expr></argument>, <argument><expr>&amp;<name>pid</name></expr></argument>, <argument><expr>&amp;<name>tid</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
				<expr_stmt><expr><name>fid_serial</name> = (<name>u_int32_t</name>)<name>pid</name></expr>;</expr_stmt>
			}</block></then> <else>else
				<expr_stmt><expr><name>fid_serial</name> += 100000</expr>;</expr_stmt></else></if>
	
			<for>for (<init><expr><name>p</name> =
			    (<name>u_int8_t</name> *)&amp;<name>fid_serial</name></expr>, <expr><name>i</name> = <call><name>sizeof</name><argument_list>(<argument><expr><name>u_int32_t</name></expr></argument>)</argument_list></call></expr>;</init> <condition><expr><name>i</name> &gt; 0</expr>;</condition> <incr><expr>--<name>i</name></expr></incr>)
				<expr_stmt><expr>*<name>fidp</name>++ = *<name>p</name>++</expr>;</expr_stmt></for>
		}</block></then></if>
	
		<return>return <expr>(0)</expr>;</return>
	}</block></function>
</public>}</block>;</class>


</unit>
